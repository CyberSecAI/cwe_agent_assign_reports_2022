{
  "retriever": "dense",
  "query": "## Vulnerability Description\nMissing Size Checks in Bluetooth HCI over SPI. Zephyr versions >= v1.14.2, >= v2.2.0 contain **Improper Handling of Length Parameter Inconsistency** (CWE-130). For more information, see https//github.com/zephyrproject-rtos/zephyr/security/advisories/GHSA-hg2w-62p6-g67c\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **Improper Handling of Length Parameter Inconsistency**\n- **product:** Zephyr\n- **version:** versions >= v1.14.2, >= v2.2.0\n- **component:** Bluetooth HCI over SPI\n\n## CVE Reference Links Content Summary\nBased on the provided information, here's a breakdown of the vulnerability described:\n\n**Root Cause:**\n\n- The vulnerability lies in the `bt_spi_rx_thread` function within the Bluetooth HCI over SPI driver (`drivers/bluetooth/hci/spi.c`).\n- The code directly copies a size value from the ACL header of an incoming SPI message without proper validation. This size value is then used to copy data into a fixed-size buffer, leading to an out-of-bounds write if the attacker provides a large size value in the ACL header.\n\n**Weaknesses/Vulnerabilities:**\n\n- **Lack of input validation:** The code fails to validate the length field (`acl_hdr.len`) read from the received data. It is treated as trusted data without any checks.\n- **Out-of-bounds write:** The size read from the header is used to write data to a fixed-size buffer (defaulting to 77 bytes). If the length is greater than the buffer's capacity, a write outside of the buffer occurs, causing a buffer overflow.\n\n**Impact of Exploitation:**\n\n- **Denial of Service (DoS):** A large specified size could cause a crash, resulting in denial of service.\n- **Remote Code Execution (RCE):** The out-of-bounds write can be potentially exploited to achieve arbitrary code execution. By carefully crafting the data to be copied, an attacker may overwrite critical parts of memory.\n\n**Attack Vectors:**\n\n- **Physical Access via SPI:** The attack vector is physical access to the SPI interface connected to the vulnerable device. The attacker needs to be able to send a crafted Bluetooth HCI message over SPI.\n\n**Required Attacker Capabilities/Position:**\n\n- **Physical access to the SPI bus.** The attacker must have the ability to send SPI messages to the vulnerable device.\n- **Ability to control the data sent:** The attacker must be able to craft a HCI_ACL message and manipulate the `len` field in the `acl_hdr`.\n\n**Additional Notes:**\n\n- The vulnerability is present in Zephyr versions v1.14.2, and v2.2.0-v2.7.0 and is fixed in version v3.0.0.\n- The vulnerability has a low CVSS severity score of 3.8, primarily due to the physical attack vector.\n- The vulnerability is related to CWE-130: Improper Handling of Length Parameter Inconsistency.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 130 | Improper Handling of Length Parameter Inconsistency | Base | Allowed | sparse | 0.468 |\n| 2 | 191 | Integer Underflow (Wrap or Wraparound) | Base | Allowed | sparse | 0.257 |\n| 3 | 588 | Attempt to Access Child of a Non-structure Pointer | Variant | Allowed | sparse | 0.253 |\n| 4 | 703 | Improper Check or Handling of Exceptional Conditions | Pillar | Discouraged | sparse | 0.248 |\n| 5 | 694 | Use of Multiple Resources with Duplicate Identifier | Base | Allowed | sparse | 0.242 |\n| 6 | 805 | Buffer Access with Incorrect Length Value | Base | Allowed | dense | 0.543 |\n| 7 | 806 | Buffer Access Using Size of Source Buffer | Variant | Allowed | graph | 0.002 |\n| 8 | 1284 | Improper Validation of Specified Quantity in Input | Base | Allowed | sparse | 0.242 |\n| 9 | 122 | Heap-based Buffer Overflow | Variant | Allowed | sparse | 0.203 |\n| 10 | 476 | NULL Pointer Dereference | Base | Allowed | sparse | 0.189 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-130: Improper Handling of Length Parameter Inconsistency\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.\n\n### Extended Description\nIf an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.\n\n### Alternative Terms\nlength manipulation\nlength tampering\n\n### Relationships\nChildOf -> CWE-240\nChildOf -> CWE-119\nChildOf -> CWE-119\nCanPrecede -> CWE-805\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This probably overlaps other categories including zero-length issues.\n\n\n\n### Observed Examples\n- **CVE-2014-0160:** Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.\n- **CVE-2009-2299:** Web application firewall consumes excessive memory when an HTTP request contains a large Content-Length value but no POST data.\n- **CVE-2001-0825:** Buffer overflow in internal string handling routine allows remote attackers to execute arbitrary commands via a length argument of zero or less, which disables the length check.\n\n\n\n\n## CWE-191: Integer Underflow (Wrap or Wraparound)\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\n### Extended Description\nThis can happen in signed and unsigned cases.\n\n### Alternative Terms\nInteger underflow: \n\n\"Integer underflow\" is sometimes used to identify signedness errors in which an originally positive number becomes negative as a result of subtraction. However, there are cases of bad subtraction in which unsigned integers are involved, so it's not always a signedness issue.\n\n\n\"Integer underflow\" is occasionally used to describe array index errors in which the index is negative.\n\n\n### Relationships\nChildOf -> CWE-682\nChildOf -> CWE-682\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2004-0816:** Integer underflow in firewall via malformed packet.\n- **CVE-2004-1002:** Integer underflow by packet with invalid length.\n- **CVE-2005-0199:** Long input causes incorrect length calculation.\n\n\n\n\n## CWE-588: Attempt to Access Child of a Non-structure Pointer\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nCasting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-704\nChildOf -> CWE-758\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2021-3510:** JSON decoder accesses a C union using an invalid offset to an object\n\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction:** Pillar\n**Status:** Incomplete\n\n### Description\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nNone\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is extremely high-level, a Pillar.\n**Comments:** Consider children or descendants of this entry instead.\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** This is a high-level class that might have some overlap with other classes. It could be argued that even \"normal\" weaknesses such as buffer overflows involve unusual or exceptional conditions. In that sense, this might be an inherent aspect of most other weaknesses within CWE, similar to API Abuse (CWE-227) and Indicator of Poor Code Quality (CWE-398). However, this entry is currently intended to unify disparate concepts that do not have other places within the Research Concepts view (CWE-1000).\n\n\n\n### Observed Examples\n- **[REF-1374]:** Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)\n- **CVE-2022-22224:** Chain: an operating system does not properly process malformed Open Shortest Path First (OSPF) Type/Length/Value Identifiers (TLV) (CWE-703), which can cause the process to enter an infinite loop (CWE-835)\n\n\n\n\n## CWE-694: Use of Multiple Resources with Duplicate Identifier\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.\n\n### Extended Description\nIf the product assumes that each resource has a unique identifier, the product could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-99\nChildOf -> CWE-573\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This weakness is probably closely associated with other issues related to doubling, such as CWE-675 (Duplicate Operations on Resource). It's often a case of an API contract violation (CWE-227).\n\n\n\n### Observed Examples\n- **CVE-2013-4787:** chain: mobile OS verifies cryptographic signature of file in an archive, but then installs a different file with the same name that is also listed in the archive.\n\n\n\n\n## CWE-805: Buffer Access with Incorrect Length Value\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.\n\n### Extended Description\nWhen the length value exceeds the size of the destination, a buffer overflow could occur.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2011-1959:** Chain: large length value causes buffer over-read (CWE-126)\n- **CVE-2011-1848:** Use of packet length field to make a calculation, then copy into a fixed-size buffer\n- **CVE-2011-0105:** Chain: retrieval of length value from an uninitialized memory location\n\n\n\n\n## CWE-806: Buffer Access Using Size of Source Buffer\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.\n\n### Extended Description\nWhen the size of the destination is smaller than the size of the source, a buffer overflow could occur.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-805\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n\n\n\n## CWE-1284: Improper Validation of Specified Quantity in Input\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.\n\n### Extended Description\n\n\nSpecified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-20\nChildOf -> CWE-20\nCanPrecede -> CWE-789\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry is still under development and will continue to see updates and content improvements.\n\n\n\n### Observed Examples\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2008-1440:** lack of validation of length field leads to infinite loop\n- **CVE-2008-2374:** lack of validation of string length fields allows memory consumption or buffer over-read\n\n\n\n\n## CWE-122: Heap-based Buffer Overflow\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nA heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-788\nChildOf -> CWE-787\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Heap-based buffer overflows are usually just as dangerous as stack-based buffer overflows.\n\n\n\n### Observed Examples\n- **CVE-2021-43537:** Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122)\n- **CVE-2007-4268:** Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122)\n- **CVE-2009-2523:** Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122).\n\n\n\n\n## CWE-476: NULL Pointer Dereference\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product dereferences a pointer that it expects to be valid but is NULL.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNPD: Common abbreviation for Null Pointer Dereference\nnull deref: Common abbreviation for Null Pointer Dereference\nNPE: Common abbreviation for Null Pointer Exception\nnil pointer dereference: used for access of nil in Go programs\n\n### Relationships\nChildOf -> CWE-710\nChildOf -> CWE-754\nChildOf -> CWE-754\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2005-3274:** race condition causes a table to be corrupted if a timer activates while it is being modified, leading to resultant NULL dereference; also involves locking.\n- **CVE-2002-1912:** large number of packets leads to NULL dereference\n- **CVE-2005-0772:** packet with invalid error status value triggers NULL dereference\n\n",
  "keyphrases": {},
  "timestamp": "2025-04-02 00:58:30",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "Base",
      "score": 0.7811513324525179
    },
    {
      "cwe_id": "191",
      "name": "Integer Underflow (Wrap or Wraparound)",
      "type": "Base",
      "score": 0.7715485149580703
    },
    {
      "cwe_id": "131",
      "name": "Incorrect Calculation of Buffer Size",
      "type": "Base",
      "score": 0.7711032239738553
    },
    {
      "cwe_id": "130",
      "name": "Improper Handling of Length Parameter Inconsistency",
      "type": "Base",
      "score": 0.768423052374956
    },
    {
      "cwe_id": "805",
      "name": "Buffer Access with Incorrect Length Value",
      "type": "Base",
      "score": 0.7654944393970178
    },
    {
      "cwe_id": "824",
      "name": "Access of Uninitialized Pointer",
      "type": "Base",
      "score": 0.7585378909087567
    },
    {
      "cwe_id": "703",
      "name": "Improper Check or Handling of Exceptional Conditions",
      "type": "Pillar",
      "score": 0.7549936056071644
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "type": "Base",
      "score": 0.7520839289126728
    },
    {
      "cwe_id": "126",
      "name": "Buffer Over-read",
      "type": "Variant",
      "score": 0.7496204191057974
    },
    {
      "cwe_id": "822",
      "name": "Untrusted Pointer Dereference",
      "type": "Base",
      "score": 0.7473731960421113
    }
  ]
}