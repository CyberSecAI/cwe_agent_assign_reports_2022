{
  "retriever": "dense",
  "query": "## Vulnerability Description\nCleartext Transmission of Sensitive InformationCleartext transmission of sensitive information vulnerability in MELSEC iQ-R series Safety CPU R08/16/32/120SFCPU firmware versions 26 and prior and MELSEC iQ-R series SIL2 Process CPU R08/16/32/120PSFCPU firmware versions 11 and prior allows a remote unauthenticated attacker to login to a target CPU module by obtaining credentials other than password.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **cleartext transmission of sensitive information**\n- **impact:** login to target CPU module\n- **vector:** obtaining credentials\n- **attacker:** remote unauthenticated attacker\n- **product:** MELSEC iQ-R series Safety CPU R08/16/32/120SFCPU and MELSEC iQ-R series SIL2 Process CPU R08/16/32/120PSFCPU\n- **version:** 26 and prior and 11 and prior\n\n## CVE Reference Links Content Summary\nBased on the provided document, here's a breakdown of the vulnerability:\n\n**Root Cause of Vulnerability:**\n\n*   Cleartext transmission of sensitive information. The affected Mitsubishi Electric MELSEC iQ-R Series CPU modules transmit credentials, other than password, in cleartext, which can be intercepted by an attacker.\n\n**Weaknesses/Vulnerabilities Present:**\n\n*   **CWE-319:** Cleartext Transmission of Sensitive Information. This vulnerability arises from the lack of encryption or secure transport mechanisms for sensitive data, allowing unauthorized interception.\n\n**Impact of Exploitation:**\n\n*   A remote attacker can potentially gain unauthorized access to the CPU module by intercepting and using the transmitted credentials. This access could enable them to manipulate the device, potentially impacting industrial control processes.\n\n**Attack Vectors:**\n\n*   **Remote exploitation:** The vulnerability can be exploited remotely, over a network.\n*   **Low attack complexity:** Exploitation is considered to have a low level of complexity.\n\n**Required Attacker Capabilities/Position:**\n\n*   The attacker needs to be able to intercept network traffic to capture the cleartext credentials. This implies network access to the targeted device. No specific privileges or user interaction is needed on target host\n\n**Additional Details:**\n\n*   The vulnerability is identified as CVE-2021-20599.\n*   The affected products include various MELSEC iQ-R series Safety and SIL2 Process CPU modules with specific firmware versions.\n*   The advisory provides mitigation strategies including using firewalls, VPNs, LAN access restrictions, and IP filters.\n*   The vulnerability was reported by Ivan Speziale of Nozomi Networks.\n*   A CVSS v3 base score of 9.1 and a v4 score of 7.8 have been calculated.\n\nThe document provides more detail than a typical CVE description, including specific affected products, mitigation strategies, and reporting information.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 836 | Use of Password Hash Instead of Password for Authentication | Base | Allowed | sparse | 0.583 |\n| 2 | 294 | Authentication Bypass by Capture-replay | Base | Allowed | sparse | 0.545 |\n| 3 | 130 | Improper Handling of Length Parameter Inconsistency | Base | Allowed | sparse | 0.504 |\n| 4 | 328 | Use of Weak Hash | Base | Allowed | sparse | 0.495 |\n| 5 | 645 | Overly Restrictive Account Lockout Mechanism | Base | Allowed | sparse | 0.450 |\n| 6 | 316 | Cleartext Storage of Sensitive Information in Memory | Variant | Allowed | dense | 0.620 |\n| 7 | 805 | Buffer Access with Incorrect Length Value | Base | Allowed | graph | 0.002 |\n| 8 | 522 | Insufficiently Protected Credentials | Class | Allowed-with-Review | sparse | 0.422 |\n| 9 | 337 | Predictable Seed in Pseudo-Random Number Generator (PRNG) | Variant | Allowed | sparse | 0.412 |\n| 10 | 639 | Authorization Bypass Through User-Controlled Key | Base | Allowed | sparse | 0.407 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-836: Use of Password Hash Instead of Password for Authentication\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.\n\n### Extended Description\n\n\nSome authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password.\n\n\nAs a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\nPeerOf -> CWE-602\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2009-1283:** Product performs authentication with user-supplied password hashes that can be obtained from a separate SQL injection vulnerability (CVE-2009-1282).\n- **CVE-2005-3435:** Product allows attackers to bypass authentication by obtaining the password hash for another user and specifying the hash in the pwd argument.\n\n\n\n\n## CWE-294: Authentication Bypass by Capture-replay\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nA capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\n### Extended Description\nCapture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2005-3435:** product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.\n- **CVE-2007-4961:** Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).\n\n\n\n\n## CWE-130: Improper Handling of Length Parameter Inconsistency\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.\n\n### Extended Description\nIf an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code.\n\n### Alternative Terms\nlength manipulation\nlength tampering\n\n### Relationships\nChildOf -> CWE-240\nChildOf -> CWE-119\nChildOf -> CWE-119\nCanPrecede -> CWE-805\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This probably overlaps other categories including zero-length issues.\n\n\n\n### Observed Examples\n- **CVE-2014-0160:** Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.\n- **CVE-2009-2299:** Web application firewall consumes excessive memory when an HTTP request contains a large Content-Length value but no POST data.\n- **CVE-2001-0825:** Buffer overflow in internal string handling routine allows remote attackers to execute arbitrary commands via a length argument of zero or less, which disables the length check.\n\n\n\n\n## CWE-328: Use of Weak Hash\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\n### Extended Description\n\n\nA hash function is defined as an algorithm that maps arbitrarily sized data into a fixed-sized digest (output) such that the following properties hold:\n\n\n  1. The algorithm is not invertible (also called \"one-way\" or \"not reversible\")\n\n  1. The algorithm is deterministic; the same input produces the same digest every time\n\n Building on this definition, a cryptographic hash function must also ensure that a malicious actor cannot leverage the hash function to have a reasonable chance of success at determining any of the following:\n\n  1. the original input (preimage attack), given only the digest\n\n  1. another input that can produce the same digest (2nd preimage attack), given the original input\n\n  1. a set of two or more inputs that evaluate to the same digest (birthday attack), given the actor can arbitrarily choose the inputs to be hashed and can do so a reasonable amount of times\n\nWhat is regarded as \"reasonable\" varies by context and threat model, but in general, \"reasonable\" could cover any attack that is more efficient than brute force (i.e., on average, attempting half of all possible combinations). Note that some attacks might be more efficient than brute force but are still not regarded as achievable in the real world.\n\nAny algorithm that does not meet the above conditions will generally be considered weak for general use in hashing.\n\n\nIn addition to algorithmic weaknesses, a hash function can be made weak by using the hash in a security context that breaks its security guarantees. For example, using a hash function without a salt for storing passwords (that are sufficiently short) could enable an adversary to create a \"rainbow table\" [REF-637] to recover the password under certain conditions; this attack works against such hash functions as MD5, SHA-1, and SHA-2.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-326\nChildOf -> CWE-327\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** Since CWE 4.4, various cryptography-related entries including CWE-328 have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.\n\n\n\n### Observed Examples\n- **CVE-2022-30320:** Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.\n- **CVE-2005-4900:** SHA-1 algorithm is not collision-resistant.\n- **CVE-2020-25685:** DNS product uses a weak hash (CRC32 or SHA-1) of the query name, allowing attacker to forge responses by computing domain names with the same hash.\n\n\n\n\n## CWE-645: Overly Restrictive Account Lockout Mechanism\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.\n\n### Extended Description\nAccount lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n\n\n\n## CWE-316: Cleartext Storage of Sensitive Information in Memory\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product stores sensitive information in cleartext in memory.\n\n### Extended Description\n\n\nThe sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the product crashes, or if the programmer does not properly clear the memory before freeing it.\n\n\nIt could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-312\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This could be a resultant weakness, e.g. if the compiler removes code that was intended to wipe memory.\n\n**[Terminology]** Different people use \"cleartext\" and \"plaintext\" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).\n\n\n\n### Observed Examples\n- **CVE-2001-1517:** Sensitive authentication information in cleartext in memory.\n- **CVE-2001-0984:** Password protector leaves passwords in memory when window is minimized, even when \"clear password when minimized\" is set.\n- **CVE-2003-0291:** SSH client does not clear credentials from memory.\n\n\n\n\n## CWE-805: Buffer Access with Incorrect Length Value\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.\n\n### Extended Description\nWhen the length value exceeds the size of the destination, a buffer overflow could occur.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2011-1959:** Chain: large length value causes buffer over-read (CWE-126)\n- **CVE-2011-1848:** Use of packet length field to make a calculation, then copy into a fixed-size buffer\n- **CVE-2011-0105:** Chain: retrieval of length value from an uninitialized memory location\n\n\n\n\n## CWE-522: Insufficiently Protected Credentials\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\nChildOf -> CWE-287\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-30018:** A messaging platform serializes all elements of User/Group objects, making private information available to adversaries\n- **CVE-2022-29959:** Initialization file contains credentials that can be decoded using a \"simple string transformation\"\n- **CVE-2022-35411:** Python-based RPC framework enables pickle functionality by default, allowing clients to unpickle untrusted data.\n\n\n\n\n## CWE-337: Predictable Seed in Pseudo-Random Number Generator (PRNG)\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nA Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.\n\n### Extended Description\nThe use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers will be generated by the PRNG.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-335\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, \"randomness\" is used heavily. However, within cryptography, \"entropy\" is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.\n\n\n\n### Observed Examples\n- **CVE-2020-7010:** Cloud application on Kubernetes generates passwords using a weak random number generator based on deployment time.\n- **CVE-2019-11495:** server uses erlang:now() to seed the PRNG, which results in a small search space for potential random seeds\n- **CVE-2008-0166:** The removal of a couple lines of code caused Debian's OpenSSL Package to only use the current process ID for seeding a PRNG\n\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n### Extended Description\n\n\nRetrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.\n\n\nFor example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.\n\n\nOne manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.\n\n\n### Alternative Terms\nInsecure Direct Object Reference / IDOR: The \"Insecure Direct Object Reference\" term, as described in the OWASP Top Ten, is broader than this CWE because it also covers path traversal (CWE-22). Within the context of vulnerability theory, there is a similarity between the OWASP concept and CWE-706: Use of Incorrectly-Resolved Name or Reference.\nBroken Object Level Authorization / BOLA: BOLA is used in the 2019 OWASP API Security Top 10 and is said to be the same as IDOR.\nHorizontal Authorization: \"Horizontal Authorization\" is used to describe situations in which two users have the same privilege level, but must be prevented from accessing each other's resources. This is fairly common when using key-based access to resources in a multi-user context.\n\n### Relationships\nChildOf -> CWE-863\nChildOf -> CWE-863\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2021-36539:** An educational application does not appropriately restrict file IDs to a particular user. The attacker can brute-force guess IDs, indicating IDOR.\n\n",
  "keyphrases": {},
  "timestamp": "2025-04-01 20:39:43",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "1391",
      "name": "Use of Weak Credentials",
      "type": "Class",
      "score": 0.7735062379469004
    },
    {
      "cwe_id": "330",
      "name": "Use of Insufficiently Random Values",
      "type": "Class",
      "score": 0.7702080781018799
    },
    {
      "cwe_id": "345",
      "name": "Insufficient Verification of Data Authenticity",
      "type": "Class",
      "score": 0.768634782385369
    },
    {
      "cwe_id": "668",
      "name": "Exposure of Resource to Wrong Sphere",
      "type": "Class",
      "score": 0.7684458702370742
    },
    {
      "cwe_id": "41",
      "name": "Improper Resolution of Path Equivalence",
      "type": "Base",
      "score": 0.7670107066290881
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "type": "Class",
      "score": 0.7651223620366305
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "type": "Base",
      "score": 0.764852007675529
    },
    {
      "cwe_id": "312",
      "name": "Cleartext Storage of Sensitive Information",
      "type": "Base",
      "score": 0.7646410820751176
    },
    {
      "cwe_id": "807",
      "name": "Reliance on Untrusted Inputs in a Security Decision",
      "type": "Base",
      "score": 0.7608397189301392
    },
    {
      "cwe_id": "667",
      "name": "Improper Locking",
      "type": "Class",
      "score": 0.7606065427193044
    }
  ]
}