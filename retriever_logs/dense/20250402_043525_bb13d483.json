{
  "retriever": "dense",
  "query": "## Vulnerability Description\nWhite Shark System (WSS) 1.3.2 has an unauthorized access vulnerability in default_user_edit.php, remote attackers can exploit this vulnerability to escalate to admin privileges.\n\n### Vulnerability Description Key Phrases\n- **impact:** escalate to admin privileges\n- **attacker:** remote attackers\n- **product:** White Shark System (WSS)\n- **version:** 1.3.2\n- **component:** default_user_edit.php\n\n## CVE Reference Links Content Summary\nThe provided content details multiple vulnerabilities in White Shark System(wss) version 1.3.2. This content provides more details than a typical CVE description.\n\nHere's a breakdown of the vulnerabilities:\n\n**[1] SQL Injection Vulnerability**\n\n*   **Root Cause:** Insufficient input sanitization of the `sort` parameter in `control_task.php`, `control_project.php`, and `default_user.php` files.\n*   **Vulnerability:** SQL injection due to direct insertion of user-controlled data into a database query. The `GetSQLValueString` function does not sanitize the input when the type is defined.\n*   **Impact:** Remote attackers can extract sensitive database information.\n*   **Attack Vector:** Sending a crafted HTTP GET request with a malicious `sort` parameter.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server.\n\n**[2] SQL Injection Vulnerability**\n\n*   **Root Cause:** Insufficient input sanitization of the `csa_to_user` parameter in the `default_task_edituser.php` file.\n*  **Vulnerability:** SQL injection due to direct insertion of user-controlled POST data into a database query.\n*   **Impact:** Remote attackers can extract sensitive database information.\n*   **Attack Vector:** Sending a crafted HTTP POST request with a malicious `csa_to_user` parameter.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server.\n\n**[3] SQL Injection Vulnerability**\n\n*   **Root Cause:** Insufficient input sanitization of the `date` parameter in the `log_edit.php` file.\n*   **Vulnerability:** SQL injection due to direct insertion of user-controlled data into a database query. The data is not processed by the `GetSQLValueString` function.\n*   **Impact:** Remote attackers can extract sensitive database information.\n*   **Attack Vector:** Sending a crafted HTTP GET request with a malicious `date` parameter.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server.\n\n**[4] Unauthorized Access Vulnerability**\n\n*   **Root Cause:**  The `user_edit_password.php` file allows password modification based on the `ID` parameter without verifying the current password of the user being modified.\n*   **Vulnerability:** Ability to change any user's password without proper authorization.\n*   **Impact:** Remote attackers can modify the password of any user, including administrators.\n*   **Attack Vector:** Sending a crafted HTTP POST request with a target `ID` and new password values.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server, and have access to an authenticated session.\n\n**[5] Cross-Site Request Forgery (CSRF) Vulnerability**\n\n*   **Root Cause:** The `user_edit_password.php` file lacks CSRF protection, allowing malicious requests to be triggered by a victim's browser.\n*   **Vulnerability:** Ability to modify a user's password through a CSRF attack.\n*   **Impact:** Remote attackers can force a logged-in user to change their password.\n*   **Attack Vector:** Tricking a logged-in user into visiting a malicious page that sends a crafted POST request to `user_edit_password.php`.\n*    **Attacker Capabilities:** The attacker needs to trick a logged-in user into visiting a malicious page.\n\n**[6] Unauthorized Access Vulnerability**\n\n*   **Root Cause:** The `default_user_edit.php` file uses the `ID` parameter from the POST data to update user information without proper authorization checks.\n*  **Vulnerability:** Ability to modify any user's information, including their rank, leading to privilege escalation.\n*   **Impact:** Remote attackers can modify any user's details and escalate their privileges to admin.\n*   **Attack Vector:** Sending a crafted HTTP POST request with a target `ID` and modified user details.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server, and have access to an authenticated session.\n\n**[7] Sensitive Information Disclosure Vulnerability**\n\n*   **Root Cause:** The `if_get_addbook.php` file lacks proper authentication and authorization checks and the `check_token` function returns the uid of all users when the token is 0.\n*   **Vulnerability:** Unauthorized retrieval of all users' information.\n*  **Impact:** Remote attackers can obtain the usernames and other details of all users on the current site.\n*   **Attack Vector:** Sending a POST request with the token parameter set to 0 to `if_get_addbook.php`.\n*    **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server.\n\n**[8] Unauthorized Access Vulnerability**\n\n*   **Root Cause:** The `default_task_add.php` file allows specifying the task creator using `$_POST[\u2018csa_create_user\u2019]` without proper authorization.\n*   **Vulnerability:** Ability to create tasks as another user, including the administrator.\n*   **Impact:** Remote attackers can forge tasks created by any user including admin.\n*  **Attack Vector:** Sending a POST request with a forged `csa_create_user` value to `default_task_add.php`.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server, and have access to an authenticated session.\n\n**[9] Web Site Physical Path Leakage Vulnerability**\n\n*   **Root Cause:**  Multiple files (`control_file.php`, `control_log.php`, `control_project.php`, `control_task.php`, `tree.php`) display the full server path in error messages.\n*   **Vulnerability:** Disclosure of server's physical path through error messages.\n*   **Impact:**  Remote attackers can gain information about the server's directory structure.\n*   **Attack Vector:** Triggering an error in the mentioned files.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server and trigger errors.\n\nIn summary, the provided content details numerous vulnerabilities, including SQL injection, unauthorized access, CSRF, and sensitive information disclosure. These issues stem from lack of input validation and authorization checks within the application.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 620 | Unverified Password Change | Base | Allowed | sparse | 0.057 |\n| 2 | 472 | External Control of Assumed-Immutable Web Parameter | Base | Allowed | sparse | 0.055 |\n| 3 | 639 | Authorization Bypass Through User-Controlled Key | Base | Allowed | sparse | 0.048 |\n| 4 | 209 | Generation of Error Message Containing Sensitive Information | Base | Allowed | sparse | 0.048 |\n| 5 | 269 | Improper Privilege Management | Class | Discouraged | sparse | 0.044 |\n| 6 | 425 | Direct Request ('Forced Browsing') | Base | Allowed | dense | 0.524 |\n| 7 | 471 | Modification of Assumed-Immutable Data (MAID) | Base | Allowed | graph | 0.003 |\n| 8 | 285 | Improper Authorization | Class | Discouraged | sparse | 0.043 |\n| 9 | 23 | Relative Path Traversal | Base | Allowed | sparse | 0.043 |\n| 10 | 306 | Missing Authentication for Critical Function | Base | Allowed | sparse | 0.042 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-620: Unverified Password Change\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nWhen setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.\n\n### Extended Description\nThis could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2007-0681:** Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.\n- **CVE-2000-0944:** Web application password change utility doesn't check the original password.\n\n\n\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n### Extended Description\n\n\nIf a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.\n\n\nFor example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.\n\n\n### Alternative Terms\nAssumed-Immutable Parameter Tampering\n\n### Relationships\nChildOf -> CWE-642\nChildOf -> CWE-471\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This is a primary weakness for many other weaknesses and functional consequences, including XSS, SQL injection, path disclosure, and file inclusion.\n\n**[Theoretical]** This is a technology-specific MAID problem.\n\n\n\n### Observed Examples\n- **CVE-2002-0108:** Forum product allows spoofed messages of other users via hidden form fields for name and e-mail address.\n- **CVE-2000-0253:** Shopping cart allows price modification via hidden form field.\n- **CVE-2000-0254:** Shopping cart allows price modification via hidden form field.\n\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n### Extended Description\n\n\nRetrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.\n\n\nFor example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.\n\n\nOne manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.\n\n\n### Alternative Terms\nInsecure Direct Object Reference / IDOR: The \"Insecure Direct Object Reference\" term, as described in the OWASP Top Ten, is broader than this CWE because it also covers path traversal (CWE-22). Within the context of vulnerability theory, there is a similarity between the OWASP concept and CWE-706: Use of Incorrectly-Resolved Name or Reference.\nBroken Object Level Authorization / BOLA: BOLA is used in the 2019 OWASP API Security Top 10 and is said to be the same as IDOR.\nHorizontal Authorization: \"Horizontal Authorization\" is used to describe situations in which two users have the same privilege level, but must be prevented from accessing each other's resources. This is fairly common when using key-based access to resources in a multi-user context.\n\n### Relationships\nChildOf -> CWE-863\nChildOf -> CWE-863\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2021-36539:** An educational application does not appropriately restrict file IDs to a particular user. The attacker can brute-force guess IDs, indicating IDOR.\n\n\n\n\n## CWE-209: Generation of Error Message Containing Sensitive Information\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product generates an error message that includes sensitive information about its environment, users, or associated data.\n\n### Extended Description\n\n\nThe sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways:\n\n\n  - self-generated: the source code explicitly constructs the error message and delivers it\n\n  - externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer\n\nAn attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of \"..\" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\nChildOf -> CWE-200\nChildOf -> CWE-755\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2008-2049:** POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness.\n- **CVE-2007-5172:** Program reveals password in error message if attacker can trigger certain database errors.\n- **CVE-2008-4638:** Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).\n\n\n\n\n## CWE-269: Improper Privilege Management\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-269 is commonly misused. It can be conflated with \"privilege escalation,\" which is a technical impact that is listed in many low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.\n**Comments:** If an error or mistake allows privilege escalation, then use the CWE ID for that mistake. Avoid using CWE-269 when only phrases such as \"privilege escalation\" or \"gain privileges\" are available, as these indicate technical impact of the vulnerability - not the root cause weakness. If the root cause seems to be directly related to privileges, then examine the children of CWE-269 for additional hints, such as Execution with Unnecessary Privileges (CWE-250) or Incorrect Privilege Assignment (CWE-266).\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n\n\n### Observed Examples\n- **CVE-2001-1555:** Terminal privileges are not reset when a user logs out.\n- **CVE-2001-1514:** Does not properly pass security context to child processes in certain cases, allows privilege escalation.\n- **CVE-2001-0128:** Does not properly compute roles.\n\n\n\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n### Extended Description\nWeb applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.\n\n### Alternative Terms\nforced browsing: The \"forced browsing\" term could be misinterpreted to include weaknesses such as CSRF or XSS, so its use is discouraged.\n\n### Relationships\nChildOf -> CWE-862\nChildOf -> CWE-862\nChildOf -> CWE-288\nChildOf -> CWE-424\nCanPrecede -> CWE-471\nCanPrecede -> CWE-98\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection.\n\n**[Theoretical]** \"Forced browsing\" is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically \"authentication bypass\" or \"path disclosure,\" although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables.\n\n\n\n### Observed Examples\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect.\n- **CVE-2004-2144:** Bypass authentication via direct request.\n\n\n\n\n## CWE-471: Modification of Assumed-Immutable Data (MAID)\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not properly protect an assumed-immutable element from being modified by an attacker.\n\n### Extended Description\nThis occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-664\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** MAID issues can be primary to many other weaknesses, and they are a major factor in languages that provide easy access to internal program constructs, such as PHP's register_globals and similar features. However, MAID issues can also be resultant from weaknesses that modify internal state; for example, a program might validate some data and store it in memory, but a buffer overflow could overwrite that validated data, leading to a change in program logic.\n\n**[Theoretical]** There are many examples where the MUTABILITY property is a major factor in a vulnerability.\n\n\n\n### Observed Examples\n- **CVE-2002-1757:** Relies on $PHP_SELF variable for authentication.\n- **CVE-2005-1905:** Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.\n\n\n\n\n## CWE-285: Improper Authorization\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\n\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.\n**Reasons:**\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-2960:** Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.\n\n\n\n\n## CWE-23: Relative Path Traversal\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\n### Extended Description\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n### Alternative Terms\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-22\nChildOf -> CWE-22\nChildOf -> CWE-22\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2019-20916:** Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"\n\n\n\n\n## CWE-306: Missing Authentication for Critical Function\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-287\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-31260:** Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)\n- **CVE-2022-29951:** TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.\n- **CVE-2022-29952:** Condition Monitor firmware uses a protocol that does not require authentication.\n\n",
  "keyphrases": {
    "base_query": "## Vulnerability Description\nWhite Shark System (WSS) 1.3.2 has an unauthorized access vulnerability in default_user_edit.php, remote attackers can exploit this vulnerability to escalate to admin privileges.\n\n### Vulnerability Description Key Phrases\n- **impact:** escalate to admin privileges\n- **attacker:** remote attackers\n- **product:** White Shark System (WSS)\n- **version:** 1.3.2\n- **component:** default_user_edit.php\n\n## CVE Reference Links Content Summary\nThe provided content details multiple vulnerabilities in White Shark System(wss) version 1.3.2. This content provides more details than a typical CVE description.\n\nHere's a breakdown of the vulnerabilities:\n\n**[1] SQL Injection Vulnerability**\n\n*   **Root Cause:** Insufficient input sanitization of the `sort` parameter in `control_task.php`, `control_project.php`, and `default_user.php` files.\n*   **Vulnerability:** SQL injection due to direct insertion of user-controlled data into a database query. The `GetSQLValueString` function does not sanitize the input when the type is defined.\n*   **Impact:** Remote attackers can extract sensitive database information.\n*   **Attack Vector:** Sending a crafted HTTP GET request with a malicious `sort` parameter.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server.\n\n**[2] SQL Injection Vulnerability**\n\n*   **Root Cause:** Insufficient input sanitization of the `csa_to_user` parameter in the `default_task_edituser.php` file.\n*  **Vulnerability:** SQL injection due to direct insertion of user-controlled POST data into a database query.\n*   **Impact:** Remote attackers can extract sensitive database information.\n*   **Attack Vector:** Sending a crafted HTTP POST request with a malicious `csa_to_user` parameter.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server.\n\n**[3] SQL Injection Vulnerability**\n\n*   **Root Cause:** Insufficient input sanitization of the `date` parameter in the `log_edit.php` file.\n*   **Vulnerability:** SQL injection due to direct insertion of user-controlled data into a database query. The data is not processed by the `GetSQLValueString` function.\n*   **Impact:** Remote attackers can extract sensitive database information.\n*   **Attack Vector:** Sending a crafted HTTP GET request with a malicious `date` parameter.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server.\n\n**[4] Unauthorized Access Vulnerability**\n\n*   **Root Cause:**  The `user_edit_password.php` file allows password modification based on the `ID` parameter without verifying the current password of the user being modified.\n*   **Vulnerability:** Ability to change any user's password without proper authorization.\n*   **Impact:** Remote attackers can modify the password of any user, including administrators.\n*   **Attack Vector:** Sending a crafted HTTP POST request with a target `ID` and new password values.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server, and have access to an authenticated session.\n\n**[5] Cross-Site Request Forgery (CSRF) Vulnerability**\n\n*   **Root Cause:** The `user_edit_password.php` file lacks CSRF protection, allowing malicious requests to be triggered by a victim's browser.\n*   **Vulnerability:** Ability to modify a user's password through a CSRF attack.\n*   **Impact:** Remote attackers can force a logged-in user to change their password.\n*   **Attack Vector:** Tricking a logged-in user into visiting a malicious page that sends a crafted POST request to `user_edit_password.php`.\n*    **Attacker Capabilities:** The attacker needs to trick a logged-in user into visiting a malicious page.\n\n**[6] Unauthorized Access Vulnerability**\n\n*   **Root Cause:** The `default_user_edit.php` file uses the `ID` parameter from the POST data to update user information without proper authorization checks.\n*  **Vulnerability:** Ability to modify any user's information, including their rank, leading to privilege escalation.\n*   **Impact:** Remote attackers can modify any user's details and escalate their privileges to admin.\n*   **Attack Vector:** Sending a crafted HTTP POST request with a target `ID` and modified user details.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server, and have access to an authenticated session.\n\n**[7] Sensitive Information Disclosure Vulnerability**\n\n*   **Root Cause:** The `if_get_addbook.php` file lacks proper authentication and authorization checks and the `check_token` function returns the uid of all users when the token is 0.\n*   **Vulnerability:** Unauthorized retrieval of all users' information.\n*  **Impact:** Remote attackers can obtain the usernames and other details of all users on the current site.\n*   **Attack Vector:** Sending a POST request with the token parameter set to 0 to `if_get_addbook.php`.\n*    **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server.\n\n**[8] Unauthorized Access Vulnerability**\n\n*   **Root Cause:** The `default_task_add.php` file allows specifying the task creator using `$_POST[\u2018csa_create_user\u2019]` without proper authorization.\n*   **Vulnerability:** Ability to create tasks as another user, including the administrator.\n*   **Impact:** Remote attackers can forge tasks created by any user including admin.\n*  **Attack Vector:** Sending a POST request with a forged `csa_create_user` value to `default_task_add.php`.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server, and have access to an authenticated session.\n\n**[9] Web Site Physical Path Leakage Vulnerability**\n\n*   **Root Cause:**  Multiple files (`control_file.php`, `control_log.php`, `control_project.php`, `control_task.php`, `tree.php`) display the full server path in error messages.\n*   **Vulnerability:** Disclosure of server's physical path through error messages.\n*   **Impact:**  Remote attackers can gain information about the server's directory structure.\n*   **Attack Vector:** Triggering an error in the mentioned files.\n*   **Attacker Capabilities:** The attacker needs to be able to send HTTP requests to the server and trigger errors.\n\nIn summary, the provided content details numerous vulnerabilities, including SQL injection, unauthorized access, CSRF, and sensitive information disclosure. These issues stem from lack of input validation and authorization checks within the application.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 620 | Unverified Password Change | Base | Allowed | sparse | 0.057 |\n| 2 | 472 | External Control of Assumed-Immutable Web Parameter | Base | Allowed | sparse | 0.055 |\n| 3 | 639 | Authorization Bypass Through User-Controlled Key | Base | Allowed | sparse | 0.048 |\n| 4 | 209 | Generation of Error Message Containing Sensitive Information | Base | Allowed | sparse | 0.048 |\n| 5 | 269 | Improper Privilege Management | Class | Discouraged | sparse | 0.044 |\n| 6 | 425 | Direct Request ('Forced Browsing') | Base | Allowed | dense | 0.524 |\n| 7 | 471 | Modification of Assumed-Immutable Data (MAID) | Base | Allowed | graph | 0.003 |\n| 8 | 285 | Improper Authorization | Class | Discouraged | sparse | 0.043 |\n| 9 | 23 | Relative Path Traversal | Base | Allowed | sparse | 0.043 |\n| 10 | 306 | Missing Authentication for Critical Function | Base | Allowed | sparse | 0.042 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-620: Unverified Password Change\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nWhen setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.\n\n### Extended Description\nThis could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2007-0681:** Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.\n- **CVE-2000-0944:** Web application password change utility doesn't check the original password.\n\n\n\n\n## CWE-472: External Control of Assumed-Immutable Web Parameter\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n### Extended Description\n\n\nIf a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.\n\n\nFor example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.\n\n\n### Alternative Terms\nAssumed-Immutable Parameter Tampering\n\n### Relationships\nChildOf -> CWE-642\nChildOf -> CWE-471\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This is a primary weakness for many other weaknesses and functional consequences, including XSS, SQL injection, path disclosure, and file inclusion.\n\n**[Theoretical]** This is a technology-specific MAID problem.\n\n\n\n### Observed Examples\n- **CVE-2002-0108:** Forum product allows spoofed messages of other users via hidden form fields for name and e-mail address.\n- **CVE-2000-0253:** Shopping cart allows price modification via hidden form field.\n- **CVE-2000-0254:** Shopping cart allows price modification via hidden form field.\n\n\n\n\n## CWE-639: Authorization Bypass Through User-Controlled Key\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.\n\n### Extended Description\n\n\nRetrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.\n\n\nFor example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.\n\n\nOne manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.\n\n\n### Alternative Terms\nInsecure Direct Object Reference / IDOR: The \"Insecure Direct Object Reference\" term, as described in the OWASP Top Ten, is broader than this CWE because it also covers path traversal (CWE-22). Within the context of vulnerability theory, there is a similarity between the OWASP concept and CWE-706: Use of Incorrectly-Resolved Name or Reference.\nBroken Object Level Authorization / BOLA: BOLA is used in the 2019 OWASP API Security Top 10 and is said to be the same as IDOR.\nHorizontal Authorization: \"Horizontal Authorization\" is used to describe situations in which two users have the same privilege level, but must be prevented from accessing each other's resources. This is fairly common when using key-based access to resources in a multi-user context.\n\n### Relationships\nChildOf -> CWE-863\nChildOf -> CWE-863\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2021-36539:** An educational application does not appropriately restrict file IDs to a particular user. The attacker can brute-force guess IDs, indicating IDOR.\n\n\n\n\n## CWE-209: Generation of Error Message Containing Sensitive Information\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product generates an error message that includes sensitive information about its environment, users, or associated data.\n\n### Extended Description\n\n\nThe sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways:\n\n\n  - self-generated: the source code explicitly constructs the error message and delivers it\n\n  - externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer\n\nAn attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of \"..\" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\nChildOf -> CWE-200\nChildOf -> CWE-755\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2008-2049:** POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness.\n- **CVE-2007-5172:** Program reveals password in error message if attacker can trigger certain database errors.\n- **CVE-2008-4638:** Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).\n\n\n\n\n## CWE-269: Improper Privilege Management\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-269 is commonly misused. It can be conflated with \"privilege escalation,\" which is a technical impact that is listed in many low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.\n**Comments:** If an error or mistake allows privilege escalation, then use the CWE ID for that mistake. Avoid using CWE-269 when only phrases such as \"privilege escalation\" or \"gain privileges\" are available, as these indicate technical impact of the vulnerability - not the root cause weakness. If the root cause seems to be directly related to privileges, then examine the children of CWE-269 for additional hints, such as Execution with Unnecessary Privileges (CWE-250) or Incorrect Privilege Assignment (CWE-266).\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n\n\n### Observed Examples\n- **CVE-2001-1555:** Terminal privileges are not reset when a user logs out.\n- **CVE-2001-1514:** Does not properly pass security context to child processes in certain cases, allows privilege escalation.\n- **CVE-2001-0128:** Does not properly compute roles.\n\n\n\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n### Extended Description\nWeb applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.\n\n### Alternative Terms\nforced browsing: The \"forced browsing\" term could be misinterpreted to include weaknesses such as CSRF or XSS, so its use is discouraged.\n\n### Relationships\nChildOf -> CWE-862\nChildOf -> CWE-862\nChildOf -> CWE-288\nChildOf -> CWE-424\nCanPrecede -> CWE-471\nCanPrecede -> CWE-98\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection.\n\n**[Theoretical]** \"Forced browsing\" is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically \"authentication bypass\" or \"path disclosure,\" although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables.\n\n\n\n### Observed Examples\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect.\n- **CVE-2004-2144:** Bypass authentication via direct request.\n\n\n\n\n## CWE-471: Modification of Assumed-Immutable Data (MAID)\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not properly protect an assumed-immutable element from being modified by an attacker.\n\n### Extended Description\nThis occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-664\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** MAID issues can be primary to many other weaknesses, and they are a major factor in languages that provide easy access to internal program constructs, such as PHP's register_globals and similar features. However, MAID issues can also be resultant from weaknesses that modify internal state; for example, a program might validate some data and store it in memory, but a buffer overflow could overwrite that validated data, leading to a change in program logic.\n\n**[Theoretical]** There are many examples where the MUTABILITY property is a major factor in a vulnerability.\n\n\n\n### Observed Examples\n- **CVE-2002-1757:** Relies on $PHP_SELF variable for authentication.\n- **CVE-2005-1905:** Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.\n\n\n\n\n## CWE-285: Improper Authorization\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\n\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.\n**Reasons:**\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-2960:** Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.\n\n\n\n\n## CWE-23: Relative Path Traversal\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\n### Extended Description\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n### Alternative Terms\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-22\nChildOf -> CWE-22\nChildOf -> CWE-22\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2019-20916:** Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"\n\n\n\n\n## CWE-306: Missing Authentication for Critical Function\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-287\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-31260:** Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)\n- **CVE-2022-29951:** TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.\n- **CVE-2022-29952:** Condition Monitor firmware uses a protocol that does not require authentication.\n\n"
  },
  "timestamp": "2025-04-02 04:35:25",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "472",
      "name": "External Control of Assumed-Immutable Web Parameter",
      "type": "Base",
      "score": 0.7975573176719064
    },
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "type": "Base",
      "score": 0.7913193702282367
    },
    {
      "cwe_id": "807",
      "name": "Reliance on Untrusted Inputs in a Security Decision",
      "type": "Base",
      "score": 0.7904645929860983
    },
    {
      "cwe_id": "41",
      "name": "Improper Resolution of Path Equivalence",
      "type": "Base",
      "score": 0.7879444696706288
    },
    {
      "cwe_id": "23",
      "name": "Relative Path Traversal",
      "type": "Base",
      "score": 0.7869385044762907
    },
    {
      "cwe_id": "668",
      "name": "Exposure of Resource to Wrong Sphere",
      "type": "Class",
      "score": 0.7805257256231886
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "type": "Class",
      "score": 0.7790399301924447
    },
    {
      "cwe_id": "425",
      "name": "Direct Request ('Forced Browsing')",
      "type": "Base",
      "score": 0.7754538786609881
    },
    {
      "cwe_id": "303",
      "name": "Incorrect Implementation of Authentication Algorithm",
      "type": "Base",
      "score": 0.7733310252838812
    },
    {
      "cwe_id": "274",
      "name": "Improper Handling of Insufficient Privileges",
      "type": "Base",
      "score": 0.7720122809053815
    }
  ]
}