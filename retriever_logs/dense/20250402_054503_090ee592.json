{
  "retriever": "dense",
  "query": "## Vulnerability Description\nmod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In mod_auth_openidc before version 2.4.9, the AES GCM encryption in mod_auth_openidc uses a **static IV and AAD**. It is important to fix because this creates a static nonce and since aes-gcm is a stream cipher, this can lead to known cryptographic issues, since the same key is being reused. From 2.4.9 onwards this has been patched to use dynamic values through usage of cjose AES encryption routines.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **static IV and AAD**\n- **impact:** known cryptographic issues\n- **product:** mod_auth_openidc\n- **version:** before version 2.4.9\n\n## CVE Reference Links Content Summary\n```\n{\n  \"guidelines\": [\n    \"1. First verify if the content relates to the CVE specified based on the official description\",\n    \"2. If the content does not relate to this CVE, respond with \\\"UNRELATED\\\"\",\n    \"3. If no useful vulnerability information is found, respond with \\\"NOINFO\\\"\",\n    \"4. For relevant content, extract:\",\n    \"   - Root cause of vulnerability\",\n    \"   - Weaknesses/vulnerabilities present\",\n    \"   - Impact of exploitation\",\n    \"   - Attack vectors\",\n    \"   - Required attacker capabilities/position\",\n    \"\",\n    \"Additional instructions:\",\n    \"- Preserve original technical details and descriptions\",\n    \"- Remove unrelated content\",\n    \"- Translate non-English content to English\",\n    \"- Note if the content provides more detail than the official CVE description\"\n  ],\n  \"vulnerability_details\": [\n    {\n      \"source\": \"www.oracle.com_f2d78ea9_20250114_222114.html\",\n      \"module\": \"Oracle Secure Backup\",\n       \"products\": [\n        \"Oracle Secure Backup\"\n       ],\n      \"vulnerability\": \"The provided document lists CVE-2021-32791 as one of the CVEs addressed in the Oracle Secure Backup component. However, the document does not provide any specific details regarding this vulnerability.\"\n    },\n    {\n     \"source\": \"lists.fedoraproject.org_359d0c15_20250114_222111.html\",\n      \"module\": \"mod_auth_openidc\",\n      \"products\": [\n       \"Fedora 33\"\n       ],\n      \"vulnerability\": \"This document indicates that CVE-2021-32791 was resolved in the mod_auth_openidc package for Fedora 33. It provides a reference to a bugzilla entry with more details.\",\n      \"root_cause\": \"hardcoded static IV and AAD with a reused key in AES GCM encryption\"\n    },\n   {\n      \"source\": \"lists.fedoraproject.org_56c759d0_20250114_222110.html\",\n      \"module\": \"mod_auth_openidc\",\n        \"products\": [\n       \"Fedora 34\"\n        ],\n      \"vulnerability\": \"This document indicates that CVE-2021-32791 was resolved in the mod_auth_openidc package for Fedora 34. It provides a reference to a bugzilla entry with more details.\",\n      \"root_cause\": \"hardcoded static IV and AAD with a reused key in AES GCM encryption\"\n    },\n    {\n      \"source\": \"github.com_5d56e922_20250114_222108.html\",\n      \"module\": \"mod_auth_openidc\",\n      \"products\": [\n        \"mod_auth_openidc\"\n      ],\n      \"vulnerability\": \"This document provides release notes for version 2.4.9 of mod_auth_openidc, which includes a fix for CVE-2021-32791.\",\n      \"root_cause\": \"AES GCM encryption used static AAD/IV\",\n      \"weaknesses\": [\n        \"Use of static initialization vector (IV) and Additional Authenticated Data (AAD) in AES GCM encryption\"\n        ],\n      \"impact\": \"Reusing the same key with a static nonce, can lead to known cryptographic issues, due to the nature of stream ciphers.\",\n        \"attack_vectors\": [\n        \"Exposure of the encrypted data, potentially leaking session information\"\n      ],\n      \"attacker_capabilities\": \"An attacker with knowledge or ability to observe/obtain the static IV and AAD, and ability to intercept/obtain the encrypted data can potentially decrypt sensitive data.\"\n    },\n   {\n      \"source\": \"github.com_0eb83aa8_20250114_222106.html\",\n      \"module\": \"mod_auth_openidc\",\n      \"products\": [\n        \"mod_auth_openidc\"\n        ],\n       \"vulnerability\": \"This document shows the commit that addressed the issue, describing that the fix involved using encrypted JWTs for storing encrypted cache contents, and avoiding using a static AAD/IV.\",\n        \"root_cause\": \"Using static AAD/IV\",\n       \"weaknesses\": [\n          \"Use of static initialization vector (IV) and Additional Authenticated Data (AAD) in AES GCM encryption.\"\n        ]\n    },\n   {\n      \"source\": \"lists.debian.org_be5bfa88_20250114_222109.html\",\n      \"module\": \"libapache2-mod-auth-openidc\",\n      \"products\": [\n        \"Debian 10 buster\"\n      ],\n      \"vulnerability\": \"This document is a security advisory for libapache2-mod-auth-openidc in Debian 10 buster that mentions CVE-2021-32791, describing it as \\\"AES GCM encryption in used static IV and AAD.\\\"\",\n      \"root_cause\": \"AES GCM encryption used static IV and AAD\"\n    },\n    {\n      \"source\": \"github.com_29a77c11_20250114_222109.html\",\n      \"module\": \"mod_auth_openidc\",\n      \"products\": [\n          \"mod_auth_openidc\"\n        ],\n       \"vulnerability\": \"This document is a GitHub Security Advisory for CVE-2021-32791, which was resolved in mod_auth_openidc version 2.4.9 and later.\",\n      \"root_cause\": \"The AES GCM encryption in mod_auth_openidc uses a static IV and AAD.\",\n       \"weaknesses\": [\n           \"Use of static initialization vector (IV) and Additional Authenticated Data (AAD) in AES GCM encryption.\"\n          ],\n      \"impact\": \"This creates a static nonce and since aes-gcm is a stream cipher, this can lead to known cryptographic issues, since the same key is being reused.\",\n        \"attack_vectors\": [\n           \"Exposure of encrypted data, potentially leaking session information\"\n         ],\n      \"attacker_capabilities\": \"An attacker would need to have access to the static IV and AAD, and also be able to intercept/obtain the encrypted data to be able to decrypt it\"\n    }\n  ]\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 1204 | Generation of Weak Initialization Vector (IV) | Base | Allowed | sparse | 1.067 |\n| 2 | 321 | Use of Hard-coded Cryptographic Key | Variant | Allowed | sparse | 0.599 |\n| 3 | 327 | Use of a Broken or Risky Cryptographic Algorithm | Class | Allowed-with-Review | sparse | 0.590 |\n| 4 | 134 | Use of Externally-Controlled Format String | Base | Allowed | sparse | 0.551 |\n| 5 | 319 | Cleartext Transmission of Sensitive Information | Base | Allowed | sparse | 0.538 |\n| 6 | 304 | Missing Critical Step in Authentication | Base | Allowed | dense | 0.445 |\n| 7 | 259 | Use of Hard-coded Password | Variant | Allowed | graph | 0.002 |\n| 8 | 329 | Generation of Predictable IV with CBC Mode | Variant | Allowed | sparse | 0.502 |\n| 9 | 287 | Improper Authentication | Class | Discouraged | sparse | 0.484 |\n| 10 | 1390 | Weak Authentication | Class | Allowed-with-Review | sparse | 0.484 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-1204: Generation of Weak Initialization Vector (IV)\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a cryptographic primitive that uses an Initialization\n\t\t\tVector (IV), but the product does not generate IVs that are\n\t\t\tsufficiently unpredictable or unique according to the expected\n\t\t\tcryptographic requirements for that primitive.\n\t\t\t\n\n### Extended Description\nBy design, some cryptographic primitives (such as block ciphers) require that IVs must have certain properties for the uniqueness and/or unpredictability of an IV. Primitives may vary in how important these properties are. If these properties are not maintained, e.g. by a bug in the code, then the cryptography may be weakened or broken by attacking the IVs themselves.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-330\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, \"randomness\" is used heavily. However, within cryptography, \"entropy\" is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.\n\n\n\n### Observed Examples\n- **CVE-2020-1472:** ZeroLogon vulnerability - use of a static IV of all zeroes in AES-CFB8 mode\n- **CVE-2011-3389:** BEAST attack in SSL 3.0 / TLS 1.0. In CBC mode, chained initialization vectors are non-random, allowing decryption of HTTPS traffic using a chosen plaintext attack.\n- **CVE-2001-0161:** wireless router does not use 6 of the 24 bits for WEP encryption, making it easier for attackers to decrypt traffic\n\n\n\n\n## CWE-321: Use of Hard-coded Cryptographic Key\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-798\nChildOf -> CWE-798\nChildOf -> CWE-798\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** The main difference between the use of hard-coded passwords and the use of hard-coded cryptographic keys is the false sense of security that the former conveys. Many people believe that simply hashing a hard-coded password before storage will protect the information from malicious users. However, many hashes are reversible (or at least vulnerable to brute force attacks) -- and further, many authentication protocols simply request the hash itself, making it no better than a password.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-29960:** Engineering Workstation uses hard-coded cryptographic keys that could allow for unathorized filesystem access and privilege escalation\n- **CVE-2022-30271:** Remote Terminal Unit (RTU) uses a hard-coded SSH private key that is likely to be used by default.\n- **CVE-2020-10884:** WiFi router service has a hard-coded encryption key, allowing root access\n\n\n\n\n## CWE-327: Use of a Broken or Risky Cryptographic Algorithm\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product uses a broken or risky cryptographic algorithm or protocol.\n\n### Extended Description\n\n\nCryptographic algorithms are the methods by which data is scrambled to prevent observation or influence by unauthorized actors. Insecure cryptography can be exploited to expose sensitive information, modify data in unexpected ways, spoof identities of other users or devices, or other impacts.\n\n\nIt is very difficult to produce a secure algorithm, and even high-profile algorithms by accomplished cryptographic experts have been broken. Well-known techniques exist to break or weaken various kinds of cryptography. Accordingly, there are a small number of well-understood and heavily studied algorithms that should be used by most products. Using a non-standard or known-insecure algorithm is dangerous because a determined adversary may be able to break the algorithm and compromise whatever data has been protected.\n\n\nSince the state of cryptography advances so rapidly, it is common for an algorithm to be considered \"unsafe\" even if it was once thought to be strong. This can happen when new attacks are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought.\n\n\nFor a number of reasons, this weakness is even more challenging to manage with hardware deployment of cryptographic algorithms as opposed to software implementation. First, if a flaw is discovered with hardware-implemented cryptography, the flaw cannot be fixed in most cases without a recall of the product, because hardware is not easily replaceable like software. Second, because the hardware product is expected to work for years, the adversary's computing power will only increase over time.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\nPeerOf -> CWE-311\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** Since CWE 4.4, various cryptography-related entries, including CWE-327 and CWE-1240, have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-30273:** SCADA-based protocol supports a legacy encryption mode that uses Tiny Encryption Algorithm (TEA) in ECB mode, which leaks patterns in messages and cannot protect integrity\n- **CVE-2022-30320:** Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.\n- **CVE-2008-3775:** Product uses \"ROT-25\" to obfuscate the password in the registry.\n\n\n\n\n## CWE-134: Use of Externally-Controlled Format String\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses a function that accepts a format string as an argument, but the format string originates from an external source.\n\n### Extended Description\n\n\nWhen an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems.\n\n\nIt should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-668\nChildOf -> CWE-668\nCanPrecede -> CWE-123\nChildOf -> CWE-20\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Applicable Platform]** \n\nThis weakness is possible in any programming language that support format strings.\n\n\n**[Other]** \n\nWhile Format String vulnerabilities typically fall under the Buffer Overflow category, technically they are not overflowed buffers. The Format String vulnerability is fairly new (circa 1999) and stems from the fact that there is no realistic way for a function that takes a variable number of arguments to determine just how many arguments were passed in. The most common functions that take a variable number of arguments, including C-runtime functions, are the printf() family of calls. The Format String problem appears in a number of ways. A *printf() call without a format specifier is dangerous and can be exploited. For example, printf(input); is exploitable, while printf(y, input); is not exploitable in that context. The result of the first call, used incorrectly, allows for an attacker to be able to peek at stack memory since the input string will be used as the format specifier. The attacker can stuff the input string with format specifiers and begin reading stack values, since the remaining parameters will be pulled from the stack. Worst case, this improper use may give away enough control to allow an arbitrary value (or values in the case of an exploit program) to be written into the memory of the running program.\n\n\nFrequently targeted entities are file names, process names, identifiers.\n\n\nFormat string problems are a classic C/C++ issue that are now rare due to the ease of discovery. One main reason format string vulnerabilities can be exploited is due to the %n operator. The %n operator will write the number of characters, which have been printed by the format string therefore far, to the memory pointed to by its argument. Through skilled creation of a format string, a malicious user may use values on the stack to create a write-what-where condition. Once this is achieved, they can execute arbitrary code. Other operators can be used as well; for example, a %9999s operator could also trigger a buffer overflow, or when used in file-formatting functions like fprintf, it can generate a much larger output than intended.\n\n\n**[Research Gap]** Format string issues are under-studied for languages other than C. Memory or disk consumption, control flow or variable alteration, and data corruption may result from format string exploitation in applications written in other languages such as Perl, PHP, Python, etc.\n\n\n\n### Observed Examples\n- **CVE-2002-1825:** format string in Perl program\n- **CVE-2001-0717:** format string in bad call to syslog function\n- **CVE-2002-0573:** format string in bad call to syslog function\n\n\n\n\n## CWE-319: Cleartext Transmission of Sensitive Information\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\n### Extended Description\n\n\nMany communication channels can be \"sniffed\" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data.\n\n\nApplicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries.\n\n\nWhen full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to \"sniff\" the cleartext from the recorded communications in the dump itself. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. \n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-311\nChildOf -> CWE-311\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-29519:** Programmable Logic Controller (PLC) sends sensitive information in plaintext, including passwords and session tokens.\n- **CVE-2022-30312:** Building Controller uses a protocol that transmits authentication credentials in plaintext.\n- **CVE-2022-31204:** Programmable Logic Controller (PLC) sends password in plaintext.\n\n\n\n\n## CWE-304: Missing Critical Step in Authentication\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product implements an authentication technique, but it skips a step that weakens the technique.\n\n### Extended Description\nAuthentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-303\nChildOf -> CWE-573\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2004-2163:** Shared secret not verified in a RADIUS response packet, allowing authentication bypass by spoofing server replies.\n- **CVE-2005-3327:** Chain: Authentication bypass by skipping the first startup step as required by the protocol.\n\n\n\n\n## CWE-259: Use of Hard-coded Password\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.\n\n### Extended Description\n\n\nA hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:\n\n```\n\t\tInbound: the product contains an authentication mechanism that checks for a hard-coded password.\n\t\tOutbound: the product connects to another system or component, and it contains hard-coded password for connecting to that component.\n```\nIn the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.\n\nThe Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-798\nChildOf -> CWE-798\nChildOf -> CWE-798\nPeerOf -> CWE-321\nPeerOf -> CWE-257\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry could be split into multiple variants: an inbound variant (as seen in the second demonstrative example) and an outbound variant (as seen in the first demonstrative example). These variants are likely to have different consequences, detectability, etc. More importantly, from a vulnerability theory perspective, they could be characterized as different behaviors.\n\n\n\n### Observed Examples\n- **CVE-2022-29964:** Distributed Control System (DCS) has hard-coded passwords for local shell access\n- **CVE-2021-37555:** Telnet service for IoT feeder for dogs and cats has hard-coded password [REF-1288]\n- **CVE-2021-35033:** Firmware for a WiFi router uses a hard-coded password for a BusyBox shell, allowing bypass of authentication through the UART port\n\n\n\n\n## CWE-329: Generation of Predictable IV with CBC Mode\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.\n\n### Extended Description\n\n\nCBC mode eliminates a weakness of Electronic Code Book (ECB) mode by allowing identical plaintext blocks to be encrypted to different ciphertext blocks. This is possible by the XOR-ing of an IV with the initial plaintext block so that every plaintext block in the chain is XOR'd with a different value before encryption. If IVs are reused, then identical plaintexts would be encrypted to identical ciphertexts. However, even if IVs are not identical but are predictable, then they still break the security of CBC mode against Chosen Plaintext Attacks (CPA).\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1204\nChildOf -> CWE-573\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, \"randomness\" is used heavily. However, within cryptography, \"entropy\" is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.\n\n\n\n### Observed Examples\n- **CVE-2020-5408:** encryption functionality in an authentication framework uses a fixed null IV with CBC mode, allowing attackers to decrypt traffic in applications that use this functionality\n- **CVE-2017-17704:** messages for a door-unlocking product use a fixed IV in CBC mode, which is the same after each restart\n- **CVE-2017-11133:** application uses AES in CBC mode, but the pseudo-random secret and IV are generated using math.random, which is not cryptographically strong.\n\n\n\n\n## CWE-287: Improper Authentication\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nWhen an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nauthentification: An alternate term is \"authentification\", which appears to be most commonly used by people from non-English-speaking countries.\nAuthN: \"AuthN\" is typically used as an abbreviation of \"authentication\" within the web application security community. It is also distinct from \"AuthZ,\" which is an abbreviation of \"authorization.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\nAuthC: \"AuthC\" is used as an abbreviation of \"authentication,\" but it appears to used less frequently than \"AuthN.\"\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry might be misused when lower-level CWE entries are likely to be applicable. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Consider children or descendants, beginning with CWE-1390: Weak Authentication or CWE-306: Missing Authentication for Critical Function.\n**Reasons:**\n- Frequent Misuse\n**Suggested Alternatives:**\n- CWE-1390: Weak Authentication\n- CWE-306: Missing Authentication for Critical Function\n\n\n### Additional Notes\n**[Relationship]** This can be resultant from SQL injection vulnerabilities and other issues.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-35248:** Chat application skips validation when Central Authentication Service (CAS) is enabled, effectively removing the second factor from two-factor authentication\n- **CVE-2022-36436:** Python-based authentication proxy does not enforce password authentication during the initial handshake, allowing the client to bypass authentication by specifying a 'None' authentication type.\n- **CVE-2022-30034:** Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).\n\n\n\n\n## CWE-1390: Weak Authentication\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.\n\n### Extended Description\n\n\nAttackers may be able to bypass weak authentication faster and/or with less effort than expected.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-30034:** Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).\n- **CVE-2022-35248:** Chat application skips validation when Central Authentication Service (CAS) is enabled, effectively removing the second factor from two-factor authentication\n- **CVE-2021-3116:** Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390)\n\n",
  "keyphrases": {},
  "timestamp": "2025-04-02 05:45:03",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "1391",
      "name": "Use of Weak Credentials",
      "type": "Class",
      "score": 0.7779458517844342
    },
    {
      "cwe_id": "1240",
      "name": "Use of a Cryptographic Primitive with a Risky Implementation",
      "type": "Base",
      "score": 0.7635714420686903
    },
    {
      "cwe_id": "1204",
      "name": "Generation of Weak Initialization Vector (IV)",
      "type": "Base",
      "score": 0.7617599754090731
    },
    {
      "cwe_id": "303",
      "name": "Incorrect Implementation of Authentication Algorithm",
      "type": "Base",
      "score": 0.760528188169682
    },
    {
      "cwe_id": "1390",
      "name": "Weak Authentication",
      "type": "Class",
      "score": 0.7577515996993913
    },
    {
      "cwe_id": "330",
      "name": "Use of Insufficiently Random Values",
      "type": "Class",
      "score": 0.745860799060484
    },
    {
      "cwe_id": "307",
      "name": "Improper Restriction of Excessive Authentication Attempts",
      "type": "Base",
      "score": 0.7447078001861015
    },
    {
      "cwe_id": "807",
      "name": "Reliance on Untrusted Inputs in a Security Decision",
      "type": "Base",
      "score": 0.7444531651730425
    },
    {
      "cwe_id": "304",
      "name": "Missing Critical Step in Authentication",
      "type": "Base",
      "score": 0.7437237810076456
    },
    {
      "cwe_id": "331",
      "name": "Insufficient Entropy",
      "type": "Base",
      "score": 0.7423623540009598
    }
  ]
}