{
  "retriever": "graph",
  "query": "## Vulnerability Description\nIn the standard library in Rust before 1.49.0, Stringretain() function has a **panic safety problem**. It allows creation of a non-UTF-8 Rust string when the provided closure panics. This bug could result in a memory safety violation when other string APIs assume that UTF-8 encoding is used on the same string.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **panic safety problem**\n- **impact:** memory safety violation\n- **vector:** closure panic\n- **product:** Rust standard library\n- **version:** before 1.49.0\n- **component:** Stringretain() function\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause:**\n\nThe vulnerability stems from the `String::retain` function in the Rust standard library. This function allows a user-provided closure to determine which characters to keep in a String. While `String::retain` is executing, it may temporarily leave the `String` in an inconsistent state containing invalid UTF-8. The function is supposed to restore the UTF-8 invariant before returning. However, if the user-provided closure panics, and that panic is caught by the caller, the function's cleanup logic is skipped, leading to a `String` containing invalid UTF-8.\n\n**Weaknesses/Vulnerabilities:**\n\n-   **Invariant Violation:** The core issue is that `String::retain` temporarily breaks the invariant that `String` must contain valid UTF-8. Normally this temporary violation is not observable, however, a panic in a closure provided by a user can be caught, leading to the user being able to see this intermediate state where UTF-8 validity is not guaranteed.\n-   **Unsoundness:** This allows the creation of invalid `String` values which is considered a soundness issue in Rust.\n\n**Impact of Exploitation:**\n\n-   **Undefined Behavior:**  By creating a `String` with invalid UTF-8, users can bypass Rust's safety guarantees and potentially lead to undefined behavior in other parts of the code that assume the `String` is always UTF-8.\n-   **Library Invariant Violation:** This allows the user to violate the core library invariant of the `String` data type.\n\n**Attack Vectors:**\n\n-   **Closure Panic:** The vulnerability can be triggered by providing a closure to `String::retain` that panics at a specific time, designed to be caught.\n\n**Required Attacker Capabilities/Position:**\n\n-   The attacker needs to be able to call the `String::retain` function.\n-   The attacker needs to be able to provide a closure that panics, and they must also handle this panic to observe the invalid `String`.\n\n**Additional details:**\n\nThe provided content also highlights the fix for this vulnerability:\n-   The initial fix set the length of the underlying vector in `String` to `0` before iterating through the string to avoid any leaks of the intermediate invalid UTF-8 data, however, this led to another problem which has since been fixed in commit `803c422` and PR `82554`.\n-   The final fix used a `DropGuard` to ensure that the original length was restored even if the closure panics which guarantees that the `String` always has valid UTF-8.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 787 | Out-of-bounds Write | Base | Allowed | sparse | 0.315 |\n| 2 | 617 | Reachable Assertion | Base | Allowed | sparse | 0.295 |\n| 3 | 119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | Class | Discouraged | sparse | 0.287 |\n| 4 | 908 | Use of Uninitialized Resource | Base | Allowed | sparse | 0.284 |\n| 5 | 1286 | Improper Validation of Syntactic Correctness of Input | Base | Allowed | sparse | 0.268 |\n| 6 | 1325 | Improperly Controlled Sequential Memory Allocation | Base | Allowed | dense | 0.396 |\n| 7 | 823 | Use of Out-of-range Pointer Offset | Base | Allowed | graph | 0.003 |\n| 8 | 345 | Insufficient Verification of Data Authenticity | Class | Discouraged | sparse | 0.259 |\n| 9 | 125 | Out-of-bounds Read | Base | Allowed | sparse | 0.258 |\n| 10 | 755 | Improper Handling of Exceptional Conditions | Class | Discouraged | sparse | 0.257 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-787: Out-of-bounds Write\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product writes data past the end, or before the beginning, of the intended buffer.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nMemory Corruption: Often used to describe the consequences of writing to memory outside the bounds of a buffer, or to memory that is otherwise invalid.\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2023-1017:** The reference implementation code for a Trusted Platform Module does not implement length checks on data, allowing for an attacker to write 2 bytes past the end of a buffer.\n- **CVE-2021-21220:** Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.\n- **CVE-2021-28664:** GPU kernel driver allows memory corruption because a user can obtain read/write access to read-only pages, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-617: Reachable Assertion\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\n\n### Extended Description\n\n\nWhile assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service.\n\n\nFor example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.\n\n\n### Alternative Terms\nassertion failure\n\n### Relationships\nChildOf -> CWE-670\nChildOf -> CWE-670\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2023-49286:** Chain: function in web caching proxy does not correctly check a return value (CWE-253) leading to a reachable assertion (CWE-617)\n- **CVE-2006-6767:** FTP server allows remote attackers to cause a denial of service (daemon abort) via crafted commands which trigger an assertion failure.\n- **CVE-2006-6811:** Chat client allows remote attackers to cause a denial of service (crash) via a long message string when connecting to a server, which causes an assertion failure.\n\n\n\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction:** Class\n**Status:** Stable\n\n### Description\nThe product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nBuffer Overflow: This term has many different meanings to different audiences. From a CWE mapping perspective, this term should be avoided where possible. Some researchers, developers, and tools intend for it to mean \"write past the end of a buffer,\" whereas others use the same term to mean \"any read or write outside the boundaries of a buffer, whether before the beginning of the buffer or after the end of the buffer.\" Others could mean \"any action after the end of a buffer, whether it is a read or write.\" Since the term is commonly used for exploitation and for vulnerabilities, it further confuses things.\nbuffer overrun: Some prominent vendors and researchers use the term \"buffer overrun,\" but most people use \"buffer overflow.\" See the alternate term for \"buffer overflow\" for context.\nmemory safety: Generally used for techniques that avoid weaknesses related to memory access, such as those identified by CWE-119 and its descendants. However, the term is not formal, and there is likely disagreement between practitioners as to which weaknesses are implicitly covered by the \"memory safety\" term.\n\n### Relationships\nChildOf -> CWE-118\nChildOf -> CWE-20\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n**Comments:** Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Applicable Platform]** \n\nIt is possible in any programming languages without memory management support to attempt an operation outside of the bounds of a memory buffer, but the consequences will vary widely depending on the language, platform, and chip architecture.\n\n\n\n\n### Observed Examples\n- **CVE-2021-22991:** Incorrect URI normalization in application traffic product leads to buffer overflow, as exploited in the wild per CISA KEV.\n- **CVE-2020-29557:** Buffer overflow in Wi-Fi router web interface, as exploited in the wild per CISA KEV.\n- **CVE-2009-2550:** Classic stack-based buffer overflow in media player using a long entry in a playlist\n\n\n\n\n## CWE-908: Use of Uninitialized Resource\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses or accesses a resource that has not been initialized.\n\n### Extended Description\nWhen a resource has not been properly initialized, the product may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the product.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-665\nChildOf -> CWE-665\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2019-9805:** Chain: Creation of the packet client occurs before initialization is complete (CWE-696) resulting in a read from uninitialized memory (CWE-908), causing memory corruption.\n- **CVE-2008-4197:** Use of uninitialized memory may allow code execution.\n- **CVE-2008-2934:** Free of an uninitialized pointer leads to crash and possible code execution.\n\n\n\n\n## CWE-1286: Improper Validation of Syntactic Correctness of Input\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n### Extended Description\n\n\nOften, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages. When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-20\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry is still under development and will continue to see updates and content improvements.\n\n\n\n### Observed Examples\n- **CVE-2016-4029:** Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).\n- **CVE-2007-5893:** HTTP request with missing protocol version number leads to crash\n\n\n\n\n## CWE-1325: Improperly Controlled Sequential Memory Allocation\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.\n\n### Extended Description\n\n\nWhile the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service.\n\n\n### Alternative Terms\nStack Exhaustion: When a weakness allocates excessive memory on the stack, it is often described as \"stack exhaustion,\" which is a technical impact of the weakness. This technical impact is often encountered as a consequence of CWE-789 and/or CWE-1325.\n\n### Relationships\nChildOf -> CWE-770\nPeerOf -> CWE-789\nCanPrecede -> CWE-476\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2020-36049:** JavaScript-based packet decoder uses concatenation of many small strings, causing out-of-memory (OOM) condition\n- **CVE-2019-20176:** Product allocates a new buffer on the stack for each file in a directory, allowing stack exhaustion\n- **CVE-2013-1591:** Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.\n\n\n\n\n## CWE-823: Use of Out-of-range Pointer Offset\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.\n\n### Extended Description\n\n\nWhile a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array.\n\n\nPrograms may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error.\n\n\nIf an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the product. As a result, the attack might change the state of the product as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution.\n\n\n### Alternative Terms\nUntrusted pointer offset: This term is narrower than the concept of \"out-of-range\" offset, since the offset might be the result of a calculation or other error that does not depend on any externally-supplied values.\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\nCanPrecede -> CWE-125\nCanPrecede -> CWE-787\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** There are close relationships between incorrect pointer dereferences and other weaknesses related to buffer operations. There may not be sufficient community agreement regarding these relationships. Further study is needed to determine when these relationships are chains, composites, perspective/layering, or other types of relationships. As of September 2010, most of the relationships are being captured as chains.\n\n**[Terminology]** Many weaknesses related to pointer dereferences fall under the general term of \"memory corruption\" or \"memory safety.\" As of September 2010, there is no commonly-used terminology that covers the lower-level variants.\n\n\n\n### Observed Examples\n- **CVE-2010-2160:** Invalid offset in undocumented opcode leads to memory corruption.\n- **CVE-2010-1281:** Multimedia player uses untrusted value from a file when using file-pointer calculations.\n- **CVE-2009-3129:** Spreadsheet program processes a record with an invalid size field, which is later used as an offset.\n\n\n\n\n## CWE-345: Insufficient Verification of Data Authenticity\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** \"origin validation\" could fall under this.\n\n**[Maintenance]** The specific ways in which the origin is not properly identified should be laid out as separate weaknesses. In some sense, this is more like a category.\n\n\n\n### Observed Examples\n- **CVE-2022-30260:** Distributed Control System (DCS) does not sign firmware images and only relies on insecure checksums for integrity checks\n- **CVE-2022-30267:** Distributed Control System (DCS) does not sign firmware images and only relies on insecure checksums for integrity checks\n- **CVE-2022-30272:** Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums\n\n\n\n\n## CWE-125: Out-of-bounds Read\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nOOB read: Shorthand for \"Out of bounds\" read\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2023-1018:** The reference implementation code for a Trusted Platform Module does not implement length checks on data, allowing for an attacker to read 2 bytes past the end of a buffer.\n- **CVE-2020-11899:** Out-of-bounds read in IP stack used in embedded systems, as exploited in the wild per CISA KEV.\n- **CVE-2014-0160:** Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.\n\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not handle or incorrectly handles an exceptional condition.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-703\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2023-41151:** SDK for OPC Unified Architecture (OPC UA) server has uncaught exception when a socket is blocked for writing but the server tries to send an error\n- **[REF-1374]:** Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)\n- **CVE-2021-3011:** virtual interrupt controller in a virtualization product allows crash of host by writing a certain invalid value to a register, which triggers a fatal error instead of returning an error code\n\n Consider specifically these CWEs: CWE-754 CWE-667 CWE-823 CWE-404 CWE-703 CWE-125 CWE-190 CWE-226 CWE-119 CWE-1284",
  "keyphrases": {
    "original_query": "## Vulnerability Description\nIn the standard library in Rust before 1.49.0, Stringretain() function has a **panic safety problem**. It allows creation of a non-UTF-8 Rust string when the provided closure panics. This bug could result in a memory safety violation when other string APIs assume that UTF-8 encoding is used on the same string.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **panic safety problem**\n- **impact:** memory safety violation\n- **vector:** closure panic\n- **product:** Rust standard library\n- **version:** before 1.49.0\n- **component:** Stringretain() function\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause:**\n\nThe vulnerability stems from the `String::retain` function in the Rust standard library. This function allows a user-provided closure to determine which characters to keep in a String. While `String::retain` is executing, it may temporarily leave the `String` in an inconsistent state containing invalid UTF-8. The function is supposed to restore the UTF-8 invariant before returning. However, if the user-provided closure panics, and that panic is caught by the caller, the function's cleanup logic is skipped, leading to a `String` containing invalid UTF-8.\n\n**Weaknesses/Vulnerabilities:**\n\n-   **Invariant Violation:** The core issue is that `String::retain` temporarily breaks the invariant that `String` must contain valid UTF-8. Normally this temporary violation is not observable, however, a panic in a closure provided by a user can be caught, leading to the user being able to see this intermediate state where UTF-8 validity is not guaranteed.\n-   **Unsoundness:** This allows the creation of invalid `String` values which is considered a soundness issue in Rust.\n\n**Impact of Exploitation:**\n\n-   **Undefined Behavior:**  By creating a `String` with invalid UTF-8, users can bypass Rust's safety guarantees and potentially lead to undefined behavior in other parts of the code that assume the `String` is always UTF-8.\n-   **Library Invariant Violation:** This allows the user to violate the core library invariant of the `String` data type.\n\n**Attack Vectors:**\n\n-   **Closure Panic:** The vulnerability can be triggered by providing a closure to `String::retain` that panics at a specific time, designed to be caught.\n\n**Required Attacker Capabilities/Position:**\n\n-   The attacker needs to be able to call the `String::retain` function.\n-   The attacker needs to be able to provide a closure that panics, and they must also handle this panic to observe the invalid `String`.\n\n**Additional details:**\n\nThe provided content also highlights the fix for this vulnerability:\n-   The initial fix set the length of the underlying vector in `String` to `0` before iterating through the string to avoid any leaks of the intermediate invalid UTF-8 data, however, this led to another problem which has since been fixed in commit `803c422` and PR `82554`.\n-   The final fix used a `DropGuard` to ensure that the original length was restored even if the closure panics which guarantees that the `String` always has valid UTF-8.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 787 | Out-of-bounds Write | Base | Allowed | sparse | 0.315 |\n| 2 | 617 | Reachable Assertion | Base | Allowed | sparse | 0.295 |\n| 3 | 119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | Class | Discouraged | sparse | 0.287 |\n| 4 | 908 | Use of Uninitialized Resource | Base | Allowed | sparse | 0.284 |\n| 5 | 1286 | Improper Validation of Syntactic Correctness of Input | Base | Allowed | sparse | 0.268 |\n| 6 | 1325 | Improperly Controlled Sequential Memory Allocation | Base | Allowed | dense | 0.396 |\n| 7 | 823 | Use of Out-of-range Pointer Offset | Base | Allowed | graph | 0.003 |\n| 8 | 345 | Insufficient Verification of Data Authenticity | Class | Discouraged | sparse | 0.259 |\n| 9 | 125 | Out-of-bounds Read | Base | Allowed | sparse | 0.258 |\n| 10 | 755 | Improper Handling of Exceptional Conditions | Class | Discouraged | sparse | 0.257 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-787: Out-of-bounds Write\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product writes data past the end, or before the beginning, of the intended buffer.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nMemory Corruption: Often used to describe the consequences of writing to memory outside the bounds of a buffer, or to memory that is otherwise invalid.\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2023-1017:** The reference implementation code for a Trusted Platform Module does not implement length checks on data, allowing for an attacker to write 2 bytes past the end of a buffer.\n- **CVE-2021-21220:** Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.\n- **CVE-2021-28664:** GPU kernel driver allows memory corruption because a user can obtain read/write access to read-only pages, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-617: Reachable Assertion\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\n\n### Extended Description\n\n\nWhile assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service.\n\n\nFor example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.\n\n\n### Alternative Terms\nassertion failure\n\n### Relationships\nChildOf -> CWE-670\nChildOf -> CWE-670\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2023-49286:** Chain: function in web caching proxy does not correctly check a return value (CWE-253) leading to a reachable assertion (CWE-617)\n- **CVE-2006-6767:** FTP server allows remote attackers to cause a denial of service (daemon abort) via crafted commands which trigger an assertion failure.\n- **CVE-2006-6811:** Chat client allows remote attackers to cause a denial of service (crash) via a long message string when connecting to a server, which causes an assertion failure.\n\n\n\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction:** Class\n**Status:** Stable\n\n### Description\nThe product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nBuffer Overflow: This term has many different meanings to different audiences. From a CWE mapping perspective, this term should be avoided where possible. Some researchers, developers, and tools intend for it to mean \"write past the end of a buffer,\" whereas others use the same term to mean \"any read or write outside the boundaries of a buffer, whether before the beginning of the buffer or after the end of the buffer.\" Others could mean \"any action after the end of a buffer, whether it is a read or write.\" Since the term is commonly used for exploitation and for vulnerabilities, it further confuses things.\nbuffer overrun: Some prominent vendors and researchers use the term \"buffer overrun,\" but most people use \"buffer overflow.\" See the alternate term for \"buffer overflow\" for context.\nmemory safety: Generally used for techniques that avoid weaknesses related to memory access, such as those identified by CWE-119 and its descendants. However, the term is not formal, and there is likely disagreement between practitioners as to which weaknesses are implicitly covered by the \"memory safety\" term.\n\n### Relationships\nChildOf -> CWE-118\nChildOf -> CWE-20\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n**Comments:** Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Applicable Platform]** \n\nIt is possible in any programming languages without memory management support to attempt an operation outside of the bounds of a memory buffer, but the consequences will vary widely depending on the language, platform, and chip architecture.\n\n\n\n\n### Observed Examples\n- **CVE-2021-22991:** Incorrect URI normalization in application traffic product leads to buffer overflow, as exploited in the wild per CISA KEV.\n- **CVE-2020-29557:** Buffer overflow in Wi-Fi router web interface, as exploited in the wild per CISA KEV.\n- **CVE-2009-2550:** Classic stack-based buffer overflow in media player using a long entry in a playlist\n\n\n\n\n## CWE-908: Use of Uninitialized Resource\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses or accesses a resource that has not been initialized.\n\n### Extended Description\nWhen a resource has not been properly initialized, the product may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the product.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-665\nChildOf -> CWE-665\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2019-9805:** Chain: Creation of the packet client occurs before initialization is complete (CWE-696) resulting in a read from uninitialized memory (CWE-908), causing memory corruption.\n- **CVE-2008-4197:** Use of uninitialized memory may allow code execution.\n- **CVE-2008-2934:** Free of an uninitialized pointer leads to crash and possible code execution.\n\n\n\n\n## CWE-1286: Improper Validation of Syntactic Correctness of Input\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n### Extended Description\n\n\nOften, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages. When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-20\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry is still under development and will continue to see updates and content improvements.\n\n\n\n### Observed Examples\n- **CVE-2016-4029:** Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).\n- **CVE-2007-5893:** HTTP request with missing protocol version number leads to crash\n\n\n\n\n## CWE-1325: Improperly Controlled Sequential Memory Allocation\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.\n\n### Extended Description\n\n\nWhile the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service.\n\n\n### Alternative Terms\nStack Exhaustion: When a weakness allocates excessive memory on the stack, it is often described as \"stack exhaustion,\" which is a technical impact of the weakness. This technical impact is often encountered as a consequence of CWE-789 and/or CWE-1325.\n\n### Relationships\nChildOf -> CWE-770\nPeerOf -> CWE-789\nCanPrecede -> CWE-476\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2020-36049:** JavaScript-based packet decoder uses concatenation of many small strings, causing out-of-memory (OOM) condition\n- **CVE-2019-20176:** Product allocates a new buffer on the stack for each file in a directory, allowing stack exhaustion\n- **CVE-2013-1591:** Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.\n\n\n\n\n## CWE-823: Use of Out-of-range Pointer Offset\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.\n\n### Extended Description\n\n\nWhile a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array.\n\n\nPrograms may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error.\n\n\nIf an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the product. As a result, the attack might change the state of the product as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution.\n\n\n### Alternative Terms\nUntrusted pointer offset: This term is narrower than the concept of \"out-of-range\" offset, since the offset might be the result of a calculation or other error that does not depend on any externally-supplied values.\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\nCanPrecede -> CWE-125\nCanPrecede -> CWE-787\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** There are close relationships between incorrect pointer dereferences and other weaknesses related to buffer operations. There may not be sufficient community agreement regarding these relationships. Further study is needed to determine when these relationships are chains, composites, perspective/layering, or other types of relationships. As of September 2010, most of the relationships are being captured as chains.\n\n**[Terminology]** Many weaknesses related to pointer dereferences fall under the general term of \"memory corruption\" or \"memory safety.\" As of September 2010, there is no commonly-used terminology that covers the lower-level variants.\n\n\n\n### Observed Examples\n- **CVE-2010-2160:** Invalid offset in undocumented opcode leads to memory corruption.\n- **CVE-2010-1281:** Multimedia player uses untrusted value from a file when using file-pointer calculations.\n- **CVE-2009-3129:** Spreadsheet program processes a record with an invalid size field, which is later used as an offset.\n\n\n\n\n## CWE-345: Insufficient Verification of Data Authenticity\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** \"origin validation\" could fall under this.\n\n**[Maintenance]** The specific ways in which the origin is not properly identified should be laid out as separate weaknesses. In some sense, this is more like a category.\n\n\n\n### Observed Examples\n- **CVE-2022-30260:** Distributed Control System (DCS) does not sign firmware images and only relies on insecure checksums for integrity checks\n- **CVE-2022-30267:** Distributed Control System (DCS) does not sign firmware images and only relies on insecure checksums for integrity checks\n- **CVE-2022-30272:** Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums\n\n\n\n\n## CWE-125: Out-of-bounds Read\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nOOB read: Shorthand for \"Out of bounds\" read\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2023-1018:** The reference implementation code for a Trusted Platform Module does not implement length checks on data, allowing for an attacker to read 2 bytes past the end of a buffer.\n- **CVE-2020-11899:** Out-of-bounds read in IP stack used in embedded systems, as exploited in the wild per CISA KEV.\n- **CVE-2014-0160:** Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.\n\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not handle or incorrectly handles an exceptional condition.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-703\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2023-41151:** SDK for OPC Unified Architecture (OPC UA) server has uncaught exception when a socket is blocked for writing but the server tries to send an error\n- **[REF-1374]:** Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)\n- **CVE-2021-3011:** virtual interrupt controller in a virtualization product allows crash of host by writing a certain invalid value to a register, which triggers a fatal error instead of returning an error code\n\n",
    "enhanced_query": "## Vulnerability Description\nIn the standard library in Rust before 1.49.0, Stringretain() function has a **panic safety problem**. It allows creation of a non-UTF-8 Rust string when the provided closure panics. This bug could result in a memory safety violation when other string APIs assume that UTF-8 encoding is used on the same string.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **panic safety problem**\n- **impact:** memory safety violation\n- **vector:** closure panic\n- **product:** Rust standard library\n- **version:** before 1.49.0\n- **component:** Stringretain() function\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's an analysis of the vulnerability:\n\n**Root Cause:**\n\nThe vulnerability stems from the `String::retain` function in the Rust standard library. This function allows a user-provided closure to determine which characters to keep in a String. While `String::retain` is executing, it may temporarily leave the `String` in an inconsistent state containing invalid UTF-8. The function is supposed to restore the UTF-8 invariant before returning. However, if the user-provided closure panics, and that panic is caught by the caller, the function's cleanup logic is skipped, leading to a `String` containing invalid UTF-8.\n\n**Weaknesses/Vulnerabilities:**\n\n-   **Invariant Violation:** The core issue is that `String::retain` temporarily breaks the invariant that `String` must contain valid UTF-8. Normally this temporary violation is not observable, however, a panic in a closure provided by a user can be caught, leading to the user being able to see this intermediate state where UTF-8 validity is not guaranteed.\n-   **Unsoundness:** This allows the creation of invalid `String` values which is considered a soundness issue in Rust.\n\n**Impact of Exploitation:**\n\n-   **Undefined Behavior:**  By creating a `String` with invalid UTF-8, users can bypass Rust's safety guarantees and potentially lead to undefined behavior in other parts of the code that assume the `String` is always UTF-8.\n-   **Library Invariant Violation:** This allows the user to violate the core library invariant of the `String` data type.\n\n**Attack Vectors:**\n\n-   **Closure Panic:** The vulnerability can be triggered by providing a closure to `String::retain` that panics at a specific time, designed to be caught.\n\n**Required Attacker Capabilities/Position:**\n\n-   The attacker needs to be able to call the `String::retain` function.\n-   The attacker needs to be able to provide a closure that panics, and they must also handle this panic to observe the invalid `String`.\n\n**Additional details:**\n\nThe provided content also highlights the fix for this vulnerability:\n-   The initial fix set the length of the underlying vector in `String` to `0` before iterating through the string to avoid any leaks of the intermediate invalid UTF-8 data, however, this led to another problem which has since been fixed in commit `803c422` and PR `82554`.\n-   The final fix used a `DropGuard` to ensure that the original length was restored even if the closure panics which guarantees that the `String` always has valid UTF-8.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 787 | Out-of-bounds Write | Base | Allowed | sparse | 0.315 |\n| 2 | 617 | Reachable Assertion | Base | Allowed | sparse | 0.295 |\n| 3 | 119 | Improper Restriction of Operations within the Bounds of a Memory Buffer | Class | Discouraged | sparse | 0.287 |\n| 4 | 908 | Use of Uninitialized Resource | Base | Allowed | sparse | 0.284 |\n| 5 | 1286 | Improper Validation of Syntactic Correctness of Input | Base | Allowed | sparse | 0.268 |\n| 6 | 1325 | Improperly Controlled Sequential Memory Allocation | Base | Allowed | dense | 0.396 |\n| 7 | 823 | Use of Out-of-range Pointer Offset | Base | Allowed | graph | 0.003 |\n| 8 | 345 | Insufficient Verification of Data Authenticity | Class | Discouraged | sparse | 0.259 |\n| 9 | 125 | Out-of-bounds Read | Base | Allowed | sparse | 0.258 |\n| 10 | 755 | Improper Handling of Exceptional Conditions | Class | Discouraged | sparse | 0.257 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-787: Out-of-bounds Write\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product writes data past the end, or before the beginning, of the intended buffer.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nMemory Corruption: Often used to describe the consequences of writing to memory outside the bounds of a buffer, or to memory that is otherwise invalid.\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2023-1017:** The reference implementation code for a Trusted Platform Module does not implement length checks on data, allowing for an attacker to write 2 bytes past the end of a buffer.\n- **CVE-2021-21220:** Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.\n- **CVE-2021-28664:** GPU kernel driver allows memory corruption because a user can obtain read/write access to read-only pages, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-617: Reachable Assertion\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.\n\n### Extended Description\n\n\nWhile assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service.\n\n\nFor example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.\n\n\n### Alternative Terms\nassertion failure\n\n### Relationships\nChildOf -> CWE-670\nChildOf -> CWE-670\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2023-49286:** Chain: function in web caching proxy does not correctly check a return value (CWE-253) leading to a reachable assertion (CWE-617)\n- **CVE-2006-6767:** FTP server allows remote attackers to cause a denial of service (daemon abort) via crafted commands which trigger an assertion failure.\n- **CVE-2006-6811:** Chat client allows remote attackers to cause a denial of service (crash) via a long message string when connecting to a server, which causes an assertion failure.\n\n\n\n\n## CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer\n**Abstraction:** Class\n**Status:** Stable\n\n### Description\nThe product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nBuffer Overflow: This term has many different meanings to different audiences. From a CWE mapping perspective, this term should be avoided where possible. Some researchers, developers, and tools intend for it to mean \"write past the end of a buffer,\" whereas others use the same term to mean \"any read or write outside the boundaries of a buffer, whether before the beginning of the buffer or after the end of the buffer.\" Others could mean \"any action after the end of a buffer, whether it is a read or write.\" Since the term is commonly used for exploitation and for vulnerabilities, it further confuses things.\nbuffer overrun: Some prominent vendors and researchers use the term \"buffer overrun,\" but most people use \"buffer overflow.\" See the alternate term for \"buffer overflow\" for context.\nmemory safety: Generally used for techniques that avoid weaknesses related to memory access, such as those identified by CWE-119 and its descendants. However, the term is not formal, and there is likely disagreement between practitioners as to which weaknesses are implicitly covered by the \"memory safety\" term.\n\n### Relationships\nChildOf -> CWE-118\nChildOf -> CWE-20\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.\n**Comments:** Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Applicable Platform]** \n\nIt is possible in any programming languages without memory management support to attempt an operation outside of the bounds of a memory buffer, but the consequences will vary widely depending on the language, platform, and chip architecture.\n\n\n\n\n### Observed Examples\n- **CVE-2021-22991:** Incorrect URI normalization in application traffic product leads to buffer overflow, as exploited in the wild per CISA KEV.\n- **CVE-2020-29557:** Buffer overflow in Wi-Fi router web interface, as exploited in the wild per CISA KEV.\n- **CVE-2009-2550:** Classic stack-based buffer overflow in media player using a long entry in a playlist\n\n\n\n\n## CWE-908: Use of Uninitialized Resource\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses or accesses a resource that has not been initialized.\n\n### Extended Description\nWhen a resource has not been properly initialized, the product may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the product.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-665\nChildOf -> CWE-665\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2019-9805:** Chain: Creation of the packet client occurs before initialization is complete (CWE-696) resulting in a read from uninitialized memory (CWE-908), causing memory corruption.\n- **CVE-2008-4197:** Use of uninitialized memory may allow code execution.\n- **CVE-2008-2934:** Free of an uninitialized pointer leads to crash and possible code execution.\n\n\n\n\n## CWE-1286: Improper Validation of Syntactic Correctness of Input\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n### Extended Description\n\n\nOften, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages. When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-20\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry is still under development and will continue to see updates and content improvements.\n\n\n\n### Observed Examples\n- **CVE-2016-4029:** Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).\n- **CVE-2007-5893:** HTTP request with missing protocol version number leads to crash\n\n\n\n\n## CWE-1325: Improperly Controlled Sequential Memory Allocation\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.\n\n### Extended Description\n\n\nWhile the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service.\n\n\n### Alternative Terms\nStack Exhaustion: When a weakness allocates excessive memory on the stack, it is often described as \"stack exhaustion,\" which is a technical impact of the weakness. This technical impact is often encountered as a consequence of CWE-789 and/or CWE-1325.\n\n### Relationships\nChildOf -> CWE-770\nPeerOf -> CWE-789\nCanPrecede -> CWE-476\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2020-36049:** JavaScript-based packet decoder uses concatenation of many small strings, causing out-of-memory (OOM) condition\n- **CVE-2019-20176:** Product allocates a new buffer on the stack for each file in a directory, allowing stack exhaustion\n- **CVE-2013-1591:** Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.\n\n\n\n\n## CWE-823: Use of Out-of-range Pointer Offset\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.\n\n### Extended Description\n\n\nWhile a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array.\n\n\nPrograms may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error.\n\n\nIf an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the product. As a result, the attack might change the state of the product as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution.\n\n\n### Alternative Terms\nUntrusted pointer offset: This term is narrower than the concept of \"out-of-range\" offset, since the offset might be the result of a calculation or other error that does not depend on any externally-supplied values.\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\nCanPrecede -> CWE-125\nCanPrecede -> CWE-787\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** There are close relationships between incorrect pointer dereferences and other weaknesses related to buffer operations. There may not be sufficient community agreement regarding these relationships. Further study is needed to determine when these relationships are chains, composites, perspective/layering, or other types of relationships. As of September 2010, most of the relationships are being captured as chains.\n\n**[Terminology]** Many weaknesses related to pointer dereferences fall under the general term of \"memory corruption\" or \"memory safety.\" As of September 2010, there is no commonly-used terminology that covers the lower-level variants.\n\n\n\n### Observed Examples\n- **CVE-2010-2160:** Invalid offset in undocumented opcode leads to memory corruption.\n- **CVE-2010-1281:** Multimedia player uses untrusted value from a file when using file-pointer calculations.\n- **CVE-2009-3129:** Spreadsheet program processes a record with an invalid size field, which is later used as an offset.\n\n\n\n\n## CWE-345: Insufficient Verification of Data Authenticity\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** \"origin validation\" could fall under this.\n\n**[Maintenance]** The specific ways in which the origin is not properly identified should be laid out as separate weaknesses. In some sense, this is more like a category.\n\n\n\n### Observed Examples\n- **CVE-2022-30260:** Distributed Control System (DCS) does not sign firmware images and only relies on insecure checksums for integrity checks\n- **CVE-2022-30267:** Distributed Control System (DCS) does not sign firmware images and only relies on insecure checksums for integrity checks\n- **CVE-2022-30272:** Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums\n\n\n\n\n## CWE-125: Out-of-bounds Read\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nOOB read: Shorthand for \"Out of bounds\" read\n\n### Relationships\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\nChildOf -> CWE-119\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2023-1018:** The reference implementation code for a Trusted Platform Module does not implement length checks on data, allowing for an attacker to read 2 bytes past the end of a buffer.\n- **CVE-2020-11899:** Out-of-bounds read in IP stack used in embedded systems, as exploited in the wild per CISA KEV.\n- **CVE-2014-0160:** Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.\n\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not handle or incorrectly handles an exceptional condition.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-703\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2023-41151:** SDK for OPC Unified Architecture (OPC UA) server has uncaught exception when a socket is blocked for writing but the server tries to send an error\n- **[REF-1374]:** Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)\n- **CVE-2021-3011:** virtual interrupt controller in a virtualization product allows crash of host by writing a certain invalid value to a register, which triggers a fatal error instead of returning an error code\n\n Consider specifically these CWEs: CWE-754 CWE-667 CWE-823 CWE-404 CWE-703 CWE-125 CWE-190 CWE-226 CWE-119 CWE-1284",
    "cwe_mentions": [
      "CWE-754",
      "CWE-667",
      "CWE-823",
      "CWE-404",
      "CWE-703",
      "CWE-125",
      "CWE-190",
      "CWE-226",
      "CWE-119",
      "CWE-1284"
    ],
    "search_time": 3.307255744934082
  },
  "timestamp": "2025-04-02 06:09:22",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "1325",
      "name": "Improperly Controlled Sequential Memory Allocation",
      "type": "base",
      "score": 5.031000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "789",
      "name": "Memory Allocation with Excessive Size Value",
      "type": "variant",
      "score": 4.5264,
      "relationship_count": 0
    },
    {
      "cwe_id": "787",
      "name": "Out-of-bounds Write",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "823",
      "name": "Use of Out-of-range Pointer Offset",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "190",
      "name": "Integer Overflow or Wraparound",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "1284",
      "name": "Improper Validation of Specified Quantity in Input",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "476",
      "name": "NULL Pointer Dereference",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "20",
      "name": "Improper Input Validation",
      "type": "class",
      "score": 2.984,
      "relationship_count": 0
    },
    {
      "cwe_id": "128",
      "name": "Wrap-around Error",
      "type": "base",
      "score": 2.9120000000000004,
      "relationship_count": 0
    }
  ]
}