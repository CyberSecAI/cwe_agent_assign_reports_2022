{
  "retriever": "graph",
  "query": "## Vulnerability Description\nA **relative path traversal** attack in the B. Braun Melsungen AG SpaceCom Version L81/U61 and earlier, and the Data module compactplus Versions A10 and A11 allows attackers with service user privileges to upload arbitrary files. By uploading a specially crafted tar file an attacker can execute arbitrary commands.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **relative path traversal**\n- **impact:** execute arbitrary commands\n- **vector:** uploading a specially crafted tar file\n- **attacker:** attackers with service user privileges\n- **product:** B. Braun Melsungen AG SpaceCom and Data module compactplus\n- **version:** Version L81/U61 and earlier and Versions A10 and A11\n\n## CVE Reference Links Content Summary\nThe provided content is related to CVE-2020-25150.\n\n**Root cause of vulnerability:**\nThe vulnerability stems from a relative path traversal issue in the B. Braun Melsungen AG SpaceCom and Data module compactplus software.\n\n**Weaknesses/vulnerabilities present:**\n- Relative Path Traversal (CWE-23)\n\n**Impact of exploitation:**\nAn attacker with service user privileges can upload arbitrary files. By uploading a specially crafted tar file, an attacker can execute arbitrary commands. This could lead to the compromise of the devices by an attacker.\n\n**Attack vectors:**\n- Network based attacks. An attacker could exploit this vulnerability if they have compromised the network the affected device is on.\n- The attacker needs to have service user privileges to upload files.\n\n**Required attacker capabilities/position:**\n- The attacker needs to have service user level privileges on the device.\n- The attacker must be able to send a specially crafted tar file to the device.\n-  The attacker needs to have network access to the device.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | Base | Allowed | alternate_terms | 0.800 |\n| 2 | 23 | Relative Path Traversal | Base | Allowed | sparse | 0.425 |\n| 3 | 59 | Improper Link Resolution Before File Access ('Link Following') | Base | Allowed | sparse | 0.312 |\n| 4 | 434 | Unrestricted Upload of File with Dangerous Type | Base | Allowed | sparse | 0.273 |\n| 5 | 98 | Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') | Variant | Allowed | sparse | 0.268 |\n| 6 | 25 | Path Traversal: '/../filedir' | Variant | Allowed | dense | 0.645 |\n| 7 | 363 | Race Condition Enabling Link Following | Base | Allowed | graph | 0.002 |\n| 8 | 73 | External Control of File Name or Path | Base | Allowed | sparse | 0.265 |\n| 9 | 269 | Improper Privilege Management | Class | Discouraged | sparse | 0.259 |\n| 10 | 427 | Uncontrolled Search Path Element | Base | Allowed | sparse | 0.256 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n### Extended Description\n\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n\n\n### Alternative Terms\nDirectory traversal\nPath traversal: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\n\n**[Relationship]** Pathname equivalence can be regarded as a type of canonicalization error.\n\n**[Relationship]** Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).\n\n**[Terminology]** \n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n\n\n**[Research Gap]** Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.\n\n**[Research Gap]** \n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-23: Relative Path Traversal\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\n### Extended Description\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n### Alternative Terms\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-22\nChildOf -> CWE-22\nChildOf -> CWE-22\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2019-20916:** Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"\n\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\ninsecure temporary file: Some people use the phrase \"insecure temporary file\" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Theoretical]** \n\nLink following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.\n\n\nSome potential factors are race conditions, permissions, and predictability.\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nUnrestricted File Upload: Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.\n\n### Relationships\nChildOf -> CWE-669\nChildOf -> CWE-669\nPeerOf -> CWE-351\nPeerOf -> CWE-436\nPeerOf -> CWE-430\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \n\nThis can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).\n\n\nThis can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.\n\n\n\n\n### Observed Examples\n- **CVE-2023-5227:** PHP-based FAQ management app does not check the MIME type for uploaded images\n- **CVE-2001-0901:** Web-based mail product stores \".shtml\" attachments that could contain SSI\n- **CVE-2002-1841:** PHP upload does not restrict file types\n\n\n\n\n## CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions.\n\n### Extended Description\nIn certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the product will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.\n\n### Alternative Terms\nRemote file include\nRFI: The Remote File Inclusion (RFI) acronym is often used by vulnerability researchers.\nLocal file inclusion: This term is frequently used in cases in which remote download is disabled, or when the first part of the filename is not under the attacker's control, which forces use of relative path traversal (CWE-23) attack techniques to access files that may contain previously-injected PHP code, such as web access logs.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-829\nCanPrecede -> CWE-94\nCanAlsoBe -> CWE-426\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \n\nThis is frequently a functional consequence of other weaknesses. It is usually multi-factor with other factors (e.g. MAID), although not all inclusion bugs involve assumed-immutable data. Direct request weaknesses frequently play a role.\n\n\nCan overlap directory traversal in local inclusion problems.\n\n\n\n\n### Observed Examples\n- **CVE-2004-0285:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n- **CVE-2004-0030:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n- **CVE-2004-0068:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n\n\n\n\n## CWE-25: Path Traversal: '/../filedir'\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/../\" sequences that can resolve to a location that is outside of that directory.\n\n### Extended Description\n\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nSometimes a program checks for \"../\" at the beginning of the input, so a \"/../\" can bypass that check.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-23\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-20775:** A cloud management tool allows attackers to bypass the restricted shell using path traversal sequences like \"/../\" in the USER environment variable.\n\n\n\n\n## CWE-363: Race Condition Enabling Link Following\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.\n\n### Extended Description\nWhile developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the product to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-367\nCanPrecede -> CWE-59\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This is already covered by the \"Link Following\" weakness (CWE-59). It is included here because so many people associate race conditions with link problems; however, not all link following issues involve race conditions.\n\n\n\n\n\n\n## CWE-73: External Control of File Name or Path\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows user input to control or influence paths or file names that are used in filesystem operations.\n\n### Extended Description\n\n\nThis could allow an attacker to access or modify system files or other files that are critical to the application.\n\n\nPath manipulation errors occur when the following two conditions are met:\n\n```\n\t\t1. An attacker can specify a path used in an operation on the filesystem.\n\t\t2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n```\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-642\nChildOf -> CWE-610\nChildOf -> CWE-20\nCanPrecede -> CWE-22\nCanPrecede -> CWE-41\nCanPrecede -> CWE-98\nCanPrecede -> CWE-434\nCanPrecede -> CWE-59\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** CWE-114 is a Class, but it is listed a child of CWE-73 in view 1000. This suggests some abstraction problems that should be resolved in future versions.\n\n**[Relationship]** \n\nThe external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc.\n\n\nHowever, those weaknesses do not always require external control. For example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all.\n\n\nThe external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker.\n\n\n\n\n### Observed Examples\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2008-5748:** Chain: external control of values for user's desired language and theme enables path traversal.\n- **CVE-2008-5764:** Chain: external control of user's target language enables remote file inclusion.\n\n\n\n\n## CWE-269: Improper Privilege Management\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-269 is commonly misused. It can be conflated with \"privilege escalation,\" which is a technical impact that is listed in many low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.\n**Comments:** If an error or mistake allows privilege escalation, then use the CWE ID for that mistake. Avoid using CWE-269 when only phrases such as \"privilege escalation\" or \"gain privileges\" are available, as these indicate technical impact of the vulnerability - not the root cause weakness. If the root cause seems to be directly related to privileges, then examine the children of CWE-269 for additional hints, such as Execution with Unnecessary Privileges (CWE-250) or Incorrect Privilege Assignment (CWE-266).\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n\n\n### Observed Examples\n- **CVE-2001-1555:** Terminal privileges are not reset when a user logs out.\n- **CVE-2001-1514:** Does not properly pass security context to child processes in certain cases, allows privilege escalation.\n- **CVE-2001-0128:** Does not properly compute roles.\n\n\n\n\n## CWE-427: Uncontrolled Search Path Element\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\n\n### Extended Description\n\n\nAlthough this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as \"/tmp\" or the current working directory.\n\n\nIn Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:\n\n\n  - the directory from which the program has been loaded\n\n  - the current working directory\n\nIn some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.\n\nOne or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled.\n\n\nIn some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.\n\n\nIn software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.\n\n\n### Alternative Terms\nDLL preloading: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nBinary planting: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nInsecure library loading: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nDependency confusion: As of February 2021, this term is used to describe CWE-427 in the context of managing installation of software package dependencies, in which attackers release packages on public sites where the names are the same as package names used by private repositories, and the search for the dependent package tries the public site first, downloading untrusted code. It may also be referred to as a \"substitution attack.\"\n\n### Relationships\nChildOf -> CWE-668\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Unlike untrusted search path (CWE-426), which inherently involves control over the definition of a control sphere (i.e., modification of a search path), this entry concerns a fixed control sphere in which some part of the sphere may be under attacker control (i.e., the search path cannot be modified by an attacker, but one element of the path can be under attacker control).\n\n**[Theoretical]** This weakness is not a clean fit under CWE-668 or CWE-610, which suggests that the control sphere model might need enhancement or clarification.\n\n\n\n### Observed Examples\n- **CVE-2023-25815:** chain: a change in an underlying package causes the gettext function to use implicit initialization with a hard-coded path (CWE-1419) under the user-writable C:\\ drive, introducing an untrusted search path element (CWE-427) that enables spoofing of messages.\n- **CVE-2022-4826:** Go-based git extension on Windows can search for and execute a malicious \"..exe\" in a repository because Go searches the current working directory if git.exe is not found in the PATH\n- **CVE-2020-26284:** A Static Site Generator built in Go, when running on Windows, searches the current working directory for a command, possibly allowing code execution using a malicious .exe or .bat file with the name being searched\n\n Consider specifically these CWEs: CWE-73 CWE-22 CWE-24 CWE-23 CWE-427 CWE-59",
  "keyphrases": {
    "original_query": "## Vulnerability Description\nA **relative path traversal** attack in the B. Braun Melsungen AG SpaceCom Version L81/U61 and earlier, and the Data module compactplus Versions A10 and A11 allows attackers with service user privileges to upload arbitrary files. By uploading a specially crafted tar file an attacker can execute arbitrary commands.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **relative path traversal**\n- **impact:** execute arbitrary commands\n- **vector:** uploading a specially crafted tar file\n- **attacker:** attackers with service user privileges\n- **product:** B. Braun Melsungen AG SpaceCom and Data module compactplus\n- **version:** Version L81/U61 and earlier and Versions A10 and A11\n\n## CVE Reference Links Content Summary\nThe provided content is related to CVE-2020-25150.\n\n**Root cause of vulnerability:**\nThe vulnerability stems from a relative path traversal issue in the B. Braun Melsungen AG SpaceCom and Data module compactplus software.\n\n**Weaknesses/vulnerabilities present:**\n- Relative Path Traversal (CWE-23)\n\n**Impact of exploitation:**\nAn attacker with service user privileges can upload arbitrary files. By uploading a specially crafted tar file, an attacker can execute arbitrary commands. This could lead to the compromise of the devices by an attacker.\n\n**Attack vectors:**\n- Network based attacks. An attacker could exploit this vulnerability if they have compromised the network the affected device is on.\n- The attacker needs to have service user privileges to upload files.\n\n**Required attacker capabilities/position:**\n- The attacker needs to have service user level privileges on the device.\n- The attacker must be able to send a specially crafted tar file to the device.\n-  The attacker needs to have network access to the device.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | Base | Allowed | alternate_terms | 0.800 |\n| 2 | 23 | Relative Path Traversal | Base | Allowed | sparse | 0.425 |\n| 3 | 59 | Improper Link Resolution Before File Access ('Link Following') | Base | Allowed | sparse | 0.312 |\n| 4 | 434 | Unrestricted Upload of File with Dangerous Type | Base | Allowed | sparse | 0.273 |\n| 5 | 98 | Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') | Variant | Allowed | sparse | 0.268 |\n| 6 | 25 | Path Traversal: '/../filedir' | Variant | Allowed | dense | 0.645 |\n| 7 | 363 | Race Condition Enabling Link Following | Base | Allowed | graph | 0.002 |\n| 8 | 73 | External Control of File Name or Path | Base | Allowed | sparse | 0.265 |\n| 9 | 269 | Improper Privilege Management | Class | Discouraged | sparse | 0.259 |\n| 10 | 427 | Uncontrolled Search Path Element | Base | Allowed | sparse | 0.256 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n### Extended Description\n\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n\n\n### Alternative Terms\nDirectory traversal\nPath traversal: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\n\n**[Relationship]** Pathname equivalence can be regarded as a type of canonicalization error.\n\n**[Relationship]** Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).\n\n**[Terminology]** \n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n\n\n**[Research Gap]** Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.\n\n**[Research Gap]** \n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-23: Relative Path Traversal\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\n### Extended Description\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n### Alternative Terms\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-22\nChildOf -> CWE-22\nChildOf -> CWE-22\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2019-20916:** Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"\n\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\ninsecure temporary file: Some people use the phrase \"insecure temporary file\" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Theoretical]** \n\nLink following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.\n\n\nSome potential factors are race conditions, permissions, and predictability.\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nUnrestricted File Upload: Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.\n\n### Relationships\nChildOf -> CWE-669\nChildOf -> CWE-669\nPeerOf -> CWE-351\nPeerOf -> CWE-436\nPeerOf -> CWE-430\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \n\nThis can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).\n\n\nThis can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.\n\n\n\n\n### Observed Examples\n- **CVE-2023-5227:** PHP-based FAQ management app does not check the MIME type for uploaded images\n- **CVE-2001-0901:** Web-based mail product stores \".shtml\" attachments that could contain SSI\n- **CVE-2002-1841:** PHP upload does not restrict file types\n\n\n\n\n## CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions.\n\n### Extended Description\nIn certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the product will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.\n\n### Alternative Terms\nRemote file include\nRFI: The Remote File Inclusion (RFI) acronym is often used by vulnerability researchers.\nLocal file inclusion: This term is frequently used in cases in which remote download is disabled, or when the first part of the filename is not under the attacker's control, which forces use of relative path traversal (CWE-23) attack techniques to access files that may contain previously-injected PHP code, such as web access logs.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-829\nCanPrecede -> CWE-94\nCanAlsoBe -> CWE-426\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \n\nThis is frequently a functional consequence of other weaknesses. It is usually multi-factor with other factors (e.g. MAID), although not all inclusion bugs involve assumed-immutable data. Direct request weaknesses frequently play a role.\n\n\nCan overlap directory traversal in local inclusion problems.\n\n\n\n\n### Observed Examples\n- **CVE-2004-0285:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n- **CVE-2004-0030:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n- **CVE-2004-0068:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n\n\n\n\n## CWE-25: Path Traversal: '/../filedir'\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/../\" sequences that can resolve to a location that is outside of that directory.\n\n### Extended Description\n\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nSometimes a program checks for \"../\" at the beginning of the input, so a \"/../\" can bypass that check.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-23\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-20775:** A cloud management tool allows attackers to bypass the restricted shell using path traversal sequences like \"/../\" in the USER environment variable.\n\n\n\n\n## CWE-363: Race Condition Enabling Link Following\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.\n\n### Extended Description\nWhile developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the product to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-367\nCanPrecede -> CWE-59\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This is already covered by the \"Link Following\" weakness (CWE-59). It is included here because so many people associate race conditions with link problems; however, not all link following issues involve race conditions.\n\n\n\n\n\n\n## CWE-73: External Control of File Name or Path\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows user input to control or influence paths or file names that are used in filesystem operations.\n\n### Extended Description\n\n\nThis could allow an attacker to access or modify system files or other files that are critical to the application.\n\n\nPath manipulation errors occur when the following two conditions are met:\n\n```\n\t\t1. An attacker can specify a path used in an operation on the filesystem.\n\t\t2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n```\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-642\nChildOf -> CWE-610\nChildOf -> CWE-20\nCanPrecede -> CWE-22\nCanPrecede -> CWE-41\nCanPrecede -> CWE-98\nCanPrecede -> CWE-434\nCanPrecede -> CWE-59\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** CWE-114 is a Class, but it is listed a child of CWE-73 in view 1000. This suggests some abstraction problems that should be resolved in future versions.\n\n**[Relationship]** \n\nThe external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc.\n\n\nHowever, those weaknesses do not always require external control. For example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all.\n\n\nThe external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker.\n\n\n\n\n### Observed Examples\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2008-5748:** Chain: external control of values for user's desired language and theme enables path traversal.\n- **CVE-2008-5764:** Chain: external control of user's target language enables remote file inclusion.\n\n\n\n\n## CWE-269: Improper Privilege Management\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-269 is commonly misused. It can be conflated with \"privilege escalation,\" which is a technical impact that is listed in many low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.\n**Comments:** If an error or mistake allows privilege escalation, then use the CWE ID for that mistake. Avoid using CWE-269 when only phrases such as \"privilege escalation\" or \"gain privileges\" are available, as these indicate technical impact of the vulnerability - not the root cause weakness. If the root cause seems to be directly related to privileges, then examine the children of CWE-269 for additional hints, such as Execution with Unnecessary Privileges (CWE-250) or Incorrect Privilege Assignment (CWE-266).\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n\n\n### Observed Examples\n- **CVE-2001-1555:** Terminal privileges are not reset when a user logs out.\n- **CVE-2001-1514:** Does not properly pass security context to child processes in certain cases, allows privilege escalation.\n- **CVE-2001-0128:** Does not properly compute roles.\n\n\n\n\n## CWE-427: Uncontrolled Search Path Element\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\n\n### Extended Description\n\n\nAlthough this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as \"/tmp\" or the current working directory.\n\n\nIn Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:\n\n\n  - the directory from which the program has been loaded\n\n  - the current working directory\n\nIn some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.\n\nOne or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled.\n\n\nIn some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.\n\n\nIn software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.\n\n\n### Alternative Terms\nDLL preloading: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nBinary planting: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nInsecure library loading: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nDependency confusion: As of February 2021, this term is used to describe CWE-427 in the context of managing installation of software package dependencies, in which attackers release packages on public sites where the names are the same as package names used by private repositories, and the search for the dependent package tries the public site first, downloading untrusted code. It may also be referred to as a \"substitution attack.\"\n\n### Relationships\nChildOf -> CWE-668\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Unlike untrusted search path (CWE-426), which inherently involves control over the definition of a control sphere (i.e., modification of a search path), this entry concerns a fixed control sphere in which some part of the sphere may be under attacker control (i.e., the search path cannot be modified by an attacker, but one element of the path can be under attacker control).\n\n**[Theoretical]** This weakness is not a clean fit under CWE-668 or CWE-610, which suggests that the control sphere model might need enhancement or clarification.\n\n\n\n### Observed Examples\n- **CVE-2023-25815:** chain: a change in an underlying package causes the gettext function to use implicit initialization with a hard-coded path (CWE-1419) under the user-writable C:\\ drive, introducing an untrusted search path element (CWE-427) that enables spoofing of messages.\n- **CVE-2022-4826:** Go-based git extension on Windows can search for and execute a malicious \"..exe\" in a repository because Go searches the current working directory if git.exe is not found in the PATH\n- **CVE-2020-26284:** A Static Site Generator built in Go, when running on Windows, searches the current working directory for a command, possibly allowing code execution using a malicious .exe or .bat file with the name being searched\n\n",
    "enhanced_query": "## Vulnerability Description\nA **relative path traversal** attack in the B. Braun Melsungen AG SpaceCom Version L81/U61 and earlier, and the Data module compactplus Versions A10 and A11 allows attackers with service user privileges to upload arbitrary files. By uploading a specially crafted tar file an attacker can execute arbitrary commands.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **relative path traversal**\n- **impact:** execute arbitrary commands\n- **vector:** uploading a specially crafted tar file\n- **attacker:** attackers with service user privileges\n- **product:** B. Braun Melsungen AG SpaceCom and Data module compactplus\n- **version:** Version L81/U61 and earlier and Versions A10 and A11\n\n## CVE Reference Links Content Summary\nThe provided content is related to CVE-2020-25150.\n\n**Root cause of vulnerability:**\nThe vulnerability stems from a relative path traversal issue in the B. Braun Melsungen AG SpaceCom and Data module compactplus software.\n\n**Weaknesses/vulnerabilities present:**\n- Relative Path Traversal (CWE-23)\n\n**Impact of exploitation:**\nAn attacker with service user privileges can upload arbitrary files. By uploading a specially crafted tar file, an attacker can execute arbitrary commands. This could lead to the compromise of the devices by an attacker.\n\n**Attack vectors:**\n- Network based attacks. An attacker could exploit this vulnerability if they have compromised the network the affected device is on.\n- The attacker needs to have service user privileges to upload files.\n\n**Required attacker capabilities/position:**\n- The attacker needs to have service user level privileges on the device.\n- The attacker must be able to send a specially crafted tar file to the device.\n-  The attacker needs to have network access to the device.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | Base | Allowed | alternate_terms | 0.800 |\n| 2 | 23 | Relative Path Traversal | Base | Allowed | sparse | 0.425 |\n| 3 | 59 | Improper Link Resolution Before File Access ('Link Following') | Base | Allowed | sparse | 0.312 |\n| 4 | 434 | Unrestricted Upload of File with Dangerous Type | Base | Allowed | sparse | 0.273 |\n| 5 | 98 | Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion') | Variant | Allowed | sparse | 0.268 |\n| 6 | 25 | Path Traversal: '/../filedir' | Variant | Allowed | dense | 0.645 |\n| 7 | 363 | Race Condition Enabling Link Following | Base | Allowed | graph | 0.002 |\n| 8 | 73 | External Control of File Name or Path | Base | Allowed | sparse | 0.265 |\n| 9 | 269 | Improper Privilege Management | Class | Discouraged | sparse | 0.259 |\n| 10 | 427 | Uncontrolled Search Path Element | Base | Allowed | sparse | 0.256 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n### Extended Description\n\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n\n\n### Alternative Terms\nDirectory traversal\nPath traversal: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\n\n**[Relationship]** Pathname equivalence can be regarded as a type of canonicalization error.\n\n**[Relationship]** Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).\n\n**[Terminology]** \n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n\n\n**[Research Gap]** Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.\n\n**[Research Gap]** \n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-23: Relative Path Traversal\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\n### Extended Description\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n### Alternative Terms\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-22\nChildOf -> CWE-22\nChildOf -> CWE-22\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2019-20916:** Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"\n\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\ninsecure temporary file: Some people use the phrase \"insecure temporary file\" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Theoretical]** \n\nLink following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.\n\n\nSome potential factors are race conditions, permissions, and predictability.\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-434: Unrestricted Upload of File with Dangerous Type\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows the upload or transfer of dangerous file types that are automatically processed within its environment.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nUnrestricted File Upload: Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.\n\n### Relationships\nChildOf -> CWE-669\nChildOf -> CWE-669\nPeerOf -> CWE-351\nPeerOf -> CWE-436\nPeerOf -> CWE-430\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \n\nThis can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).\n\n\nThis can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.\n\n\n\n\n### Observed Examples\n- **CVE-2023-5227:** PHP-based FAQ management app does not check the MIME type for uploaded images\n- **CVE-2001-0901:** Web-based mail product stores \".shtml\" attachments that could contain SSI\n- **CVE-2002-1841:** PHP upload does not restrict file types\n\n\n\n\n## CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions.\n\n### Extended Description\nIn certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the product will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.\n\n### Alternative Terms\nRemote file include\nRFI: The Remote File Inclusion (RFI) acronym is often used by vulnerability researchers.\nLocal file inclusion: This term is frequently used in cases in which remote download is disabled, or when the first part of the filename is not under the attacker's control, which forces use of relative path traversal (CWE-23) attack techniques to access files that may contain previously-injected PHP code, such as web access logs.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-829\nCanPrecede -> CWE-94\nCanAlsoBe -> CWE-426\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \n\nThis is frequently a functional consequence of other weaknesses. It is usually multi-factor with other factors (e.g. MAID), although not all inclusion bugs involve assumed-immutable data. Direct request weaknesses frequently play a role.\n\n\nCan overlap directory traversal in local inclusion problems.\n\n\n\n\n### Observed Examples\n- **CVE-2004-0285:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n- **CVE-2004-0030:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n- **CVE-2004-0068:** Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.\n\n\n\n\n## CWE-25: Path Traversal: '/../filedir'\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/../\" sequences that can resolve to a location that is outside of that directory.\n\n### Extended Description\n\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nSometimes a program checks for \"../\" at the beginning of the input, so a \"/../\" can bypass that check.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-23\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-20775:** A cloud management tool allows attackers to bypass the restricted shell using path traversal sequences like \"/../\" in the USER environment variable.\n\n\n\n\n## CWE-363: Race Condition Enabling Link Following\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.\n\n### Extended Description\nWhile developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the product to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-367\nCanPrecede -> CWE-59\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This is already covered by the \"Link Following\" weakness (CWE-59). It is included here because so many people associate race conditions with link problems; however, not all link following issues involve race conditions.\n\n\n\n\n\n\n## CWE-73: External Control of File Name or Path\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product allows user input to control or influence paths or file names that are used in filesystem operations.\n\n### Extended Description\n\n\nThis could allow an attacker to access or modify system files or other files that are critical to the application.\n\n\nPath manipulation errors occur when the following two conditions are met:\n\n```\n\t\t1. An attacker can specify a path used in an operation on the filesystem.\n\t\t2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\n```\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-642\nChildOf -> CWE-610\nChildOf -> CWE-20\nCanPrecede -> CWE-22\nCanPrecede -> CWE-41\nCanPrecede -> CWE-98\nCanPrecede -> CWE-434\nCanPrecede -> CWE-59\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** CWE-114 is a Class, but it is listed a child of CWE-73 in view 1000. This suggests some abstraction problems that should be resolved in future versions.\n\n**[Relationship]** \n\nThe external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc.\n\n\nHowever, those weaknesses do not always require external control. For example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all.\n\n\nThe external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker.\n\n\n\n\n### Observed Examples\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n- **CVE-2008-5748:** Chain: external control of values for user's desired language and theme enables path traversal.\n- **CVE-2008-5764:** Chain: external control of user's target language enables remote file inclusion.\n\n\n\n\n## CWE-269: Improper Privilege Management\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-269 is commonly misused. It can be conflated with \"privilege escalation,\" which is a technical impact that is listed in many low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.\n**Comments:** If an error or mistake allows privilege escalation, then use the CWE ID for that mistake. Avoid using CWE-269 when only phrases such as \"privilege escalation\" or \"gain privileges\" are available, as these indicate technical impact of the vulnerability - not the root cause weakness. If the root cause seems to be directly related to privileges, then examine the children of CWE-269 for additional hints, such as Execution with Unnecessary Privileges (CWE-250) or Incorrect Privilege Assignment (CWE-266).\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n\n\n### Observed Examples\n- **CVE-2001-1555:** Terminal privileges are not reset when a user logs out.\n- **CVE-2001-1514:** Does not properly pass security context to child processes in certain cases, allows privilege escalation.\n- **CVE-2001-0128:** Does not properly compute roles.\n\n\n\n\n## CWE-427: Uncontrolled Search Path Element\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\n\n### Extended Description\n\n\nAlthough this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as \"/tmp\" or the current working directory.\n\n\nIn Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:\n\n\n  - the directory from which the program has been loaded\n\n  - the current working directory\n\nIn some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.\n\nOne or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled.\n\n\nIn some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.\n\n\nIn software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.\n\n\n### Alternative Terms\nDLL preloading: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nBinary planting: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nInsecure library loading: This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427.\nDependency confusion: As of February 2021, this term is used to describe CWE-427 in the context of managing installation of software package dependencies, in which attackers release packages on public sites where the names are the same as package names used by private repositories, and the search for the dependent package tries the public site first, downloading untrusted code. It may also be referred to as a \"substitution attack.\"\n\n### Relationships\nChildOf -> CWE-668\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Unlike untrusted search path (CWE-426), which inherently involves control over the definition of a control sphere (i.e., modification of a search path), this entry concerns a fixed control sphere in which some part of the sphere may be under attacker control (i.e., the search path cannot be modified by an attacker, but one element of the path can be under attacker control).\n\n**[Theoretical]** This weakness is not a clean fit under CWE-668 or CWE-610, which suggests that the control sphere model might need enhancement or clarification.\n\n\n\n### Observed Examples\n- **CVE-2023-25815:** chain: a change in an underlying package causes the gettext function to use implicit initialization with a hard-coded path (CWE-1419) under the user-writable C:\\ drive, introducing an untrusted search path element (CWE-427) that enables spoofing of messages.\n- **CVE-2022-4826:** Go-based git extension on Windows can search for and execute a malicious \"..exe\" in a repository because Go searches the current working directory if git.exe is not found in the PATH\n- **CVE-2020-26284:** A Static Site Generator built in Go, when running on Windows, searches the current working directory for a command, possibly allowing code execution using a malicious .exe or .bat file with the name being searched\n\n Consider specifically these CWEs: CWE-73 CWE-22 CWE-24 CWE-23 CWE-427 CWE-59",
    "cwe_mentions": [
      "CWE-73",
      "CWE-22",
      "CWE-24",
      "CWE-23",
      "CWE-427",
      "CWE-59"
    ],
    "search_time": 2.686439037322998
  },
  "timestamp": "2025-04-02 05:48:44",
  "cve_id": "unknown",
  "result_count": 10,
  "results": [
    {
      "cwe_id": "434",
      "name": "Unrestricted Upload of File with Dangerous Type",
      "type": "base",
      "score": 5.031000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "183",
      "name": "Permissive List of Allowed Inputs",
      "type": "base",
      "score": 4.8204,
      "relationship_count": 0
    },
    {
      "cwe_id": "98",
      "name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
      "type": "variant",
      "score": 4.5264,
      "relationship_count": 0
    },
    {
      "cwe_id": "22",
      "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "363",
      "name": "Race Condition Enabling Link Following",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "94",
      "name": "Improper Control of Generation of Code ('Code Injection')",
      "type": "base",
      "score": 4.329000000000001,
      "relationship_count": 0
    },
    {
      "cwe_id": "430",
      "name": "Deployment of Wrong Handler",
      "type": "base",
      "score": 3.6399999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "351",
      "name": "Insufficient Type Distinction",
      "type": "base",
      "score": 3.6399999999999997,
      "relationship_count": 0
    },
    {
      "cwe_id": "843",
      "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
      "type": "base",
      "score": 3.4361600000000005,
      "relationship_count": 0
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "type": "base",
      "score": 3.2656,
      "relationship_count": 0
    }
  ]
}