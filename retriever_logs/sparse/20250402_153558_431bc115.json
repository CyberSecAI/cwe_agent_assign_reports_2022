{
  "retriever": "sparse",
  "query": "## Vulnerability Description\nAn issue has been discovered in GitLab affecting all versions of Gitlab EE/CE before 13.6.7. A potential **resource exhaustion** issue that allowed running or pending jobs to continue even after project was deleted.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **resource exhaustion**\n- **impact:** running or pending jobs continue after project deletion\n- **product:** GitLab EE/CE\n- **version:** before 13.6.7\n\n## CVE Reference Links Content Summary\n```json\n{\n    \"CVE_data_meta\": {\n        \"ID\": \"CVE-2021-22187\",\n        \"ASSIGNER\": \"cve@gitlab.com\",\n        \"STATE\": \"PUBLIC\"\n    },\n    \"affects\": {\n        \"vendor\": {\n            \"vendor_data\": [\n                {\n                    \"vendor_name\": \"Gitlab\",\n                    \"product\": {\n                        \"product_data\": [\n                            {\n                                \"product_name\": \"GitLab\",\n                                \"version\": {\n                                    \"version_data\": [\n                                        {\n                                            \"version_value\": \">=13.4, <13.8.8\"\n                                        },\n                                        {\n                                            \"version_value\": \">=13.9, <13.9.6\"\n                                        },\n                                         {\n                                            \"version_value\": \">=13.10, <13.10.3\"\n                                        }\n                                    ]\n                                }\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    },\n    \"data_format\": \"MITRE\",\n    \"data_type\": \"CVE\",\n    \"data_version\": \"4.0\",\n    \"description\": {\n        \"description_data\": [\n            {\n                \"lang\": \"eng\",\n                \"value\": \"A vulnerability was discovered in GitLab versions >=13.4, <13.8.8, >=13.9, <13.9.6 and >=13.10, <13.10.3 that allows an attacker to view the names of private repositories in public projects via GraphQL.\"\n            }\n        ]\n    },\n    \"impact\": {\n        \"cvss\": {\n            \"attackComplexity\": \"LOW\",\n            \"attackVector\": \"NETWORK\",\n            \"availabilityImpact\": \"NONE\",\n            \"baseScore\": 4.3,\n            \"baseSeverity\": \"MEDIUM\",\n            \"confidentialityImpact\": \"LOW\",\n            \"integrityImpact\": \"NONE\",\n            \"privilegesRequired\": \"NONE\",\n            \"scope\": \"UNCHANGED\",\n            \"userInteraction\": \"NONE\",\n            \"vectorString\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N\",\n            \"version\": \"3.1\"\n        }\n    },\n    \"problemtype\": {\n        \"problemtype_data\": [\n            {\n                \"description\": [\n                    {\n                        \"lang\": \"eng\",\n                        \"value\": \"Improper Authorization\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"references\": {\n        \"reference_data\": [\n            {\n                \"name\": \"https://gitlab.com/gitlab-org/cves/-/blob/master/2021/CVE-2021-22187.json\",\n                \"refsource\": \"CONFIRM\",\n                \"url\": \"https://gitlab.com/gitlab-org/cves/-/blob/master/2021/CVE-2021-22187.json\"\n            },\n             {\n                \"name\": \"https://gitlab.com/gitlab-org/gitlab/-/issues/288912\",\n                \"refsource\": \"MISC\",\n                \"url\": \"https://gitlab.com/gitlab-org/gitlab/-/issues/288912\"\n            }\n        ]\n    }\n}\n```\nRoot cause of vulnerability: Improper authorization.\n\nWeaknesses/vulnerabilities present:  A vulnerability in GitLab allows unauthorized viewing of private repository names through a public project via GraphQL.\n\nImpact of exploitation: An attacker can view the names of private repositories associated with a public project.\n\nAttack vectors: Network based. Exploitation occurs through GraphQL queries.\n\nRequired attacker capabilities/position: No special privileges are required. The attacker needs to be able to send GraphQL queries to a vulnerable GitLab instance.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 400 | Uncontrolled Resource Consumption | Class | Discouraged | alternate_terms | 1.000 |\n| 2 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.207 |\n| 3 | 285 | Improper Authorization | Class | Discouraged | sparse | 0.206 |\n| 4 | 1176 | Inefficient CPU Computation | Class | Allowed-with-Review | sparse | 0.196 |\n| 5 | 1333 | Inefficient Regular Expression Complexity | Base | Allowed | sparse | 0.191 |\n| 6 | 772 | Missing Release of Resource after Effective Lifetime | Base | Allowed | dense | 0.537 |\n| 7 | 911 | Improper Update of Reference Count | Base | Allowed | graph | 0.002 |\n| 8 | 282 | Improper Ownership Management | Class | Allowed-with-Review | sparse | 0.190 |\n| 9 | 1390 | Weak Authentication | Class | Allowed-with-Review | sparse | 0.180 |\n| 10 | 226 | Sensitive Information in Resource Not Removed Before Reuse | Base | Allowed | sparse | 0.179 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-400: Uncontrolled Resource Consumption\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.\n\n### Extended Description\n\n\nLimited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the product, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system.\n\n\nThere are at least three distinct scenarios which can commonly lead to resource exhaustion:\n\n\n  - Lack of throttling for the number of allocated resources\n\n  - Losing all references to a resource before reaching the shutdown stage\n\n  - Not closing/returning a resource after processing\n\nResource exhaustion problems are often result due to an incorrect implementation of the following situations:\n\n  - Error conditions and other exceptional circumstances.\n\n  - Confusion over which part of the program is responsible for releasing the resource.\n\n\n\n### Alternative Terms\nResource Exhaustion\n\n### Relationships\nChildOf -> CWE-664\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-400 is intended for incorrect behaviors in which the product is expected to track and restrict how many resources it consumes, but CWE-400 is often misused because it is conflated with the \"technical impact\" of vulnerabilities in which resource consumption occurs. It is sometimes used for low-information vulnerability reports. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Closely analyze the specific mistake that is causing resource consumption, and perform a CWE mapping for that mistake. Consider children/descendants such as CWE-770: Allocation of Resources Without Limits or Throttling, CWE-771: Missing Reference to Active Allocated Resource, CWE-410: Insufficient Resource Pool, CWE-772: Missing Release of Resource after Effective Lifetime, CWE-834: Excessive Iteration, CWE-405: Asymmetric Resource Consumption (Amplification), and others.\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** \"Resource consumption\" could be interpreted as a consequence instead of an insecure behavior, so this entry is being considered for modification. It appears to be referenced too frequently when more precise mappings are available. Some of its children, such as CWE-771, might be better considered as a chain.\n\n**[Theoretical]** Vulnerability theory is largely about how behaviors and resources interact. \"Resource exhaustion\" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect the underlying weaknesses that enable these attacks (or consequences) to take place.\n\n**[Other]** \n\nDatabase queries that take a long time to process are good DoS targets. An attacker would have to write a few lines of Perl code to generate enough traffic to exceed the site's ability to keep up. This would effectively prevent authorized users from using the site at all. Resources can be exploited simply by ensuring that the target machine must do much more work and consume more resources in order to service a request than the attacker must do to initiate a request.\n\n\nA prime example of this can be found in old switches that were vulnerable to \"macof\" attacks (so named for a tool developed by Dugsong). These attacks flooded a switch with random IP and MAC address combinations, therefore exhausting the switch's cache, which held the information of which port corresponded to which MAC addresses. Once this cache was exhausted, the switch would fail in an insecure way and would begin to act simply as a hub, broadcasting all traffic on all ports and allowing for basic sniffing attacks.\n\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2020-7218:** Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service\n- **CVE-2020-3566:** Resource exhaustion in distributed OS because of \"insufficient\" IGMP queue management, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-285: Improper Authorization\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\n\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.\n**Reasons:**\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-2960:** Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.\n\n\n\n\n## CWE-1176: Inefficient CPU Computation\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs CPU computations using\n         algorithms that are not as efficient as they could be for the\n         needs of the developer, i.e., the computations can be\n         optimized further.\n\n### Extended Description\n\n\nThis issue can make the product perform more slowly, possibly in ways that are noticeable to the users. If an attacker can influence the amount of computation that must be performed, e.g. by triggering worst-case complexity, then this performance problem might introduce a vulnerability.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-405\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-37734:** Chain: lexer in Java-based GraphQL server does not enforce maximum of tokens early enough (CWE-696), allowing excessive CPU consumption (CWE-1176)\n\n\n\n\n## CWE-1333: Inefficient Regular Expression Complexity\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.\n\n### Extended Description\nSome regular expression engines have a feature called \"backtracking\". If the token cannot match, the engine \"backtracks\" to a position that may result in a different token that can match.\n Backtracking becomes a weakness if all of these conditions are met:\n\n\n  - The number of possible backtracking attempts are exponential relative to the length of the input.\n\n  - The input can fail to match the regular expression.\n\n  - The input can be long enough.\n\n Attackers can create crafted inputs that intentionally cause the regular expression to use excessive backtracking in a way that causes the CPU consumption to spike. \n\n### Alternative Terms\nReDoS: ReDoS is an abbreviation of \"Regular expression Denial of Service\".\nRegular Expression Denial of Service: While this term is attack-focused, this is commonly used to describe the weakness.\nCatastrophic backtracking: This term is used to describe the behavior of the regular expression as a negative technical impact.\n\n### Relationships\nChildOf -> CWE-407\nChildOf -> CWE-407\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2020-5243:** server allows ReDOS with crafted User-Agent strings, due to overlapping capture groups that cause excessive backtracking.\n- **CVE-2021-21317:** npm package for user-agent parser prone to ReDoS due to overlapping capture groups\n- **CVE-2019-16215:** Markdown parser uses inefficient regex when processing a message, allowing users to cause CPU consumption and delay preventing processing of other messages.\n\n\n\n\n## CWE-772: Missing Release of Resource after Effective Lifetime\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.\n\n### Extended Description\nWhen a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-404\nChildOf -> CWE-404\nChildOf -> CWE-404\nChildOf -> CWE-404\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** \"Resource exhaustion\" (CWE-400) is currently treated as a weakness, although it is more like a category of weaknesses that all have the same type of consequence. While this entry treats CWE-400 as a parent in view 1000, the relationship is probably more appropriately described as a chain.\n\n**[Theoretical]** Vulnerability theory is largely about how behaviors and resources interact. \"Resource exhaustion\" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect one of the underlying weaknesses that enable these attacks (or consequences) to take place.\n\n\n\n### Observed Examples\n- **CVE-2007-0897:** Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans.\n- **CVE-2001-0830:** Sockets not properly closed when attacker repeatedly connects and disconnects from server.\n- **CVE-1999-1127:** Does not shut down named pipe connections if malformed data is sent.\n\n\n\n\n## CWE-911: Improper Update of Reference Count\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.\n\n### Extended Description\nReference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-664\nCanPrecede -> CWE-672\nCanPrecede -> CWE-772\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2002-0574:** chain: reference count is not decremented, leading to memory leak in OS by sending ICMP packets.\n- **CVE-2004-0114:** Reference count for shared memory not decremented when a function fails, potentially allowing unprivileged users to read kernel memory.\n- **CVE-2006-3741:** chain: improper reference count tracking leads to file descriptor consumption\n\n\n\n\n## CWE-282: Improper Ownership Management\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n\n\n### Observed Examples\n- **CVE-1999-1125:** Program runs setuid root but relies on a configuration file owned by a non-root user.\n\n\n\n\n## CWE-1390: Weak Authentication\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.\n\n### Extended Description\n\n\nAttackers may be able to bypass weak authentication faster and/or with less effort than expected.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-30034:** Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).\n- **CVE-2022-35248:** Chat application skips validation when Central Authentication Service (CAS) is enabled, effectively removing the second factor from two-factor authentication\n- **CVE-2021-3116:** Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390)\n\n\n\n\n## CWE-226: Sensitive Information in Resource Not Removed Before Reuse\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.\n\n### Extended Description\n\n\nWhen resources are released, they can be made available for reuse. For example, after memory is de-allocated, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information.\n\n\nEven when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated.\n\n\nThis weakness can apply in hardware, such as when a device or system switches between power, sleep, or debug states during normal operation, or when execution changes to different users or privilege levels.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-459\nChildOf -> CWE-212\nCanPrecede -> CWE-201\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000).\n\n**[Maintenance]** This entry needs modification to clarify the differences with CWE-212. The description also combines two problems that are distinct from the CWE research perspective: the inadvertent transfer of information to another sphere, and improper initialization/shutdown. Some of the associated taxonomy mappings reflect these different uses.\n\n**[Research Gap]** This is frequently found for network packets, but it can also exist in local memory allocation, files, etc.\n\n\n\n### Observed Examples\n- **CVE-2019-3733:** Cryptography library does not clear heap memory before release\n- **CVE-2003-0001:** Ethernet NIC drivers do not pad frames with null bytes, leading to infoleak from malformed packets.\n- **CVE-2003-0291:** router does not clear information from DHCP packets that have been previously used\n\n",
  "keyphrases": {
    "base_query": "## Vulnerability Description\nAn issue has been discovered in GitLab affecting all versions of Gitlab EE/CE before 13.6.7. A potential **resource exhaustion** issue that allowed running or pending jobs to continue even after project was deleted.\n\n### Vulnerability Description Key Phrases\n- **weakness:** **resource exhaustion**\n- **impact:** running or pending jobs continue after project deletion\n- **product:** GitLab EE/CE\n- **version:** before 13.6.7\n\n## CVE Reference Links Content Summary\n```json\n{\n    \"CVE_data_meta\": {\n        \"ID\": \"CVE-2021-22187\",\n        \"ASSIGNER\": \"cve@gitlab.com\",\n        \"STATE\": \"PUBLIC\"\n    },\n    \"affects\": {\n        \"vendor\": {\n            \"vendor_data\": [\n                {\n                    \"vendor_name\": \"Gitlab\",\n                    \"product\": {\n                        \"product_data\": [\n                            {\n                                \"product_name\": \"GitLab\",\n                                \"version\": {\n                                    \"version_data\": [\n                                        {\n                                            \"version_value\": \">=13.4, <13.8.8\"\n                                        },\n                                        {\n                                            \"version_value\": \">=13.9, <13.9.6\"\n                                        },\n                                         {\n                                            \"version_value\": \">=13.10, <13.10.3\"\n                                        }\n                                    ]\n                                }\n                            }\n                        ]\n                    }\n                }\n            ]\n        }\n    },\n    \"data_format\": \"MITRE\",\n    \"data_type\": \"CVE\",\n    \"data_version\": \"4.0\",\n    \"description\": {\n        \"description_data\": [\n            {\n                \"lang\": \"eng\",\n                \"value\": \"A vulnerability was discovered in GitLab versions >=13.4, <13.8.8, >=13.9, <13.9.6 and >=13.10, <13.10.3 that allows an attacker to view the names of private repositories in public projects via GraphQL.\"\n            }\n        ]\n    },\n    \"impact\": {\n        \"cvss\": {\n            \"attackComplexity\": \"LOW\",\n            \"attackVector\": \"NETWORK\",\n            \"availabilityImpact\": \"NONE\",\n            \"baseScore\": 4.3,\n            \"baseSeverity\": \"MEDIUM\",\n            \"confidentialityImpact\": \"LOW\",\n            \"integrityImpact\": \"NONE\",\n            \"privilegesRequired\": \"NONE\",\n            \"scope\": \"UNCHANGED\",\n            \"userInteraction\": \"NONE\",\n            \"vectorString\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N\",\n            \"version\": \"3.1\"\n        }\n    },\n    \"problemtype\": {\n        \"problemtype_data\": [\n            {\n                \"description\": [\n                    {\n                        \"lang\": \"eng\",\n                        \"value\": \"Improper Authorization\"\n                    }\n                ]\n            }\n        ]\n    },\n    \"references\": {\n        \"reference_data\": [\n            {\n                \"name\": \"https://gitlab.com/gitlab-org/cves/-/blob/master/2021/CVE-2021-22187.json\",\n                \"refsource\": \"CONFIRM\",\n                \"url\": \"https://gitlab.com/gitlab-org/cves/-/blob/master/2021/CVE-2021-22187.json\"\n            },\n             {\n                \"name\": \"https://gitlab.com/gitlab-org/gitlab/-/issues/288912\",\n                \"refsource\": \"MISC\",\n                \"url\": \"https://gitlab.com/gitlab-org/gitlab/-/issues/288912\"\n            }\n        ]\n    }\n}\n```\nRoot cause of vulnerability: Improper authorization.\n\nWeaknesses/vulnerabilities present:  A vulnerability in GitLab allows unauthorized viewing of private repository names through a public project via GraphQL.\n\nImpact of exploitation: An attacker can view the names of private repositories associated with a public project.\n\nAttack vectors: Network based. Exploitation occurs through GraphQL queries.\n\nRequired attacker capabilities/position: No special privileges are required. The attacker needs to be able to send GraphQL queries to a vulnerable GitLab instance.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 400 | Uncontrolled Resource Consumption | Class | Discouraged | alternate_terms | 1.000 |\n| 2 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.207 |\n| 3 | 285 | Improper Authorization | Class | Discouraged | sparse | 0.206 |\n| 4 | 1176 | Inefficient CPU Computation | Class | Allowed-with-Review | sparse | 0.196 |\n| 5 | 1333 | Inefficient Regular Expression Complexity | Base | Allowed | sparse | 0.191 |\n| 6 | 772 | Missing Release of Resource after Effective Lifetime | Base | Allowed | dense | 0.537 |\n| 7 | 911 | Improper Update of Reference Count | Base | Allowed | graph | 0.002 |\n| 8 | 282 | Improper Ownership Management | Class | Allowed-with-Review | sparse | 0.190 |\n| 9 | 1390 | Weak Authentication | Class | Allowed-with-Review | sparse | 0.180 |\n| 10 | 226 | Sensitive Information in Resource Not Removed Before Reuse | Base | Allowed | sparse | 0.179 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-400: Uncontrolled Resource Consumption\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.\n\n### Extended Description\n\n\nLimited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the product, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system.\n\n\nThere are at least three distinct scenarios which can commonly lead to resource exhaustion:\n\n\n  - Lack of throttling for the number of allocated resources\n\n  - Losing all references to a resource before reaching the shutdown stage\n\n  - Not closing/returning a resource after processing\n\nResource exhaustion problems are often result due to an incorrect implementation of the following situations:\n\n  - Error conditions and other exceptional circumstances.\n\n  - Confusion over which part of the program is responsible for releasing the resource.\n\n\n\n### Alternative Terms\nResource Exhaustion\n\n### Relationships\nChildOf -> CWE-664\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-400 is intended for incorrect behaviors in which the product is expected to track and restrict how many resources it consumes, but CWE-400 is often misused because it is conflated with the \"technical impact\" of vulnerabilities in which resource consumption occurs. It is sometimes used for low-information vulnerability reports. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Closely analyze the specific mistake that is causing resource consumption, and perform a CWE mapping for that mistake. Consider children/descendants such as CWE-770: Allocation of Resources Without Limits or Throttling, CWE-771: Missing Reference to Active Allocated Resource, CWE-410: Insufficient Resource Pool, CWE-772: Missing Release of Resource after Effective Lifetime, CWE-834: Excessive Iteration, CWE-405: Asymmetric Resource Consumption (Amplification), and others.\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** \"Resource consumption\" could be interpreted as a consequence instead of an insecure behavior, so this entry is being considered for modification. It appears to be referenced too frequently when more precise mappings are available. Some of its children, such as CWE-771, might be better considered as a chain.\n\n**[Theoretical]** Vulnerability theory is largely about how behaviors and resources interact. \"Resource exhaustion\" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect the underlying weaknesses that enable these attacks (or consequences) to take place.\n\n**[Other]** \n\nDatabase queries that take a long time to process are good DoS targets. An attacker would have to write a few lines of Perl code to generate enough traffic to exceed the site's ability to keep up. This would effectively prevent authorized users from using the site at all. Resources can be exploited simply by ensuring that the target machine must do much more work and consume more resources in order to service a request than the attacker must do to initiate a request.\n\n\nA prime example of this can be found in old switches that were vulnerable to \"macof\" attacks (so named for a tool developed by Dugsong). These attacks flooded a switch with random IP and MAC address combinations, therefore exhausting the switch's cache, which held the information of which port corresponded to which MAC addresses. Once this cache was exhausted, the switch would fail in an insecure way and would begin to act simply as a hub, broadcasting all traffic on all ports and allowing for basic sniffing attacks.\n\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2020-7218:** Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service\n- **CVE-2020-3566:** Resource exhaustion in distributed OS because of \"insufficient\" IGMP queue management, as exploited in the wild per CISA KEV.\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-285: Improper Authorization\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\n\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.\n**Reasons:**\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-2960:** Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.\n\n\n\n\n## CWE-1176: Inefficient CPU Computation\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs CPU computations using\n         algorithms that are not as efficient as they could be for the\n         needs of the developer, i.e., the computations can be\n         optimized further.\n\n### Extended Description\n\n\nThis issue can make the product perform more slowly, possibly in ways that are noticeable to the users. If an attacker can influence the amount of computation that must be performed, e.g. by triggering worst-case complexity, then this performance problem might introduce a vulnerability.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-405\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-37734:** Chain: lexer in Java-based GraphQL server does not enforce maximum of tokens early enough (CWE-696), allowing excessive CPU consumption (CWE-1176)\n\n\n\n\n## CWE-1333: Inefficient Regular Expression Complexity\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.\n\n### Extended Description\nSome regular expression engines have a feature called \"backtracking\". If the token cannot match, the engine \"backtracks\" to a position that may result in a different token that can match.\n Backtracking becomes a weakness if all of these conditions are met:\n\n\n  - The number of possible backtracking attempts are exponential relative to the length of the input.\n\n  - The input can fail to match the regular expression.\n\n  - The input can be long enough.\n\n Attackers can create crafted inputs that intentionally cause the regular expression to use excessive backtracking in a way that causes the CPU consumption to spike. \n\n### Alternative Terms\nReDoS: ReDoS is an abbreviation of \"Regular expression Denial of Service\".\nRegular Expression Denial of Service: While this term is attack-focused, this is commonly used to describe the weakness.\nCatastrophic backtracking: This term is used to describe the behavior of the regular expression as a negative technical impact.\n\n### Relationships\nChildOf -> CWE-407\nChildOf -> CWE-407\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2020-5243:** server allows ReDOS with crafted User-Agent strings, due to overlapping capture groups that cause excessive backtracking.\n- **CVE-2021-21317:** npm package for user-agent parser prone to ReDoS due to overlapping capture groups\n- **CVE-2019-16215:** Markdown parser uses inefficient regex when processing a message, allowing users to cause CPU consumption and delay preventing processing of other messages.\n\n\n\n\n## CWE-772: Missing Release of Resource after Effective Lifetime\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.\n\n### Extended Description\nWhen a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-404\nChildOf -> CWE-404\nChildOf -> CWE-404\nChildOf -> CWE-404\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** \"Resource exhaustion\" (CWE-400) is currently treated as a weakness, although it is more like a category of weaknesses that all have the same type of consequence. While this entry treats CWE-400 as a parent in view 1000, the relationship is probably more appropriately described as a chain.\n\n**[Theoretical]** Vulnerability theory is largely about how behaviors and resources interact. \"Resource exhaustion\" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect one of the underlying weaknesses that enable these attacks (or consequences) to take place.\n\n\n\n### Observed Examples\n- **CVE-2007-0897:** Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans.\n- **CVE-2001-0830:** Sockets not properly closed when attacker repeatedly connects and disconnects from server.\n- **CVE-1999-1127:** Does not shut down named pipe connections if malformed data is sent.\n\n\n\n\n## CWE-911: Improper Update of Reference Count\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.\n\n### Extended Description\nReference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-664\nCanPrecede -> CWE-672\nCanPrecede -> CWE-772\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2002-0574:** chain: reference count is not decremented, leading to memory leak in OS by sending ICMP packets.\n- **CVE-2004-0114:** Reference count for shared memory not decremented when a function fails, potentially allowing unprivileged users to read kernel memory.\n- **CVE-2006-3741:** chain: improper reference count tracking leads to file descriptor consumption\n\n\n\n\n## CWE-282: Improper Ownership Management\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n\n\n### Observed Examples\n- **CVE-1999-1125:** Program runs setuid root but relies on a configuration file owned by a non-root user.\n\n\n\n\n## CWE-1390: Weak Authentication\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.\n\n### Extended Description\n\n\nAttackers may be able to bypass weak authentication faster and/or with less effort than expected.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-30034:** Chain: Web UI for a Python RPC framework does not use regex anchors to validate user login emails (CWE-777), potentially allowing bypass of OAuth (CWE-1390).\n- **CVE-2022-35248:** Chat application skips validation when Central Authentication Service (CAS) is enabled, effectively removing the second factor from two-factor authentication\n- **CVE-2021-3116:** Chain: Python-based HTTP Proxy server uses the wrong boolean operators (CWE-480) causing an incorrect comparison (CWE-697) that identifies an authN failure if all three conditions are met instead of only one, allowing bypass of the proxy authentication (CWE-1390)\n\n\n\n\n## CWE-226: Sensitive Information in Resource Not Removed Before Reuse\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.\n\n### Extended Description\n\n\nWhen resources are released, they can be made available for reuse. For example, after memory is de-allocated, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information.\n\n\nEven when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated.\n\n\nThis weakness can apply in hardware, such as when a device or system switches between power, sleep, or debug states during normal operation, or when execution changes to different users or privilege levels.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-459\nChildOf -> CWE-212\nCanPrecede -> CWE-201\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000).\n\n**[Maintenance]** This entry needs modification to clarify the differences with CWE-212. The description also combines two problems that are distinct from the CWE research perspective: the inadvertent transfer of information to another sphere, and improper initialization/shutdown. Some of the associated taxonomy mappings reflect these different uses.\n\n**[Research Gap]** This is frequently found for network packets, but it can also exist in local memory allocation, files, etc.\n\n\n\n### Observed Examples\n- **CVE-2019-3733:** Cryptography library does not clear heap memory before release\n- **CVE-2003-0001:** Ethernet NIC drivers do not pad frames with null bytes, leading to infoleak from malformed packets.\n- **CVE-2003-0291:** router does not clear information from DHCP packets that have been previously used\n\n"
  },
  "timestamp": "2025-04-02 15:35:58",
  "cve_id": "unknown",
  "result_count": 5,
  "results": [
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 5914.735998611825,
      "search_source": "unknown"
    },
    {
      "cwe_id": "770",
      "name": "Allocation of Resources Without Limits or Throttling",
      "score": 5834.747227732862,
      "search_source": "unknown"
    },
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "score": 5809.65846957414,
      "search_source": "unknown"
    },
    {
      "cwe_id": "1333",
      "name": "Inefficient Regular Expression Complexity",
      "score": 5783.154897978347,
      "search_source": "unknown"
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "score": 5778.685886176787,
      "search_source": "unknown"
    }
  ]
}