{
  "retriever": "sparse",
  "query": "## Vulnerability Description\nZoho ManageEngine ADSelfService Plus through 6101 is vulnerable to unauthenticated Remote Code Execution while changing the password.\n\n### Vulnerability Description Key Phrases\n- **impact:** Remote Code Execution\n- **attacker:** unauthenticated\n- **product:** Zoho ManageEngine ADSelfService Plus\n- **version:** through 6101\n- **component:** password change functionality\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's a breakdown of the vulnerability associated with CVE-2021-28958:\n\n**1. Verification of CVE Relevance:**\n\nThe provided content explicitly mentions \"CVE-2021-28958\" and describes a vulnerability in ManageEngine ADSelfService Plus related to an unauthenticated RCE via password change functionality. This aligns with the CVE description (when available).\n\n**2. Root Cause of the Vulnerability:**\nThe root cause is **improper sanitization of user-supplied input** when processing password change requests. Specifically, double quotes within the new password field were not properly escaped when constructing a PowerShell script used internally by the application to handle the password change.\n\n**3. Weaknesses/Vulnerabilities Present:**\n\n*   **PowerShell Script Injection:** The vulnerability allows for arbitrary code injection into a PowerShell script.\n*   **Lack of Input Validation/Sanitization:** The application fails to properly sanitize user-provided input (specifically, the new password field), which enables the injection.\n\n**4. Impact of Exploitation:**\n\n*   **Remote Code Execution (RCE):** Successful exploitation enables an attacker to execute arbitrary commands on the server where ManageEngine ADSelfService Plus is installed. This allows for a complete compromise of the server, leading to data breaches, malware deployment, or denial of service.\n\n**5. Attack Vectors:**\n\n*   **HTTP GET Request:** The exploit is triggered through an unauthenticated HTTP GET request to the `/RestAPI/ChangePasswordAPI` endpoint.\n*   **Malicious Payload in `newPassword` parameter:** A crafted `newPassword` parameter containing injected PowerShell commands is sent within the request.\n\n**6. Required Attacker Capabilities/Position:**\n\n*   **Network Access:** The attacker needs network access to the ManageEngine ADSelfService Plus server.\n*   **No Authentication Required:** The vulnerability is unauthenticated, meaning the attacker doesn't need any valid credentials to exploit it.\n*   **Knowledge of AD Domain:** The attacker must know the Active Directory domain name configured within ADSelfService Plus.\n*   **Target System:** The target system must be running a vulnerable version of ManageEngine ADSelfService Plus.\n\n**Technical Details:**\n\nThe provided exploit script demonstrates the attack by:\n\n1.  Constructing a URL with the `ChangePasswordAPI` endpoint.\n2.  Adding parameters:\n    *   `operation`: `UMCP`\n    *   `loginName`: A valid username (e.g. 'krbtgt').\n    *   `domainName`: The Active Directory domain.\n    *   `umcp`: `true`\n    *   `IS_ENCRYPTED`: `false`\n    *  `oldPassword`: arbitrary value\n    *   `newPassword`: A long string with injected code\n3.  Sending the request. The `newPassword` parameter includes a string that will cause the injected PowerShell to be executed by the server in context of the application.\n\n**Affected Versions:**\n\n*   The content indicates that versions of ManageEngine ADSelfService Plus **prior to 6102** are vulnerable.\n\n**Mitigation:**\n\n*   Upgrade ManageEngine ADSelfService Plus to version 6102 or higher, which contains the fix for this vulnerability.\n\n**Summary:**\n\nCVE-2021-28958 is a critical vulnerability in ManageEngine ADSelfService Plus that allows for unauthenticated remote code execution via PowerShell script injection. It's caused by a lack of input sanitization in the `newPassword` parameter during password change requests. This allows attackers to completely compromise vulnerable servers.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 55 | Path Equivalence: '/./' (Single Dot Directory) | Variant | Allowed | sparse | 0.042 |\n| 2 | 602 | Client-Side Enforcement of Server-Side Security | Class | Allowed-with-Review | sparse | 0.037 |\n| 3 | 348 | Use of Less Trusted Source | Base | Allowed | sparse | 0.036 |\n| 4 | 306 | Missing Authentication for Critical Function | Base | Allowed | sparse | 0.034 |\n| 5 | 425 | Direct Request ('Forced Browsing') | Base | Allowed | sparse | 0.031 |\n| 6 | 620 | Unverified Password Change | Base | Allowed | dense | 0.626 |\n| 7 | 613 | Insufficient Session Expiration | Base | Allowed | graph | 0.002 |\n| 8 | 219 | Storage of File with Sensitive Data Under Web Root | Variant | Allowed | sparse | 0.031 |\n| 9 | 204 | Observable Response Discrepancy | Base | Allowed | sparse | 0.030 |\n| 10 | 918 | Server-Side Request Forgery (SSRF) | Base | Allowed | sparse | 0.030 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-55: Path Equivalence: '/./' (Single Dot Directory)\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-41\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2000-0004:** Server allows remote attackers to read source code for executable files by inserting a . (dot) into the URL.\n- **CVE-2002-0304:** Server allows remote attackers to read password-protected files via a /./ in the HTTP request.\n- **CVE-1999-1083:** Possibly (could be a cleansing error)\n\n\n\n\n## CWE-602: Client-Side Enforcement of Server-Side Security\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n### Extended Description\nWhen the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms, resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\nCanPrecede -> CWE-471\nPeerOf -> CWE-290\nPeerOf -> CWE-300\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-33139:** SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.\n- **CVE-2006-6994:** ASP program allows upload of .asp files by bypassing client-side checks.\n- **CVE-2007-0163:** steganography products embed password information in the carrier file, which can be extracted from a modified client.\n\n\n\n\n## CWE-348: Use of Less Trusted Source\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-345\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2001-0860:** Product uses IP address provided by a client, instead of obtaining it from the packet headers, allowing easier spoofing.\n- **CVE-2004-1950:** Web product uses the IP address in the X-Forwarded-For HTTP header instead of a server variable that uses the connecting IP address, allowing filter bypass.\n- **CVE-2001-0908:** Product logs IP address specified by the client instead of obtaining it from the packet headers, allowing information hiding.\n\n\n\n\n## CWE-306: Missing Authentication for Critical Function\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-287\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-31260:** Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)\n- **CVE-2022-29951:** TCP-based protocol in Programmable Logic Controller (PLC) has no authentication.\n- **CVE-2022-29952:** Condition Monitor firmware uses a protocol that does not require authentication.\n\n\n\n\n## CWE-425: Direct Request ('Forced Browsing')\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n### Extended Description\nWeb applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.\n\n### Alternative Terms\nforced browsing: The \"forced browsing\" term could be misinterpreted to include weaknesses such as CSRF or XSS, so its use is discouraged.\n\n### Relationships\nChildOf -> CWE-862\nChildOf -> CWE-862\nChildOf -> CWE-288\nChildOf -> CWE-424\nCanPrecede -> CWE-471\nCanPrecede -> CWE-98\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection.\n\n**[Theoretical]** \"Forced browsing\" is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically \"authentication bypass\" or \"path disclosure,\" although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables.\n\n\n\n### Observed Examples\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect.\n- **CVE-2004-2144:** Bypass authentication via direct request.\n\n\n\n\n## CWE-620: Unverified Password Change\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nWhen setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.\n\n### Extended Description\nThis could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2007-0681:** Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.\n- **CVE-2000-0944:** Web application password change utility doesn't check the original password.\n\n\n\n\n## CWE-613: Insufficient Session Expiration\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nAccording to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-672\nChildOf -> CWE-672\nCanPrecede -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** The lack of proper session expiration may improve the likely success of certain attacks. For example, an attacker may intercept a session ID, possibly via a network sniffer or Cross-site Scripting attack. Although short session expiration times do not help if a stolen token is immediately used, they will protect against ongoing replaying of the session ID. In another scenario, a user might access a web site from a shared computer (such as at a library, Internet cafe, or open work environment). Insufficient Session Expiration could allow an attacker to use the browser's back button to access web pages previously accessed by the victim.\n\n\n\n\n\n\n## CWE-219: Storage of File with Sensitive Data Under Web Root\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.\n\n### Extended Description\nBesides public-facing web pages and code, products may store sensitive data, code that is not directly invoked, or other files under the web document root of the web server. If the server is not configured or otherwise used to prevent direct access to those files, then attackers may obtain this sensitive data.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-552\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2005-1835:** Data file under web root.\n- **CVE-2005-2217:** Data file under web root.\n- **CVE-2002-1449:** Username/password in data file under web root.\n\n\n\n\n## CWE-204: Observable Response Discrepancy\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\n\n### Extended Description\nThis issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design).\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-203\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** can overlap errors related to escalated privileges\n\n\n\n### Observed Examples\n- **CVE-2002-2094:** This, and others, use \"..\" attacks and monitor error responses, so there is overlap with directory traversal.\n- **CVE-2001-1483:** Enumeration of valid usernames based on inconsistent responses\n- **CVE-2001-1528:** Account number enumeration via inconsistent responses.\n\n\n\n\n## CWE-918: Server-Side Request Forgery (SSRF)\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nXSPA: Cross Site Port Attack\nSSRF: Server-Side Request Forgery\n\n### Relationships\nChildOf -> CWE-441\nChildOf -> CWE-610\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the \"Server\" portion of the SSRF acronym does not necessarily apply.\n\n\n\n### Observed Examples\n- **CVE-2023-32786:** Chain: LLM integration framework has prompt injection (CWE-1427) that allows an attacker to force the service to retrieve data from an arbitrary URL, essentially providing SSRF (CWE-918) and potentially injecting content into downstream tasks.\n- **CVE-2021-26855:** Server Side Request Forgery (SSRF) in mail server, as exploited in the wild per CISA KEV.\n- **CVE-2021-21973:** Server Side Request Forgery in cloud platform, as exploited in the wild per CISA KEV.\n\n",
  "keyphrases": {},
  "timestamp": "2025-04-02 10:12:12",
  "cve_id": "unknown",
  "result_count": 5,
  "results": [
    {
      "cwe_id": "918",
      "name": "Server-Side Request Forgery (SSRF)",
      "score": 4316.901859066927,
      "search_source": "base_query"
    },
    {
      "cwe_id": "425",
      "name": "Direct Request ('Forced Browsing')",
      "score": 4288.22822318125,
      "search_source": "base_query"
    },
    {
      "cwe_id": "306",
      "name": "Missing Authentication for Critical Function",
      "score": 4251.051940426441,
      "search_source": "base_query"
    },
    {
      "cwe_id": "204",
      "name": "Observable Response Discrepancy",
      "score": 4226.203957764292,
      "search_source": "base_query"
    },
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "score": 4167.105769570614,
      "search_source": "base_query"
    }
  ]
}