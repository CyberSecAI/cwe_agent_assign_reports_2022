{
  "retriever": "sparse",
  "query": "## Vulnerability Description\nMoby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where the data directory (typically `/var/lib/docker`) contained subdirectories with insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as `setuid`), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files. This bug has been fixed in Moby (Docker Engine) 20.10.9. Users should update to this version as soon as possible. Running containers should be stopped and restarted for the permissions to be fixed. For users unable to upgrade limit access to the host to trusted users. Limit access to host volumes to trusted containers.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **insufficiently restricted permissions in data directory**\n- **impact:** discover, read, modify files\n- **attacker:** unprivileged Linux users\n- **product:** Moby (Docker Engine)\n\n## CVE Reference Links Content Summary\n```\n{\n  \"vulnerability\": {\n    \"root_cause\": \"The data directory (typically `/var/lib/docker`) contained subdirectories with insufficiently restricted permissions.\",\n    \"weaknesses\": [\n      \"Incorrect Permission Assignment for Critical Resource\"\n    ],\n    \"impact\": \"Unprivileged Linux users could traverse directory contents and execute programs. If containers included executable programs with extended permission bits (such as `setuid`), unprivileged Linux users could discover and execute those programs. If the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files.\",\n    \"attack_vectors\": [\n      \"Local access\"\n    ],\n    \"required_attacker_capabilities\": \"An unprivileged user on the host system is able to exploit the vulnerability.\"\n  },\n  \"affected_versions\": [\n    \"< 20.10.9\"\n  ],\n  \"patched_versions\": [\n    \"20.10.9\"\n  ],\n    \"cvss\": \"CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L\"\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 277 | Insecure Inherited Permissions | Variant | Allowed | sparse | 1.702 |\n| 2 | 286 | Incorrect User Management | Class | Allowed-with-Review | sparse | 1.090 |\n| 3 | 732 | Incorrect Permission Assignment for Critical Resource | Class | Allowed-with-Review | sparse | 0.925 |\n| 4 | 61 | UNIX Symbolic Link (Symlink) Following | Compound | Allowed | sparse | 0.858 |\n| 5 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.845 |\n| 6 | 770 | Allocation of Resources Without Limits or Throttling | Base | Allowed | dense | 0.445 |\n| 7 | 22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | Base | Allowed | graph | 0.003 |\n| 8 | 59 | Improper Link Resolution Before File Access ('Link Following') | Base | Allowed | sparse | 0.834 |\n| 9 | 668 | Exposure of Resource to Wrong Sphere | Class | Discouraged | sparse | 0.832 |\n| 10 | 367 | Time-of-check Time-of-use (TOCTOU) Race Condition | Base | Allowed | sparse | 0.832 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-277: Insecure Inherited Permissions\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nA product defines a set of insecure permissions that are inherited by objects that are created by the program.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2005-1841:** User's umask is used when creating temp files.\n- **CVE-2002-1786:** Insecure umask for core dumps [is the umask preserved or assigned?].\n\n\n\n\n## CWE-286: Incorrect User Management\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not properly manage a user within its environment.\n\n### Extended Description\nUsers can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n**[Maintenance]** This item needs more work. Possible sub-categories include: user in wrong group, and user with insecure profile or \"configuration\". It also might be better expressed as a category than a weakness.\n\n\n\n### Observed Examples\n- **CVE-2022-36109:** Containerization product does not record a user's supplementary group ID, allowing bypass of group restrictions.\n- **CVE-1999-1193:** Operating system assigns user to privileged wheel group, allowing the user to gain root privileges.\n\n\n\n\n## CWE-732: Incorrect Permission Assignment for Critical Resource\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\n### Extended Description\nWhen a resource is given a permission setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution, or sensitive user data. For example, consider a misconfigured storage account for the cloud that can be read or written by a public or anonymous user.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** While the name itself indicates an assignment of permissions for resources, this is often misused for vulnerabilities in which \"permissions\" are not checked, which is an \"authorization\" weakness (CWE-285 or descendants) within CWE's model [REF-1287].\n**Comments:** Closely analyze the specific mistake that is allowing the resource to be exposed, and perform a CWE mapping for that mistake.\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n\n\n### Observed Examples\n- **CVE-2022-29527:** Go application for cloud management creates a world-writable sudoers file that allows local attackers to inject sudo rules and escalate privileges to root by winning a race condition.\n- **CVE-2009-3482:** Anti-virus product sets insecure \"Everyone: Full Control\" permissions for files under the \"Program Files\" folder, allowing attackers to replace executables with Trojan horses.\n- **CVE-2009-3897:** Product creates directories with 0777 permissions at installation, allowing users to gain privileges and access a socket used for authentication.\n\n\n\n\n## CWE-61: UNIX Symbolic Link (Symlink) Following\n**Abstraction:** Compound\n**Status:** Incomplete\n\n### Description\nThe product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.\n\n### Extended Description\nA product that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.\n\n### Alternative Terms\nSymlink following\nsymlink vulnerability\n\n### Relationships\nChildOf -> CWE-59\nRequires -> CWE-362\nRequires -> CWE-340\nRequires -> CWE-386\nRequires -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n**Comments:** While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine which weaknesses allow symlink following to occur, and map to those weaknesses. For example, predictable file names might be intended functionality, but creation in a directory with insecure permissions might not.\n**Reasons:**\n- Other\n\n\n### Additional Notes\n**[Research Gap]** \n\nSymlink vulnerabilities are regularly found in C and shell programs, but all programming languages can have this problem. Even shell programs are probably under-reported.\n\n\n\"Second-order symlink vulnerabilities\" may exist in programs that invoke other programs that follow symlinks. They are rarely reported but are likely to be fairly common when process invocation is used [REF-493].\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-770: Allocation of Resources Without Limits or Throttling\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n### Extended Description\n\n\nCode frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-400\nChildOf -> CWE-665\nChildOf -> CWE-400\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This entry is different from uncontrolled resource consumption (CWE-400) in that there are other weaknesses that are related to inability to control resource consumption, such as holding on to a resource too long after use, or not correctly keeping track of active resources so that they can be managed and released when they are finished (CWE-771).\n\n**[Theoretical]** Vulnerability theory is largely about how behaviors and resources interact. \"Resource exhaustion\" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect one of the underlying weaknesses that enable these attacks (or consequences) to take place.\n\n\n\n### Observed Examples\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2009-4017:** Language interpreter does not restrict the number of temporary files being created when handling a MIME request with a large number of parts..\n- **CVE-2009-2726:** Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption.\n\n\n\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n### Extended Description\n\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n\n\n### Alternative Terms\nDirectory traversal\nPath traversal: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\n\n**[Relationship]** Pathname equivalence can be regarded as a type of canonicalization error.\n\n**[Relationship]** Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).\n\n**[Terminology]** \n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n\n\n**[Research Gap]** Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.\n\n**[Research Gap]** \n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\ninsecure temporary file: Some people use the phrase \"insecure temporary file\" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Theoretical]** \n\nLink following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.\n\n\nSome potential factors are race conditions, permissions, and predictability.\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n### Extended Description\n\n\nResources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.\n\n\nA separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.\n\n\nIn either case, the end result is that a resource has been exposed to the wrong party.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-664\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n**Comments:** Closely analyze the specific mistake that is allowing the resource to be exposed, and perform a CWE mapping for that mistake.\n**Reasons:**\n- Frequent Misuse\n- Abstraction\n\n\n### Additional Notes\n**[Theoretical]** A \"control sphere\" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for \"administrators\" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be \"users who are authenticated to the operating system on which the product is installed.\" Each sphere has different sets of actors and allowable behaviors.\n\n\n\n\n\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n### Extended Description\nThis weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs.\n\n### Alternative Terms\nTOCTTOU: The TOCTTOU acronym expands to \"Time Of Check To Time Of Use\".\nTOCCTOU: The TOCCTOU acronym is most likely a typo of TOCTTOU, but it has been used in some influential documents, so the typo is repeated fairly frequently.\n\n### Relationships\nChildOf -> CWE-362\nChildOf -> CWE-362\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** TOCTOU issues do not always involve symlinks, and not every symlink issue is a TOCTOU problem.\n\n**[Research Gap]** Non-symlink TOCTOU issues are not reported frequently, but they are likely to occur in code that attempts to be secure.\n\n\n\n### Observed Examples\n- **CVE-2015-1743:** TOCTOU in sandbox process allows installation of untrusted browser add-ons by replacing a file after it has been verified, but before it is executed\n- **CVE-2003-0813:** A multi-threaded race condition allows remote attackers to cause a denial of service (crash or reboot) by causing two threads to process the same RPC request, which causes one thread to use memory after it has been freed.\n- **CVE-2004-0594:** PHP flaw allows remote attackers to execute arbitrary code by aborting execution before the initialization of key data structures is complete.\n\n",
  "keyphrases": {
    "base_query": "## Vulnerability Description\nMoby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where the data directory (typically `/var/lib/docker`) contained subdirectories with insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as `setuid`), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files. This bug has been fixed in Moby (Docker Engine) 20.10.9. Users should update to this version as soon as possible. Running containers should be stopped and restarted for the permissions to be fixed. For users unable to upgrade limit access to the host to trusted users. Limit access to host volumes to trusted containers.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **insufficiently restricted permissions in data directory**\n- **impact:** discover, read, modify files\n- **attacker:** unprivileged Linux users\n- **product:** Moby (Docker Engine)\n\n## CVE Reference Links Content Summary\n```\n{\n  \"vulnerability\": {\n    \"root_cause\": \"The data directory (typically `/var/lib/docker`) contained subdirectories with insufficiently restricted permissions.\",\n    \"weaknesses\": [\n      \"Incorrect Permission Assignment for Critical Resource\"\n    ],\n    \"impact\": \"Unprivileged Linux users could traverse directory contents and execute programs. If containers included executable programs with extended permission bits (such as `setuid`), unprivileged Linux users could discover and execute those programs. If the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files.\",\n    \"attack_vectors\": [\n      \"Local access\"\n    ],\n    \"required_attacker_capabilities\": \"An unprivileged user on the host system is able to exploit the vulnerability.\"\n  },\n  \"affected_versions\": [\n    \"< 20.10.9\"\n  ],\n  \"patched_versions\": [\n    \"20.10.9\"\n  ],\n    \"cvss\": \"CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L\"\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 277 | Insecure Inherited Permissions | Variant | Allowed | sparse | 1.702 |\n| 2 | 286 | Incorrect User Management | Class | Allowed-with-Review | sparse | 1.090 |\n| 3 | 732 | Incorrect Permission Assignment for Critical Resource | Class | Allowed-with-Review | sparse | 0.925 |\n| 4 | 61 | UNIX Symbolic Link (Symlink) Following | Compound | Allowed | sparse | 0.858 |\n| 5 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.845 |\n| 6 | 770 | Allocation of Resources Without Limits or Throttling | Base | Allowed | dense | 0.445 |\n| 7 | 22 | Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') | Base | Allowed | graph | 0.003 |\n| 8 | 59 | Improper Link Resolution Before File Access ('Link Following') | Base | Allowed | sparse | 0.834 |\n| 9 | 668 | Exposure of Resource to Wrong Sphere | Class | Discouraged | sparse | 0.832 |\n| 10 | 367 | Time-of-check Time-of-use (TOCTOU) Race Condition | Base | Allowed | sparse | 0.832 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-277: Insecure Inherited Permissions\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nA product defines a set of insecure permissions that are inherited by objects that are created by the program.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2005-1841:** User's umask is used when creating temp files.\n- **CVE-2002-1786:** Insecure umask for core dumps [is the umask preserved or assigned?].\n\n\n\n\n## CWE-286: Incorrect User Management\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not properly manage a user within its environment.\n\n### Extended Description\nUsers can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n**[Maintenance]** This item needs more work. Possible sub-categories include: user in wrong group, and user with insecure profile or \"configuration\". It also might be better expressed as a category than a weakness.\n\n\n\n### Observed Examples\n- **CVE-2022-36109:** Containerization product does not record a user's supplementary group ID, allowing bypass of group restrictions.\n- **CVE-1999-1193:** Operating system assigns user to privileged wheel group, allowing the user to gain root privileges.\n\n\n\n\n## CWE-732: Incorrect Permission Assignment for Critical Resource\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\n### Extended Description\nWhen a resource is given a permission setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution, or sensitive user data. For example, consider a misconfigured storage account for the cloud that can be read or written by a public or anonymous user.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** While the name itself indicates an assignment of permissions for resources, this is often misused for vulnerabilities in which \"permissions\" are not checked, which is an \"authorization\" weakness (CWE-285 or descendants) within CWE's model [REF-1287].\n**Comments:** Closely analyze the specific mistake that is allowing the resource to be exposed, and perform a CWE mapping for that mistake.\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n\n\n### Observed Examples\n- **CVE-2022-29527:** Go application for cloud management creates a world-writable sudoers file that allows local attackers to inject sudo rules and escalate privileges to root by winning a race condition.\n- **CVE-2009-3482:** Anti-virus product sets insecure \"Everyone: Full Control\" permissions for files under the \"Program Files\" folder, allowing attackers to replace executables with Trojan horses.\n- **CVE-2009-3897:** Product creates directories with 0777 permissions at installation, allowing users to gain privileges and access a socket used for authentication.\n\n\n\n\n## CWE-61: UNIX Symbolic Link (Symlink) Following\n**Abstraction:** Compound\n**Status:** Incomplete\n\n### Description\nThe product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.\n\n### Extended Description\nA product that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.\n\n### Alternative Terms\nSymlink following\nsymlink vulnerability\n\n### Relationships\nChildOf -> CWE-59\nRequires -> CWE-362\nRequires -> CWE-340\nRequires -> CWE-386\nRequires -> CWE-732\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.\n**Comments:** While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine which weaknesses allow symlink following to occur, and map to those weaknesses. For example, predictable file names might be intended functionality, but creation in a directory with insecure permissions might not.\n**Reasons:**\n- Other\n\n\n### Additional Notes\n**[Research Gap]** \n\nSymlink vulnerabilities are regularly found in C and shell programs, but all programming languages can have this problem. Even shell programs are probably under-reported.\n\n\n\"Second-order symlink vulnerabilities\" may exist in programs that invoke other programs that follow symlinks. They are rarely reported but are likely to be fairly common when process invocation is used [REF-493].\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n\n\n\n## CWE-770: Allocation of Resources Without Limits or Throttling\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n### Extended Description\n\n\nCode frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-400\nChildOf -> CWE-665\nChildOf -> CWE-400\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This entry is different from uncontrolled resource consumption (CWE-400) in that there are other weaknesses that are related to inability to control resource consumption, such as holding on to a resource too long after use, or not correctly keeping track of active resources so that they can be managed and released when they are finished (CWE-771).\n\n**[Theoretical]** Vulnerability theory is largely about how behaviors and resources interact. \"Resource exhaustion\" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect one of the underlying weaknesses that enable these attacks (or consequences) to take place.\n\n\n\n### Observed Examples\n- **CVE-2022-21668:** Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).\n- **CVE-2009-4017:** Language interpreter does not restrict the number of temporary files being created when handling a MIME request with a large number of parts..\n- **CVE-2009-2726:** Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption.\n\n\n\n\n## CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n### Extended Description\n\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n\n\n### Alternative Terms\nDirectory traversal\nPath traversal: \"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused.\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.\n\n**[Relationship]** Pathname equivalence can be regarded as a type of canonicalization error.\n\n**[Relationship]** Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not).\n\n**[Terminology]** \n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n\n\n**[Research Gap]** Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap.\n\n**[Research Gap]** \n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n\n\n\n\n### Observed Examples\n- **CVE-2024-37032:** Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2022-45918:** Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)\n\n\n\n\n## CWE-59: Improper Link Resolution Before File Access ('Link Following')\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\ninsecure temporary file: Some people use the phrase \"insecure temporary file\" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.\nZip Slip: \"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59).\n\n### Relationships\nChildOf -> CWE-706\nChildOf -> CWE-706\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Theoretical]** \n\nLink following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.\n\n\nSome potential factors are race conditions, permissions, and predictability.\n\n\n\n\n### Observed Examples\n- **CVE-1999-1386:** Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.\n- **CVE-2000-1178:** Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.\n- **CVE-2004-0217:** Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.\n\n\n\n\n## CWE-668: Exposure of Resource to Wrong Sphere\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.\n\n### Extended Description\n\n\nResources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.\n\n\nA separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.\n\n\nIn either case, the end result is that a resource has been exposed to the wrong party.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-664\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.\n**Comments:** Closely analyze the specific mistake that is allowing the resource to be exposed, and perform a CWE mapping for that mistake.\n**Reasons:**\n- Frequent Misuse\n- Abstraction\n\n\n### Additional Notes\n**[Theoretical]** A \"control sphere\" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for \"administrators\" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be \"users who are authenticated to the operating system on which the product is installed.\" Each sphere has different sets of actors and allowable behaviors.\n\n\n\n\n\n\n## CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\n### Extended Description\nThis weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs.\n\n### Alternative Terms\nTOCTTOU: The TOCTTOU acronym expands to \"Time Of Check To Time Of Use\".\nTOCCTOU: The TOCCTOU acronym is most likely a typo of TOCTTOU, but it has been used in some influential documents, so the typo is repeated fairly frequently.\n\n### Relationships\nChildOf -> CWE-362\nChildOf -> CWE-362\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** TOCTOU issues do not always involve symlinks, and not every symlink issue is a TOCTOU problem.\n\n**[Research Gap]** Non-symlink TOCTOU issues are not reported frequently, but they are likely to occur in code that attempts to be secure.\n\n\n\n### Observed Examples\n- **CVE-2015-1743:** TOCTOU in sandbox process allows installation of untrusted browser add-ons by replacing a file after it has been verified, but before it is executed\n- **CVE-2003-0813:** A multi-threaded race condition allows remote attackers to cause a denial of service (crash or reboot) by causing two threads to process the same RPC request, which causes one thread to use memory after it has been freed.\n- **CVE-2004-0594:** PHP flaw allows remote attackers to execute arbitrary code by aborting execution before the initialization of key data structures is complete.\n\n"
  },
  "timestamp": "2025-04-02 12:02:41",
  "cve_id": "unknown",
  "result_count": 5,
  "results": [
    {
      "cwe_id": "59",
      "name": "Improper Link Resolution Before File Access ('Link Following')",
      "score": 6878.219671098119,
      "search_source": "unknown"
    },
    {
      "cwe_id": "22",
      "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
      "score": 6491.879631332686,
      "search_source": "unknown"
    },
    {
      "cwe_id": "367",
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
      "score": 6464.748604785439,
      "search_source": "unknown"
    },
    {
      "cwe_id": "61",
      "name": "UNIX Symbolic Link (Symlink) Following",
      "score": 6440.261602264619,
      "search_source": "unknown"
    },
    {
      "cwe_id": "23",
      "name": "Relative Path Traversal",
      "score": 6277.1289293935,
      "search_source": "unknown"
    }
  ]
}