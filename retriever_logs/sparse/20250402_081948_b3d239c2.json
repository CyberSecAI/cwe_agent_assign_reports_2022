{
  "retriever": "sparse",
  "query": "## Vulnerability Description\nDisclosure of sensitive information to an unauthorized user vulnerability in Buffalo broadband routers (BHR-4GRV firmware Ver.1.99 and prior, DWR-HP-G300NH firmware Ver.1.83 and prior, HW-450HP-ZWE firmware Ver.1.99 and prior, WHR-300HP firmware Ver.1.99 and prior, WHR-300 firmware Ver.1.99 and prior, WHR-G301N firmware Ver.1.86 and prior, WHR-HP-G300N firmware Ver.1.99 and prior, WHR-HP-GN firmware Ver.1.86 and prior, WPL-05G300 firmware Ver.1.87 and prior, WZR-450HP-CWT firmware Ver.1.99 and prior, WZR-450HP-UB firmware Ver.1.99 and prior, WZR-HP-AG300H firmware Ver.1.75 and prior, WZR-HP-G300NH firmware Ver.1.83 and prior, WZR-HP-G301NH firmware Ver.1.83 and prior, WZR-HP-G302H firmware Ver.1.85 and prior, WZR-HP-G450H firmware Ver.1.89 and prior, WZR-300HP firmware Ver.1.99 and prior, WZR-450HP firmware Ver.1.99 and prior, WZR-600DHP firmware Ver.1.99 and prior, WZR-D1100H firmware Ver.1.99 and prior, FS-HP-G300N firmware Ver.3.32 and prior, FS-600DHP firmware Ver.3.38 and prior, FS-R600DHP firmware Ver.3.39 and prior, and FS-G300N firmware Ver.3.13 and prior) allows remote unauthenticated attackers to obtain information such as configuration via unspecified vectors.\n\n### Vulnerability Description Key Phrases\n- **impact:** obtain configuration\n- **vector:** unspecified vectors\n- **attacker:** remote unauthenticated attackers\n- **product:** Buffalo broadband routers and BHR-4GRV and DWR-HP-G300NH and HW-450HP-ZWE and WHR-300HP and WHR-300 and WHR-G301N and WHR-HP-G300N and WHR-HP-GN and WPL-05G300 and WZR-450HP-CWT and WZR-450HP-UB and WZR-HP-AG300H and WZR-HP-G300NH and WZR-HP-G301NH and WZR-HP-G302H and WZR-HP-G450H and WZR-300HP and WZR-450HP and WZR-600DHP and WZR-D1100H and FS-HP-G300N and FS-600DHP and FS-R600DHP and FS-G300N\n- **version:** Ver.1.99 and prior and Ver.1.83 and prior and Ver.1.99 and prior and Ver.1.99 and prior and Ver.1.99 and prior and Ver.1.86 and prior and Ver.1.99 and prior and Ver.1.86 and prior and Ver.1.87 and prior and Ver.1.99 and prior and Ver.1.99 and prior and Ver.1.75 and prior and Ver.1.83 and prior and Ver.1.83 and prior and Ver.1.85 and prior and Ver.1.89 and prior and Ver.1.99 and prior and Ver.1.99 and prior and Ver.1.99 and prior and Ver.1.99 and prior and Ver.3.32 and prior and Ver.3.38 and prior and Ver.3.39 and prior and Ver.3.13 and prior\n\n## CVE Reference Links Content Summary\n```\n{\n  \"CVE-2021-3511\": {\n    \"Root cause\": \"The root cause is not explicitly mentioned in the document but it involves disclosure of sensitive information.\",\n    \"Weaknesses\": [\n      \"CWE-200: Exposure of Sensitive Information to an Unauthorized Actor\"\n    ],\n    \"Impact\": \"An unauthenticated network-adjacent attacker can potentially gain access to sensitive information, such as configurations.\",\n    \"Attack vectors\": \"Network-adjacent access.\",\n     \"Required attacker capabilities\": \"The attacker needs to be on the same network segment as the vulnerable device, and does not need any authentication.\"\n  }\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 912 | Hidden Functionality | Class | Allowed-with-Review | sparse | 1.025 |\n| 2 | 288 | Authentication Bypass Using an Alternate Path or Channel | Base | Allowed | sparse | 0.984 |\n| 3 | 284 | Improper Access Control | Pillar | Discouraged | sparse | 0.659 |\n| 4 | 327 | Use of a Broken or Risky Cryptographic Algorithm | Class | Allowed-with-Review | sparse | 0.409 |\n| 5 | 303 | Incorrect Implementation of Authentication Algorithm | Base | Allowed | sparse | 0.390 |\n| 6 | 77 | Improper Neutralization of Special Elements used in a Command ('Command Injection') | Class | Allowed-with-Review | dense | 0.647 |\n| 7 | 184 | Incomplete List of Disallowed Inputs | Base | Allowed | graph | 0.002 |\n| 8 | 291 | Reliance on IP Address for Authentication | Variant | Allowed | sparse | 0.353 |\n| 9 | 939 | Improper Authorization in Handler for Custom URL Scheme | Base | Allowed | sparse | 0.342 |\n| 10 | 1336 | Improper Neutralization of Special Elements Used in a Template Engine | Base | Allowed | sparse | 0.333 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-912: Hidden Functionality\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.\n\n### Extended Description\nHidden functionality can take many forms, such as intentionally malicious code, \"Easter Eggs\" that contain extraneous functionality such as games, developer-friendly shortcuts that reduce maintenance or support costs such as hard-coded accounts, etc. From a security perspective, even when the functionality is not intentionally malicious or damaging, it can increase the product's attack surface and expose additional weaknesses beyond what is already exposed by the intended functionality. Even if it is not easily accessible, the hidden functionality could be useful for attacks that modify the control flow of the application.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-684\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-31260:** Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)\n- **CVE-2022-3203:** A wireless access point manual specifies that the only method of configuration is via web interface (CWE-1059), but there is an undisclosed telnet server that was activated by default (CWE-912).\n\n\n\n\n## CWE-288: Authentication Bypass Using an Alternate Path or Channel\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product requires authentication, but the product has an alternate path or channel that does not require authentication.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-306\nChildOf -> CWE-284\nPeerOf -> CWE-420\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** overlaps Unprotected Alternate Channel\n\n\n\n### Observed Examples\n- **CVE-2000-1179:** Router allows remote attackers to read system logs without authentication by directly connecting to the login screen and typing certain control characters.\n- **CVE-1999-1454:** Attackers with physical access to the machine may bypass the password prompt by pressing the ESC (Escape) key.\n- **CVE-1999-1077:** OS allows local attackers to bypass the password protection of idled sessions via the programmer's switch or CMD-PWR keyboard sequence, which brings up a debugger that the attacker can use to disable the lock.\n\n\n\n\n## CWE-284: Improper Access Control\n**Abstraction:** Pillar\n**Status:** Incomplete\n\n### Description\nThe product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n### Extended Description\n\n\nAccess control involves the use of several protection mechanisms such as:\n\n\n  - Authentication (proving the identity of an actor)\n\n  - Authorization (ensuring that a given actor can access a resource), and\n\n  - Accountability (tracking of activities that were performed)\n\nWhen any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc.\n\nThere are two distinct behaviors that can introduce access control weaknesses:\n\n\n  - Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.\n\n  - Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.\n\n\n\n### Alternative Terms\nAuthorization: The terms \"access control\" and \"authorization\" are often used interchangeably, although many people have distinct definitions. The CWE usage of \"access control\" is intended as a general term for the various mechanisms that restrict which users can access which resources, and \"authorization\" is more narrowly defined. It is unlikely that there will be community consensus on the use of these terms.\n\n### Relationships\nNone\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-284 is extremely high-level, a Pillar. Its name, \"Improper Access Control,\" is often misused in low-information vulnerability reports [REF-1287] or by active use of the OWASP Top Ten, such as \"A01:2021-Broken Access Control\". It is not useful for trend analysis.\n**Comments:** Consider using descendants of CWE-284 that are more specific to the kind of access control involved, such as those involving authorization (Missing Authorization (CWE-862), Incorrect Authorization (CWE-863), Incorrect Permission Assignment for Critical Resource (CWE-732), etc.); authentication (Missing Authentication (CWE-306) or Weak Authentication (CWE-1390)); Incorrect User Management (CWE-286); Improper Restriction of Communication Channel to Intended Endpoints (CWE-923); etc.\n**Reasons:**\n- Frequent Misuse\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n- CWE-306: Missing Authentication\n- CWE-1390: Weak Authentication\n- CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n\n\n### Additional Notes\n**[Maintenance]** \n\nThis entry needs more work. Possible sub-categories include:\n\n\n  - Trusted group includes undesired entities (partially covered by CWE-286)\n\n  - Group can perform undesired actions\n\n  - ACL parse error does not fail closed\n\n\n\n\n\n### Observed Examples\n- **CVE-2022-24985:** A form hosting website only checks the session authentication status for a single form, making it possible to bypass authentication when there are multiple forms\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect\n\n\n\n\n## CWE-327: Use of a Broken or Risky Cryptographic Algorithm\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product uses a broken or risky cryptographic algorithm or protocol.\n\n### Extended Description\n\n\nCryptographic algorithms are the methods by which data is scrambled to prevent observation or influence by unauthorized actors. Insecure cryptography can be exploited to expose sensitive information, modify data in unexpected ways, spoof identities of other users or devices, or other impacts.\n\n\nIt is very difficult to produce a secure algorithm, and even high-profile algorithms by accomplished cryptographic experts have been broken. Well-known techniques exist to break or weaken various kinds of cryptography. Accordingly, there are a small number of well-understood and heavily studied algorithms that should be used by most products. Using a non-standard or known-insecure algorithm is dangerous because a determined adversary may be able to break the algorithm and compromise whatever data has been protected.\n\n\nSince the state of cryptography advances so rapidly, it is common for an algorithm to be considered \"unsafe\" even if it was once thought to be strong. This can happen when new attacks are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought.\n\n\nFor a number of reasons, this weakness is even more challenging to manage with hardware deployment of cryptographic algorithms as opposed to software implementation. First, if a flaw is discovered with hardware-implemented cryptography, the flaw cannot be fixed in most cases without a recall of the product, because hardware is not easily replaceable like software. Second, because the hardware product is expected to work for years, the adversary's computing power will only increase over time.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\nPeerOf -> CWE-311\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** Since CWE 4.4, various cryptography-related entries, including CWE-327 and CWE-1240, have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-30273:** SCADA-based protocol supports a legacy encryption mode that uses Tiny Encryption Algorithm (TEA) in ECB mode, which leaks patterns in messages and cannot protect integrity\n- **CVE-2022-30320:** Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.\n- **CVE-2008-3775:** Product uses \"ROT-25\" to obfuscate the password in the registry.\n\n\n\n\n## CWE-303: Incorrect Implementation of Authentication Algorithm\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.\n\n### Extended Description\nThis incorrect implementation may allow authentication to be bypassed.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2003-0750:** Conditional should have been an 'or' not an 'and'.\n\n\n\n\n## CWE-77: Improper Neutralization of Special Elements used in a Command ('Command Injection')\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n### Extended Description\n\n\nMany protocols and products have their own custom command language. While OS or shell command strings are frequently discovered and targeted, developers may not realize that these other command languages might also be vulnerable to attacks.\n\n\n### Alternative Terms\nCommand injection: an attack-oriented phrase for this weakness. Note: often used when \"OS command injection\" (CWE-78) was intended.\n\n### Relationships\nChildOf -> CWE-74\nChildOf -> CWE-74\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** CWE-77 is often misused when OS command injection (CWE-78) was intended instead [REF-1287].\n**Comments:** Ensure that the analysis focuses on the root-cause error that allows the execution of commands, as there are many weaknesses that can lead to this consequence. See Terminology Notes. If the weakness involves a command language besides OS shell invocation, then CWE-77 could be used.\n**Reasons:**\n- Frequent Misuse\n**Suggested Alternatives:**\n- CWE-78: OS Command Injection\n\n\n### Additional Notes\n**[Terminology]** \n\nThe \"command injection\" phrase carries different meanings, either as an attack or as a technical impact. The most common usage of \"command injection\" refers to the more-accurate OS command injection (CWE-78), but there are many command languages.\n\n\nIn vulnerability-focused analysis, the phrase may refer to any situation in which the adversary can execute commands of their own choosing, i.e., the focus is on the risk and/or technical impact of exploitation. Many proof-of-concept exploits focus on the ability to execute commands and may emphasize \"command injection.\" However, there are dozens of weaknesses that can allow execution of commands. That is, the ability to execute commands could be resultant from another weakness.\n\n\nTo some, \"command injection\" can include cases in which the functionality intentionally allows the user to specify an entire command, which is then executed. In this case, the root cause weakness might be related to missing or incorrect authorization, since an adversary should not be able to specify arbitrary commands, but some users or admins are allowed.\n\n\nCWE-77 and its descendants are specifically focused on behaviors in which the product is intentionally building a command to execute, and the adversary can inject separators into the command or otherwise change the command being executed.\n\n\n**[Other]** \n\nCommand injection is a common problem with wrapper programs.\n\n\n\n\n### Observed Examples\n- **CVE-2022-1509:** injection of sed script syntax (\"sed injection\")\n- **CVE-2024-5184:** API service using a large generative AI model allows direct prompt injection to leak hard-coded system prompts or execute other prompts.\n- **CVE-2020-11698:** anti-spam product allows injection of SNMP commands into confiuration file\n\n\n\n\n## CWE-184: Incomplete List of Disallowed Inputs\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nDenylist / Deny List: This is used by CWE and CAPEC instead of other commonly-used terms. Its counterpart is allowlist.\nBlocklist / Block List: This is often used by security tools such as firewalls, email or web gateways, proxies, etc.\nBlacklist / Black List: This term is frequently used, but usage has been declining as organizations have started to adopt other terms.\n\n### Relationships\nChildOf -> CWE-693\nChildOf -> CWE-1023\nCanPrecede -> CWE-79\nCanPrecede -> CWE-78\nCanPrecede -> CWE-434\nCanPrecede -> CWE-98\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** \n\nMultiple interpretation errors can indirectly introduce inputs that should be disallowed. For example, a list of dangerous shell metacharacters might not include a metacharacter that only has meaning in one particular shell, not all of them; or a check for XSS manipulations might ignore an unusual construct that is supported by one web browser, but not others.\n\n\n\n\n### Observed Examples\n- **CVE-2024-4315:** Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.\n- **CVE-2008-2309:** product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning\n- **CVE-2005-2782:** PHP remote file inclusion in web application that filters \"http\" and \"https\" URLs, but not \"ftp\".\n\n\n\n\n## CWE-291: Reliance on IP Address for Authentication\n**Abstraction:** Variant\n**Status:** Incomplete\n\n### Description\nThe product uses an IP address for authentication.\n\n### Extended Description\nIP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-290\nChildOf -> CWE-923\nChildOf -> CWE-471\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-30319:** S-bus functionality in a home automation product performs access control using an IP allowlist, which can be bypassed by a forged IP address.\n\n\n\n\n## CWE-939: Improper Authorization in Handler for Custom URL Scheme\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.\n\n### Extended Description\nMobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-862\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2013-5725:** URL scheme has action replace which requires no user prompt and allows remote attackers to perform undesired actions.\n- **CVE-2013-5726:** URL scheme has action follow and favorite which allows remote attackers to force user to perform undesired actions.\n\n\n\n\n## CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.\n\n### Extended Description\n\n\nMany web applications use template engines that allow developers to insert externally-influenced values into free text or messages in order to generate a full web page, document, message, etc. Such engines include Twig, Jinja2, Pug, Java Server Pages, FreeMarker, Velocity, ColdFusion, Smarty, and many others - including PHP itself. Some CMS (Content Management Systems) also use templates.\n\n\nTemplate engines often have their own custom command or expression language. If an attacker can influence input into a template before it is processed, then the attacker can invoke arbitrary expressions, i.e. perform injection attacks. For example, in some template languages, an attacker could inject the expression \"{{7*7}}\" and determine if the output returns \"49\" instead. The syntax varies depending on the language.\n\n\nIn some cases, XSS-style attacks can work, which can obscure the root cause if the developer does not closely investigate the root cause of the error.\n\n\nTemplate engines can be used on the server or client, so both \"sides\" could be affected by injection. The mechanisms of attack or the affected technologies might be different, but the mistake is fundamentally the same.\n\n\n### Alternative Terms\nServer-Side Template Injection / SSTI: This term is used for injection into template engines being used by a server.\nClient-Side Template Injection / CSTI: This term is used for injection into template engines being used by a client.\n\n### Relationships\nChildOf -> CWE-94\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** Since expression languages are often used in templating languages, there may be some overlap with CWE-917 (Expression Language Injection). XSS (CWE-79) is also co-located with template injection.\n\n**[Maintenance]** The interrelationships and differences between CWE-917 and CWE-1336 need to be further clarified.\n\n\n\n### Observed Examples\n- **CVE-2024-34359:** Chain: Python bindings for LLM library do not use a sandboxed environment when parsing a template and constructing a prompt, allowing jinja2 Server Side Template Injection and code execution - one variant of a \"prompt injection\" attack.\n- **CVE-2017-16783:** server-side template injection in content management server\n- **CVE-2020-9437:** authentication / identity management product has client-side template injection\n\n",
  "keyphrases": {},
  "timestamp": "2025-04-02 08:19:48",
  "cve_id": "unknown",
  "result_count": 5,
  "results": [
    {
      "cwe_id": "288",
      "name": "Authentication Bypass Using an Alternate Path or Channel",
      "score": 7014.475789974765,
      "search_source": "base_query"
    },
    {
      "cwe_id": "912",
      "name": "Hidden Functionality",
      "score": 6863.891925583023,
      "search_source": "base_query"
    },
    {
      "cwe_id": "1336",
      "name": "Improper Neutralization of Special Elements Used in a Template Engine",
      "score": 6511.700229100437,
      "search_source": "base_query"
    },
    {
      "cwe_id": "284",
      "name": "Improper Access Control",
      "score": 6498.983565162471,
      "search_source": "base_query"
    },
    {
      "cwe_id": "327",
      "name": "Use of a Broken or Risky Cryptographic Algorithm",
      "score": 6361.366397653447,
      "search_source": "base_query"
    }
  ]
}