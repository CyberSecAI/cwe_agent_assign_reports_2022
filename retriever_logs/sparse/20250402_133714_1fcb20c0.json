{
  "retriever": "sparse",
  "query": "## Vulnerability Description\nIn RIOT-OS 2021.01, **nonce reuse** in 802.15.4 encryption in the ieee820154_security component allows attackers to break encryption by triggering reboots.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **nonce reuse**\n- **impact:** break encryption\n- **vector:** reboots\n- **attacker:** attackers\n- **product:** RIOT-OS\n- **version:** 2021.01\n- **component:** ieee820154_security component\n\n## CVE Reference Links Content Summary\n```\n{\n  \"CVE_data_meta\": {\n    \"ID\": \"CVE-2021-41061\",\n    \"ASSIGNER\": \"cve@mitre.org\"\n  },\n  \"description\": {\n    \"description_data\": [\n      {\n        \"lang\": \"en\",\n        \"value\": \"The frame counter used with ieee802154_security is initialized with 0 at startup. While it is protected against overflow, it is not protected against being reset, and that reset happens whenever the device restarts. As the key is flashed into the device in ieee802154_security's normal operation, and the sender LL address is constant per device, the same nonce (varying only through the resetting frame counter) is used in the AES encryption multiple times. Reuse of the same (nonce, key) breaks confidentiality guarantees.\"\n      }\n    ]\n  },\n  \"relevant_content\": [\n    {\n      \"source\": \"github.com_dfdaca53_20250115_134016.html\",\n      \"vulnerability\": \"The security module introduced in [#15150](https://github.com/RIOT-OS/RIOT/pull/15150) was not intended for security-critical use, as it waives using a proper key store to mitigate complexity. This wasn't clear in the documentation, which could give the wrong impression.\"\n    },\n    {\n      \"source\": \"www.rfc-editor.org_a9ba5859_20250115_134020.html\",\n      \"vulnerability\": \"This document describes a minimal mode of operation for an IPv6 over the TSCH mode of IEEE 802.15.4e (6TiSCH) network.  This minimal mode of operation specifies the baseline set of protocols that need to be supported and the recommended configurations and modes of operation sufficient to enable a 6TiSCH functional network.\",\n       \"details\": \"Link-layer frames MUST be secured by the link-layer security mechanisms defined in IEEE Std 802.15.4. Link-layer authentication MUST be applied to the entire frame, including the 802.15.4 header.  Link-layer encryption MAY be applied to 802.15.4 Payload IEs and the 802.15.4 payload. This specification assumes the existence of two cryptographic keys: Key K1 is used to authenticate EBs and Key K2 is used to authenticate and encrypt DATA and ACKNOWLEDGMENT frames. In the event of a network reset, the new network MUST either use new cryptographic keys or ensure that the ASN remains monotonically increasing.\"\n    },\n     {\n      \"source\": \"datatracker.ietf.org_8db6d217_20250115_134018.html\",\n      \"vulnerability\": \"This document describes a procedure for augmenting the authenticated Diffie-Hellman key exchange EDHOC with third-party assisted authorization targeting constrained IoT deployments (RFC 7228). The procedure involves a device, a domain authenticator, and an authorization server. The device and authenticator perform mutual authentication and authorization, assisted by the authorization server which provides relevant authorization information to the device (a 'voucher') and to the authenticator.\"\n    },\n    {\n      \"source\": \"github.com_09e22a56_20250115_134020.html\",\n      \"vulnerability\": \"This pull request adds functions to read and set the next message ID in gcoap. This was needed to maintain the next message ID between reboots, which was causing issues when the server had a larger message cache. A randomly generated message ID, if reused after reboot, can cause a server to respond with a cached response from a previous request due to the same message ID. Although this is not technically wrong of the server, gcoap couldn't match the response due to token mismatch.\",\n      \"details\": \"The next message ID is randomly generated during initialization, but this is not always wanted; a manual setting is sometimes needed. The API is named 'read' to make it clear that this is not part of gcoap's regular use case.\"\n   },\n   {\n      \"source\": \"github.com_211a9ec8_20250115_091133.html\",\n      \"vulnerability\": \"The frame counter used with ieee802154_security is initialized with 0 at startup. While it is protected against overflow, it is not protected against being reset, and that reset happens whenever the device restarts. As the key is flashed into the device in ieee802154_security's normal operation, and the sender LL address is constant per device, the same nonce (varying only through the resetting frame counter) is used in the AES encryption multiple times. Reuse of the same (nonce, key) breaks confidentiality guarantees.\",\n     \"details\": \"The issue was found by sniffing packets after rebooting, which showed the sequence numbers start from zero again and byte-wise identical requests in regions of equal content. The module in question has been marked as experimental, CVE-2021-41061 has been assigned to this issue. Fixing this issue is non trivial. A potential mitigation may involve a random initialization at startup. Backup RAM and RTC memory could be other backends to solve this. A key could also include an absolute timestamp.\"\n    },\n    {\n      \"source\": \"crypto.stackexchange.com_20b236ca_20250115_134014.html\",\n      \"vulnerability\": \"Reusing an IV with AES/GCM even once, can be catastrophic, as it leaks the XOR of plaintexts. Moreover, with GCM, a single IV reuse leaks significant information about the key used for authentication, as it is a stream cipher and is malleable if the MAC fails. NIST's GCM is designed for 96-bit IVs, and if you specify a different-length one there are weaknesses in the function used to compute the 'real' IV.\"\n    }\n  ]\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 323 | Reusing a Nonce, Key Pair in Encryption | Base | Allowed | sparse | 0.378 |\n| 2 | 1204 | Generation of Weak Initialization Vector (IV) | Base | Allowed | sparse | 0.145 |\n| 3 | 327 | Use of a Broken or Risky Cryptographic Algorithm | Class | Allowed-with-Review | sparse | 0.131 |\n| 4 | 294 | Authentication Bypass by Capture-replay | Base | Allowed | sparse | 0.129 |\n| 5 | 226 | Sensitive Information in Resource Not Removed Before Reuse | Base | Allowed | sparse | 0.128 |\n| 6 | 1331 | Improper Isolation of Shared Resources in Network On Chip (NoC) | Base | Allowed | dense | 0.531 |\n| 7 | 201 | Insertion of Sensitive Information Into Sent Data | Base | Allowed | graph | 0.002 |\n| 8 | 1391 | Use of Weak Credentials | Class | Allowed-with-Review | sparse | 0.126 |\n| 9 | 757 | Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade') | Base | Allowed | sparse | 0.125 |\n| 10 | 613 | Insufficient Session Expiration | Base | Allowed | sparse | 0.122 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-323: Reusing a Nonce, Key Pair in Encryption\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nNonces should be used for the present occasion and only once.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-344\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n\n\n\n## CWE-1204: Generation of Weak Initialization Vector (IV)\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a cryptographic primitive that uses an Initialization\n\t\t\tVector (IV), but the product does not generate IVs that are\n\t\t\tsufficiently unpredictable or unique according to the expected\n\t\t\tcryptographic requirements for that primitive.\n\t\t\t\n\n### Extended Description\nBy design, some cryptographic primitives (such as block ciphers) require that IVs must have certain properties for the uniqueness and/or unpredictability of an IV. Primitives may vary in how important these properties are. If these properties are not maintained, e.g. by a bug in the code, then the cryptography may be weakened or broken by attacking the IVs themselves.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-330\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, \"randomness\" is used heavily. However, within cryptography, \"entropy\" is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.\n\n\n\n### Observed Examples\n- **CVE-2020-1472:** ZeroLogon vulnerability - use of a static IV of all zeroes in AES-CFB8 mode\n- **CVE-2011-3389:** BEAST attack in SSL 3.0 / TLS 1.0. In CBC mode, chained initialization vectors are non-random, allowing decryption of HTTPS traffic using a chosen plaintext attack.\n- **CVE-2001-0161:** wireless router does not use 6 of the 24 bits for WEP encryption, making it easier for attackers to decrypt traffic\n\n\n\n\n## CWE-327: Use of a Broken or Risky Cryptographic Algorithm\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product uses a broken or risky cryptographic algorithm or protocol.\n\n### Extended Description\n\n\nCryptographic algorithms are the methods by which data is scrambled to prevent observation or influence by unauthorized actors. Insecure cryptography can be exploited to expose sensitive information, modify data in unexpected ways, spoof identities of other users or devices, or other impacts.\n\n\nIt is very difficult to produce a secure algorithm, and even high-profile algorithms by accomplished cryptographic experts have been broken. Well-known techniques exist to break or weaken various kinds of cryptography. Accordingly, there are a small number of well-understood and heavily studied algorithms that should be used by most products. Using a non-standard or known-insecure algorithm is dangerous because a determined adversary may be able to break the algorithm and compromise whatever data has been protected.\n\n\nSince the state of cryptography advances so rapidly, it is common for an algorithm to be considered \"unsafe\" even if it was once thought to be strong. This can happen when new attacks are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought.\n\n\nFor a number of reasons, this weakness is even more challenging to manage with hardware deployment of cryptographic algorithms as opposed to software implementation. First, if a flaw is discovered with hardware-implemented cryptography, the flaw cannot be fixed in most cases without a recall of the product, because hardware is not easily replaceable like software. Second, because the hardware product is expected to work for years, the adversary's computing power will only increase over time.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\nPeerOf -> CWE-311\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** Since CWE 4.4, various cryptography-related entries, including CWE-327 and CWE-1240, have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-30273:** SCADA-based protocol supports a legacy encryption mode that uses Tiny Encryption Algorithm (TEA) in ECB mode, which leaks patterns in messages and cannot protect integrity\n- **CVE-2022-30320:** Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.\n- **CVE-2008-3775:** Product uses \"ROT-25\" to obfuscate the password in the registry.\n\n\n\n\n## CWE-294: Authentication Bypass by Capture-replay\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nA capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\n### Extended Description\nCapture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\nChildOf -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2005-3435:** product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.\n- **CVE-2007-4961:** Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).\n\n\n\n\n## CWE-226: Sensitive Information in Resource Not Removed Before Reuse\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.\n\n### Extended Description\n\n\nWhen resources are released, they can be made available for reuse. For example, after memory is de-allocated, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information.\n\n\nEven when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated.\n\n\nThis weakness can apply in hardware, such as when a device or system switches between power, sleep, or debug states during normal operation, or when execution changes to different users or privilege levels.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-459\nChildOf -> CWE-212\nCanPrecede -> CWE-201\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000).\n\n**[Maintenance]** This entry needs modification to clarify the differences with CWE-212. The description also combines two problems that are distinct from the CWE research perspective: the inadvertent transfer of information to another sphere, and improper initialization/shutdown. Some of the associated taxonomy mappings reflect these different uses.\n\n**[Research Gap]** This is frequently found for network packets, but it can also exist in local memory allocation, files, etc.\n\n\n\n### Observed Examples\n- **CVE-2019-3733:** Cryptography library does not clear heap memory before release\n- **CVE-2003-0001:** Ethernet NIC drivers do not pad frames with null bytes, leading to infoleak from malformed packets.\n- **CVE-2003-0291:** router does not clear information from DHCP packets that have been previously used\n\n\n\n\n## CWE-1331: Improper Isolation of Shared Resources in Network On Chip (NoC)\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.\n\n### Extended Description\n\n\nTypically, network on chips (NoC) have many internal resources that are shared between packets from different trust domains. These resources include internal buffers, crossbars and switches, individual ports, and channels. The sharing of resources causes contention and introduces interference between differently trusted domains, which poses a security threat via a timing channel, allowing attackers to infer data that belongs to a trusted agent. This may also result in introducing network interference, resulting in degraded throughput and latency.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-653\nChildOf -> CWE-668\nPeerOf -> CWE-1189\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2021-33096:** Improper isolation of shared resource in a network-on-chip leads to denial of service\n\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\nCanAlsoBe -> CWE-209\nCanAlsoBe -> CWE-202\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).\n\n\n\n### Observed Examples\n- **CVE-2022-0708:** Collaboration platform does not clear team emails in a response, allowing leak of email addresses\n\n\n\n\n## CWE-1391: Use of Weak Credentials\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.\n\n### Extended Description\n\n\nBy design, authentication protocols try to ensure that attackers must perform brute force attacks if they do not know the credentials such as a key or password. However, when these credentials are easily predictable or even fixed (as with default or hard-coded passwords and keys), then the attacker can defeat the mechanism without relying on brute force.\n\n\nCredentials may be weak for different reasons, such as:\n\n\n  - Hard-coded (i.e., static and unchangeable by the administrator)\n\n  - Default (i.e., the same static value across different deployments/installations, but able to be changed by the administrator)\n\n  - Predictable (i.e., generated in a way that produces unique credentials across deployments/installations, but can still be guessed with reasonable efficiency)\n\nEven if a new, unique credential is intended to be generated for each product installation, if the generation is predictable, then that may also simplify guessing attacks.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1390\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **[REF-1374]:** Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)\n- **CVE-2022-30270:** Remote Terminal Unit (RTU) uses default credentials for some SSH accounts\n- **CVE-2022-29965:** Distributed Control System (DCS) uses a deterministic algorithm to generate utility passwords\n\n\n\n\n## CWE-757: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nA protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.\n\n### Extended Description\nWhen a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the product by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** This is related to CWE-300, although not all downgrade attacks necessarily require an entity that redirects or interferes with the network. See examples.\n\n\n\n### Observed Examples\n- **CVE-2006-4302:** Attacker can select an older version of the software to exploit its vulnerabilities.\n- **CVE-2006-4407:** Improper prioritization of encryption ciphers during negotiation leads to use of a weaker cipher.\n- **CVE-2005-2969:** chain: SSL/TLS implementation disables a verification step (CWE-325) that enables a downgrade attack to a weaker protocol.\n\n\n\n\n## CWE-613: Insufficient Session Expiration\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nAccording to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-672\nChildOf -> CWE-672\nCanPrecede -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** The lack of proper session expiration may improve the likely success of certain attacks. For example, an attacker may intercept a session ID, possibly via a network sniffer or Cross-site Scripting attack. Although short session expiration times do not help if a stolen token is immediately used, they will protect against ongoing replaying of the session ID. In another scenario, a user might access a web site from a shared computer (such as at a library, Internet cafe, or open work environment). Insufficient Session Expiration could allow an attacker to use the browser's back button to access web pages previously accessed by the victim.\n\n\n\n",
  "keyphrases": {},
  "timestamp": "2025-04-02 13:37:14",
  "cve_id": "unknown",
  "result_count": 5,
  "results": [
    {
      "cwe_id": "327",
      "name": "Use of a Broken or Risky Cryptographic Algorithm",
      "score": 6500.43612407035,
      "search_source": "base_query"
    },
    {
      "cwe_id": "1391",
      "name": "Use of Weak Credentials",
      "score": 6289.5333625066305,
      "search_source": "base_query"
    },
    {
      "cwe_id": "1204",
      "name": "Generation of Weak Initialization Vector (IV)",
      "score": 6243.9167603608685,
      "search_source": "base_query"
    },
    {
      "cwe_id": "1240",
      "name": "Use of a Cryptographic Primitive with a Risky Implementation",
      "score": 6136.8405867976435,
      "search_source": "base_query"
    },
    {
      "cwe_id": "226",
      "name": "Sensitive Information in Resource Not Removed Before Reuse",
      "score": 6103.09948435831,
      "search_source": "base_query"
    }
  ]
}