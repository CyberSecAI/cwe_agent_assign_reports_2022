{
  "retriever": "sparse",
  "query": "## Vulnerability Description\nNordic Semiconductor nRF52840 devices through 2020-10-19 have **improper protection against physical side channels**. The flash read-out protection (APPROTECT) can be bypassed by injecting a fault during the boot phase.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **improper protection against physical side channels**\n- **impact:** bypass flash read-out protection (APPROTECT)\n- **vector:** injecting a fault during the boot phase\n- **product:** Nordic Semiconductor nRF52840 devices\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's an analysis related to CVE-2020-27211:\n\n**Verification:**\n\nThe content from `www.aisec.fraunhofer.de_9735de12_20250119_113318.html` explicitly mentions \"Nordic Semiconductor nRF52840 - CVE-2020-27211\" under the \"Side-Channel Attacks\" section. This confirms the relevance of this content to the specified CVE.\n\n**Vulnerability Details:**\n\n*   **Root Cause:** The vulnerability stems from a weakness in the cryptographic implementation within the Nordic Semiconductor nRF52840 microcontroller. Specifically, a side-channel attack is possible due to the micro-ecc library and ARM CryptoCell hardware accelerator.\n*   **Weaknesses/Vulnerabilities:** The nRF52840's cryptographic implementation leaks information through electromagnetic (EM) side-channels. This leakage allows for the recovery of private cryptographic keys.\n*   **Impact of Exploitation:** Successful exploitation of this vulnerability leads to the compromise of private cryptographic keys. This can allow attackers to impersonate legitimate users, bypass authentication mechanisms, and potentially gain access to sensitive data or systems.\n*  **Attack Vectors:** The attack vector is a side-channel attack, specifically involving the measurement of electromagnetic emanations.\n*   **Required Attacker Capabilities/Position:** An attacker requires physical access to the device containing the vulnerable nRF52840 microcontroller and the ability to perform EM measurements with pen-like probes and oscilloscopes. They also need expertise in side-channel analysis techniques to process and interpret the gathered measurements.\n\n**Additional Notes:**\n\n*   The content mentions that the vulnerability was discovered during a systematic analysis of commercially available open source security tokens.\n*   The vulnerability is related to the micro-ecc library and the ARM CryptoCell hardware accelerator within the nRF52840.\n*   The content also mentions fault injection attacks against the nRF52840 which are related to CVE-2021-29415.\n*   The associated research paper, accessible via a link, provides further details about the attacks and potential countermeasures.\n\n**Summary of extracted information:**\n\n*   **Root cause:** Weaknesses in the cryptographic implementation of the nRF52840 allowing side-channel attacks.\n*   **Vulnerabilities:** Information leakage via EM side-channels during cryptographic operations.\n*  **Impact:** Compromise of private cryptographic keys, bypassing authentication, unauthorized access.\n*   **Attack vector:** Electromagnetic side-channel analysis.\n*   **Attacker capabilities:** Physical access, specialized EM measurement equipment, expertise in side-channel analysis.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 1300 | Improper Protection of Physical Side Channels | Base | Allowed | sparse | 0.457 |\n| 2 | 1332 | Improper Handling of Faults that Lead to Instruction Skips | Base | Allowed | sparse | 0.219 |\n| 3 | 1263 | Improper Physical Access Control | Class | Allowed-with-Review | sparse | 0.204 |\n| 4 | 1256 | Improper Restriction of Software Interfaces to Hardware Features | Base | Allowed | sparse | 0.175 |\n| 5 | 1319 | Improper Protection against Electromagnetic Fault Injection (EM-FI) | Base | Allowed | sparse | 0.172 |\n| 6 | 1191 | On-Chip Debug and Test Interface With Improper Access Control | Base | Allowed | dense | 0.588 |\n| 7 | 1247 | Improper Protection Against Voltage and Clock Glitches | Base | Allowed | graph | 0.001 |\n| 8 | 1299 | Missing Protection Mechanism for Alternate Hardware Interface | Base | Allowed | sparse | 0.163 |\n| 9 | 602 | Client-Side Enforcement of Server-Side Security | Class | Allowed-with-Review | sparse | 0.161 |\n| 10 | 1338 | Improper Protections Against Hardware Overheating | Base | Allowed | sparse | 0.159 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-1300: Improper Protection of Physical Side Channels\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe device does not contain sufficient protection\n\tmechanisms to prevent physical side channels from exposing\n\tsensitive information due to patterns in physically observable\n\tphenomena such as variations in power consumption,\n\telectromagnetic emissions (EME), or acoustic emissions.\n\n### Extended Description\n\n\nAn adversary could monitor and measure physical phenomena to detect patterns and make inferences, even if it is not possible to extract the information in the digital domain.\n\n\nPhysical side channels have been well-studied for decades in the context of breaking implementations of cryptographic algorithms or other attacks against security features. These side channels may be easily observed by an adversary with physical access to the device, or using a tool that is in close proximity. If the adversary can monitor hardware operation and correlate its data processing with power, EME, and acoustic measurements, the adversary might be able to recover of secret keys and data.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-203\nChildOf -> CWE-203\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-35888:** Power side-channels leak secret information from processor\n- **CVE-2021-3011:** electromagnetic-wave side-channel in security-related microcontrollers allows extraction of private key\n- **CVE-2019-14353:** Crypto hardware wallet's power consumption relates to total number of pixels illuminated, creating a side channel in the USB connection that allows attackers to determine secrets displayed such as PIN numbers and passwords\n\n\n\n\n## CWE-1332: Improper Handling of Faults that Lead to Instruction Skips\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.\n\n### Extended Description\n\n\nThe operating conditions of hardware may change in ways that cause unexpected behavior to occur, including the skipping of security-critical CPU instructions. Generally, this can occur due to electrical disturbances or when the device operates outside of its expected conditions.\n\n\nIn practice, application code may contain conditional branches that are security-sensitive (e.g., accepting or rejecting a user-provided password). These conditional branches are typically implemented by a single conditional branch instruction in the program binary which, if skipped, may lead to effectively flipping the branch condition - i.e., causing the wrong security-sensitive branch to be taken. This affects processes such as firmware authentication, password verification, and other security-sensitive decision points.\n\n\nAttackers can use fault injection techniques to alter the operating conditions of hardware so that security-critical instructions are skipped more frequently or more reliably than they would in a \"natural\" setting.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1384\nPeerOf -> CWE-1247\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2019-15894:** fault injection attack bypasses the verification mode, potentially allowing arbitrary code execution.\n\n\n\n\n## CWE-1263: Improper Physical Access Control\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.\n\n### Extended Description\nSections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\nPeerOf -> CWE-1191\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** This entry is still under development and will continue to see updates and content improvements.\n\n\n\n\n\n\n## CWE-1256: Improper Restriction of Software Interfaces to Hardware Features\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product provides software-controllable\n\t\t\tdevice functionality for capabilities such as power and\n\t\t\tclock management, but it does not properly limit\n\t\t\tfunctionality that can lead to modification of\n\t\t\thardware memory or register bits, or the ability to\n\t\t\tobserve physical side channels.\n\n### Extended Description\n\n\nIt is frequently assumed that physical attacks such as fault injection and side-channel analysis require an attacker to have physical access to the target device. This assumption may be false if the device has improperly secured power management features, or similar features. For mobile devices, minimizing power consumption is critical, but these devices run a wide variety of applications with different performance requirements. Software-controllable mechanisms to dynamically scale device voltage and frequency and monitor power consumption are common features in today's chipsets, but they also enable attackers to mount fault injection and side-channel attacks without having physical access to the device.\n\n\nFault injection attacks involve strategic manipulation of bits in a device to achieve a desired effect such as skipping an authentication step, elevating privileges, or altering the output of a cryptographic operation. Manipulation of the device clock and voltage supply is a well-known technique to inject faults and is cheap to implement with physical device access. Poorly protected power management features allow these attacks to be performed from software. Other features, such as the ability to write repeatedly to DRAM at a rapid rate from unprivileged software, can result in bit flips in other memory locations (Rowhammer, [REF-1083]).\n\n\nSide channel analysis requires gathering measurement traces of physical quantities such as power consumption. Modern processors often include power metering capabilities in the hardware itself (e.g., Intel RAPL) which if not adequately protected enable attackers to gather measurements necessary for performing side-channel attacks from software.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-285\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2019-11157:** Plundervolt: Improper conditions check in voltage settings for some Intel(R) Processors may allow a privileged user to potentially enable escalation of privilege and/or information disclosure via local access [REF-1081].\n- **CVE-2020-8694:** PLATYPUS Attack: Insufficient access control in the Linux kernel driver for some Intel processors allows information disclosure.\n- **CVE-2020-8695:** Observable discrepancy in the RAPL interface for some Intel processors allows information disclosure.\n\n\n\n\n## CWE-1319: Improper Protection against Electromagnetic Fault Injection (EM-FI)\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.\n\n### Extended Description\n\n\nElectromagnetic fault injection may allow an attacker to locally and dynamically modify the signals (both internal and external) of an integrated circuit. EM-FI attacks consist of producing a local, transient magnetic field near the device, inducing current in the device wires. A typical EMFI setup is made up of a pulse injection circuit that generates a high current transient in an EMI coil, producing an abrupt magnetic pulse which couples to the target producing faults in the device, which can lead to:\n\n\n  - Bypassing security mechanisms such as secure JTAG or Secure Boot\n\n  - Leaking device information\n\n  - Modifying program flow\n\n  - Perturbing secure hardware modules (e.g. random number generators)\n\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry is attack-oriented and may require significant modification in future versions, or even deprecation. It is not clear whether there is really a design \"mistake\" that enables such attacks, so this is not necessarily a weakness and may be more appropriate for CAPEC.\n\n\n\n### Observed Examples\n- **CVE-2020-27211:** Chain: microcontroller system-on-chip uses a register value stored in flash to set product protection state on the memory bus and does not contain protection against fault injection (CWE-1319) which leads to an incorrect initialization of the memory bus (CWE-1419) causing the product to be in an unprotected state.\n\n\n\n\n## CWE-1191: On-Chip Debug and Test Interface With Improper Access Control\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.\n\n### Extended Description\n\n\nA device's internal information may be accessed through a scan chain of interconnected internal registers, usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present.\n\n\nIf authorization, authentication, or some other form of access control is not implemented or not implemented correctly, a user may be able to bypass on-chip protection mechanisms through the debug interface.\n\n\nSometimes, designers choose not to expose the debug pins on the motherboard. Instead, they choose to hide these pins in the intermediate layers of the board. This is primarily done to work around the lack of debug authorization inside the chip. In such a scenario (without debug authorization), when the debug interface is exposed, chip internals are accessible to an attacker.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** CWE-1191 and CWE-1244 both involve physical debug access, but the weaknesses are different. CWE-1191 is effectively about missing authorization for a debug interface, i.e. JTAG. CWE-1244 is about providing internal assets with the wrong debug access level, exposing the asset to untrusted debug agents.\n\n\n\n### Observed Examples\n- **CVE-2019-18827:** chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys\n\n\n\n\n## CWE-1247: Improper Protection Against Voltage and Clock Glitches\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.\n\n### Extended Description\n\n\nA device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1384\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2019-17391:** Lack of anti-glitch protections allows an attacker to launch a physical attack to bypass the secure boot and read protected eFuses.\n- **CVE-2021-33478:** IP communication firmware allows access to a boot shell via certain impulses\n\n\n\n\n## CWE-1299: Missing Protection Mechanism for Alternate Hardware Interface\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe lack of protections on alternate paths to access\n                control-protected assets (such as unprotected shadow registers\n                and other external facing unguarded interfaces) allows an\n                attacker to bypass existing protections to the asset that are\n\t\tonly performed against the primary path.\n\n### Extended Description\n\n\nAn asset inside a chip might have access-control protections through one interface. However, if all paths to the asset are not protected, an attacker might compromise the asset through alternate paths. These alternate paths could be through shadow or mirror registers inside the IP core, or could be paths from other external-facing interfaces to the IP core or SoC.\n\n\nConsider an SoC with various interfaces such as UART, SMBUS, PCIe, USB, etc. If access control is implemented for SoC internal registers only over the PCIe interface, then an attacker could still modify the SoC internal registers through alternate paths by coming through interfaces such as UART, SMBUS, USB, etc. \n\n\nAlternatively, attackers might be able to bypass existing protections by exploiting unprotected, shadow registers. Shadow registers and mirror registers typically refer to registers that can be accessed from multiple addresses. Writing to or reading from the aliased/mirrored address has the same effect as writing to the address of the main register. They are typically implemented within an IP core or SoC to temporarily hold certain data. These data will later be updated to the main register, and both registers will be in synch. If the shadow registers are not access-protected, attackers could simply initiate transactions to the shadow registers and compromise system security. \n\n\n### Alternative Terms\nNone\n\n### Relationships\nPeerOf -> CWE-1191\nChildOf -> CWE-420\nChildOf -> CWE-288\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-38399:** Missing protection mechanism on serial connection allows for arbitrary OS command execution.\n- **CVE-2020-9285:** Mini-PCI Express slot does not restrict direct memory access.\n- **CVE-2020-8004:** When the internal flash is protected by blocking access on the Data Bus (DBUS), it can still be indirectly accessed through the Instruction Bus (IBUS).\n\n\n\n\n## CWE-602: Client-Side Enforcement of Server-Side Security\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n### Extended Description\nWhen the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms, resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\nCanPrecede -> CWE-471\nPeerOf -> CWE-290\nPeerOf -> CWE-300\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-33139:** SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.\n- **CVE-2006-6994:** ASP program allows upload of .asp files by bypassing client-side checks.\n- **CVE-2007-0163:** steganography products embed password information in the carrier file, which can be extracted from a modified client.\n\n\n\n\n## CWE-1338: Improper Protections Against Hardware Overheating\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nA hardware device is missing or has inadequate protection features to prevent overheating.\n\n### Extended Description\n\n\nHardware, electrical circuits, and semiconductor silicon have thermal side effects, such that some of the energy consumed by the device gets dissipated as heat and increases the temperature of the device. For example, in semiconductors, higher-operating frequency of silicon results in higher power dissipation and heat. The leakage current in CMOS circuits increases with temperature, and this creates positive feedback that can result in thermal runaway and damage the device permanently.\n\n\nAny device lacking protections such as thermal sensors, adequate platform cooling, or thermal insulation is susceptible to attacks by malicious software that might deliberately operate the device in modes that result in overheating. This can be used as an effective denial of service (DoS) or permanent denial of service (PDoS) attack.\n\n\nDepending on the type of hardware device and its expected usage, such thermal overheating can also cause safety hazards and reliability issues. Note that battery failures can also cause device overheating but the mitigations and examples included in this submission cannot reliably protect against a battery failure. \n\n\nThere can be similar weaknesses with lack of protection from attacks based on overvoltage or overcurrent conditions. However, thermal heat is generated by hardware operation and the device should implement protection from overheating.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n",
  "keyphrases": {
    "base_query": "## Vulnerability Description\nNordic Semiconductor nRF52840 devices through 2020-10-19 have **improper protection against physical side channels**. The flash read-out protection (APPROTECT) can be bypassed by injecting a fault during the boot phase.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **improper protection against physical side channels**\n- **impact:** bypass flash read-out protection (APPROTECT)\n- **vector:** injecting a fault during the boot phase\n- **product:** Nordic Semiconductor nRF52840 devices\n\n## CVE Reference Links Content Summary\nBased on the provided content, here's an analysis related to CVE-2020-27211:\n\n**Verification:**\n\nThe content from `www.aisec.fraunhofer.de_9735de12_20250119_113318.html` explicitly mentions \"Nordic Semiconductor nRF52840 - CVE-2020-27211\" under the \"Side-Channel Attacks\" section. This confirms the relevance of this content to the specified CVE.\n\n**Vulnerability Details:**\n\n*   **Root Cause:** The vulnerability stems from a weakness in the cryptographic implementation within the Nordic Semiconductor nRF52840 microcontroller. Specifically, a side-channel attack is possible due to the micro-ecc library and ARM CryptoCell hardware accelerator.\n*   **Weaknesses/Vulnerabilities:** The nRF52840's cryptographic implementation leaks information through electromagnetic (EM) side-channels. This leakage allows for the recovery of private cryptographic keys.\n*   **Impact of Exploitation:** Successful exploitation of this vulnerability leads to the compromise of private cryptographic keys. This can allow attackers to impersonate legitimate users, bypass authentication mechanisms, and potentially gain access to sensitive data or systems.\n*  **Attack Vectors:** The attack vector is a side-channel attack, specifically involving the measurement of electromagnetic emanations.\n*   **Required Attacker Capabilities/Position:** An attacker requires physical access to the device containing the vulnerable nRF52840 microcontroller and the ability to perform EM measurements with pen-like probes and oscilloscopes. They also need expertise in side-channel analysis techniques to process and interpret the gathered measurements.\n\n**Additional Notes:**\n\n*   The content mentions that the vulnerability was discovered during a systematic analysis of commercially available open source security tokens.\n*   The vulnerability is related to the micro-ecc library and the ARM CryptoCell hardware accelerator within the nRF52840.\n*   The content also mentions fault injection attacks against the nRF52840 which are related to CVE-2021-29415.\n*   The associated research paper, accessible via a link, provides further details about the attacks and potential countermeasures.\n\n**Summary of extracted information:**\n\n*   **Root cause:** Weaknesses in the cryptographic implementation of the nRF52840 allowing side-channel attacks.\n*   **Vulnerabilities:** Information leakage via EM side-channels during cryptographic operations.\n*  **Impact:** Compromise of private cryptographic keys, bypassing authentication, unauthorized access.\n*   **Attack vector:** Electromagnetic side-channel analysis.\n*   **Attacker capabilities:** Physical access, specialized EM measurement equipment, expertise in side-channel analysis.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 1300 | Improper Protection of Physical Side Channels | Base | Allowed | sparse | 0.457 |\n| 2 | 1332 | Improper Handling of Faults that Lead to Instruction Skips | Base | Allowed | sparse | 0.219 |\n| 3 | 1263 | Improper Physical Access Control | Class | Allowed-with-Review | sparse | 0.204 |\n| 4 | 1256 | Improper Restriction of Software Interfaces to Hardware Features | Base | Allowed | sparse | 0.175 |\n| 5 | 1319 | Improper Protection against Electromagnetic Fault Injection (EM-FI) | Base | Allowed | sparse | 0.172 |\n| 6 | 1191 | On-Chip Debug and Test Interface With Improper Access Control | Base | Allowed | dense | 0.588 |\n| 7 | 1247 | Improper Protection Against Voltage and Clock Glitches | Base | Allowed | graph | 0.001 |\n| 8 | 1299 | Missing Protection Mechanism for Alternate Hardware Interface | Base | Allowed | sparse | 0.163 |\n| 9 | 602 | Client-Side Enforcement of Server-Side Security | Class | Allowed-with-Review | sparse | 0.161 |\n| 10 | 1338 | Improper Protections Against Hardware Overheating | Base | Allowed | sparse | 0.159 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-1300: Improper Protection of Physical Side Channels\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe device does not contain sufficient protection\n\tmechanisms to prevent physical side channels from exposing\n\tsensitive information due to patterns in physically observable\n\tphenomena such as variations in power consumption,\n\telectromagnetic emissions (EME), or acoustic emissions.\n\n### Extended Description\n\n\nAn adversary could monitor and measure physical phenomena to detect patterns and make inferences, even if it is not possible to extract the information in the digital domain.\n\n\nPhysical side channels have been well-studied for decades in the context of breaking implementations of cryptographic algorithms or other attacks against security features. These side channels may be easily observed by an adversary with physical access to the device, or using a tool that is in close proximity. If the adversary can monitor hardware operation and correlate its data processing with power, EME, and acoustic measurements, the adversary might be able to recover of secret keys and data.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-203\nChildOf -> CWE-203\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-35888:** Power side-channels leak secret information from processor\n- **CVE-2021-3011:** electromagnetic-wave side-channel in security-related microcontrollers allows extraction of private key\n- **CVE-2019-14353:** Crypto hardware wallet's power consumption relates to total number of pixels illuminated, creating a side channel in the USB connection that allows attackers to determine secrets displayed such as PIN numbers and passwords\n\n\n\n\n## CWE-1332: Improper Handling of Faults that Lead to Instruction Skips\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.\n\n### Extended Description\n\n\nThe operating conditions of hardware may change in ways that cause unexpected behavior to occur, including the skipping of security-critical CPU instructions. Generally, this can occur due to electrical disturbances or when the device operates outside of its expected conditions.\n\n\nIn practice, application code may contain conditional branches that are security-sensitive (e.g., accepting or rejecting a user-provided password). These conditional branches are typically implemented by a single conditional branch instruction in the program binary which, if skipped, may lead to effectively flipping the branch condition - i.e., causing the wrong security-sensitive branch to be taken. This affects processes such as firmware authentication, password verification, and other security-sensitive decision points.\n\n\nAttackers can use fault injection techniques to alter the operating conditions of hardware so that security-critical instructions are skipped more frequently or more reliably than they would in a \"natural\" setting.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1384\nPeerOf -> CWE-1247\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2019-15894:** fault injection attack bypasses the verification mode, potentially allowing arbitrary code execution.\n\n\n\n\n## CWE-1263: Improper Physical Access Control\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.\n\n### Extended Description\nSections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\nPeerOf -> CWE-1191\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** This entry is still under development and will continue to see updates and content improvements.\n\n\n\n\n\n\n## CWE-1256: Improper Restriction of Software Interfaces to Hardware Features\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe product provides software-controllable\n\t\t\tdevice functionality for capabilities such as power and\n\t\t\tclock management, but it does not properly limit\n\t\t\tfunctionality that can lead to modification of\n\t\t\thardware memory or register bits, or the ability to\n\t\t\tobserve physical side channels.\n\n### Extended Description\n\n\nIt is frequently assumed that physical attacks such as fault injection and side-channel analysis require an attacker to have physical access to the target device. This assumption may be false if the device has improperly secured power management features, or similar features. For mobile devices, minimizing power consumption is critical, but these devices run a wide variety of applications with different performance requirements. Software-controllable mechanisms to dynamically scale device voltage and frequency and monitor power consumption are common features in today's chipsets, but they also enable attackers to mount fault injection and side-channel attacks without having physical access to the device.\n\n\nFault injection attacks involve strategic manipulation of bits in a device to achieve a desired effect such as skipping an authentication step, elevating privileges, or altering the output of a cryptographic operation. Manipulation of the device clock and voltage supply is a well-known technique to inject faults and is cheap to implement with physical device access. Poorly protected power management features allow these attacks to be performed from software. Other features, such as the ability to write repeatedly to DRAM at a rapid rate from unprivileged software, can result in bit flips in other memory locations (Rowhammer, [REF-1083]).\n\n\nSide channel analysis requires gathering measurement traces of physical quantities such as power consumption. Modern processors often include power metering capabilities in the hardware itself (e.g., Intel RAPL) which if not adequately protected enable attackers to gather measurements necessary for performing side-channel attacks from software.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-285\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2019-11157:** Plundervolt: Improper conditions check in voltage settings for some Intel(R) Processors may allow a privileged user to potentially enable escalation of privilege and/or information disclosure via local access [REF-1081].\n- **CVE-2020-8694:** PLATYPUS Attack: Insufficient access control in the Linux kernel driver for some Intel processors allows information disclosure.\n- **CVE-2020-8695:** Observable discrepancy in the RAPL interface for some Intel processors allows information disclosure.\n\n\n\n\n## CWE-1319: Improper Protection against Electromagnetic Fault Injection (EM-FI)\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.\n\n### Extended Description\n\n\nElectromagnetic fault injection may allow an attacker to locally and dynamically modify the signals (both internal and external) of an integrated circuit. EM-FI attacks consist of producing a local, transient magnetic field near the device, inducing current in the device wires. A typical EMFI setup is made up of a pulse injection circuit that generates a high current transient in an EMI coil, producing an abrupt magnetic pulse which couples to the target producing faults in the device, which can lead to:\n\n\n  - Bypassing security mechanisms such as secure JTAG or Secure Boot\n\n  - Leaking device information\n\n  - Modifying program flow\n\n  - Perturbing secure hardware modules (e.g. random number generators)\n\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** This entry is attack-oriented and may require significant modification in future versions, or even deprecation. It is not clear whether there is really a design \"mistake\" that enables such attacks, so this is not necessarily a weakness and may be more appropriate for CAPEC.\n\n\n\n### Observed Examples\n- **CVE-2020-27211:** Chain: microcontroller system-on-chip uses a register value stored in flash to set product protection state on the memory bus and does not contain protection against fault injection (CWE-1319) which leads to an incorrect initialization of the memory bus (CWE-1419) causing the product to be in an unprotected state.\n\n\n\n\n## CWE-1191: On-Chip Debug and Test Interface With Improper Access Control\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.\n\n### Extended Description\n\n\nA device's internal information may be accessed through a scan chain of interconnected internal registers, usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present.\n\n\nIf authorization, authentication, or some other form of access control is not implemented or not implemented correctly, a user may be able to bypass on-chip protection mechanisms through the debug interface.\n\n\nSometimes, designers choose not to expose the debug pins on the motherboard. Instead, they choose to hide these pins in the intermediate layers of the board. This is primarily done to work around the lack of debug authorization inside the chip. In such a scenario (without debug authorization), when the debug interface is exposed, chip internals are accessible to an attacker.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** CWE-1191 and CWE-1244 both involve physical debug access, but the weaknesses are different. CWE-1191 is effectively about missing authorization for a debug interface, i.e. JTAG. CWE-1244 is about providing internal assets with the wrong debug access level, exposing the asset to untrusted debug agents.\n\n\n\n### Observed Examples\n- **CVE-2019-18827:** chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys\n\n\n\n\n## CWE-1247: Improper Protection Against Voltage and Clock Glitches\n**Abstraction:** Base\n**Status:** Stable\n\n### Description\nThe device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.\n\n### Extended Description\n\n\nA device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-1384\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2019-17391:** Lack of anti-glitch protections allows an attacker to launch a physical attack to bypass the secure boot and read protected eFuses.\n- **CVE-2021-33478:** IP communication firmware allows access to a boot shell via certain impulses\n\n\n\n\n## CWE-1299: Missing Protection Mechanism for Alternate Hardware Interface\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe lack of protections on alternate paths to access\n                control-protected assets (such as unprotected shadow registers\n                and other external facing unguarded interfaces) allows an\n                attacker to bypass existing protections to the asset that are\n\t\tonly performed against the primary path.\n\n### Extended Description\n\n\nAn asset inside a chip might have access-control protections through one interface. However, if all paths to the asset are not protected, an attacker might compromise the asset through alternate paths. These alternate paths could be through shadow or mirror registers inside the IP core, or could be paths from other external-facing interfaces to the IP core or SoC.\n\n\nConsider an SoC with various interfaces such as UART, SMBUS, PCIe, USB, etc. If access control is implemented for SoC internal registers only over the PCIe interface, then an attacker could still modify the SoC internal registers through alternate paths by coming through interfaces such as UART, SMBUS, USB, etc. \n\n\nAlternatively, attackers might be able to bypass existing protections by exploiting unprotected, shadow registers. Shadow registers and mirror registers typically refer to registers that can be accessed from multiple addresses. Writing to or reading from the aliased/mirrored address has the same effect as writing to the address of the main register. They are typically implemented within an IP core or SoC to temporarily hold certain data. These data will later be updated to the main register, and both registers will be in synch. If the shadow registers are not access-protected, attackers could simply initiate transactions to the shadow registers and compromise system security. \n\n\n### Alternative Terms\nNone\n\n### Relationships\nPeerOf -> CWE-1191\nChildOf -> CWE-420\nChildOf -> CWE-288\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2022-38399:** Missing protection mechanism on serial connection allows for arbitrary OS command execution.\n- **CVE-2020-9285:** Mini-PCI Express slot does not restrict direct memory access.\n- **CVE-2020-8004:** When the internal flash is protected by blocking access on the Data Bus (DBUS), it can still be indirectly accessed through the Instruction Bus (IBUS).\n\n\n\n\n## CWE-602: Client-Side Enforcement of Server-Side Security\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n### Extended Description\nWhen the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms, resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\nCanPrecede -> CWE-471\nPeerOf -> CWE-290\nPeerOf -> CWE-300\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-33139:** SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.\n- **CVE-2006-6994:** ASP program allows upload of .asp files by bypassing client-side checks.\n- **CVE-2007-0163:** steganography products embed password information in the carrier file, which can be extracted from a modified client.\n\n\n\n\n## CWE-1338: Improper Protections Against Hardware Overheating\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nA hardware device is missing or has inadequate protection features to prevent overheating.\n\n### Extended Description\n\n\nHardware, electrical circuits, and semiconductor silicon have thermal side effects, such that some of the energy consumed by the device gets dissipated as heat and increases the temperature of the device. For example, in semiconductors, higher-operating frequency of silicon results in higher power dissipation and heat. The leakage current in CMOS circuits increases with temperature, and this creates positive feedback that can result in thermal runaway and damage the device permanently.\n\n\nAny device lacking protections such as thermal sensors, adequate platform cooling, or thermal insulation is susceptible to attacks by malicious software that might deliberately operate the device in modes that result in overheating. This can be used as an effective denial of service (DoS) or permanent denial of service (PDoS) attack.\n\n\nDepending on the type of hardware device and its expected usage, such thermal overheating can also cause safety hazards and reliability issues. Note that battery failures can also cause device overheating but the mitigations and examples included in this submission cannot reliably protect against a battery failure. \n\n\nThere can be similar weaknesses with lack of protection from attacks based on overvoltage or overcurrent conditions. However, thermal heat is generated by hardware operation and the device should implement protection from overheating.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n"
  },
  "timestamp": "2025-04-01 22:18:28",
  "cve_id": "unknown",
  "result_count": 5,
  "results": [
    {
      "cwe_id": "1300",
      "name": "Improper Protection of Physical Side Channels",
      "score": 6384.170640532325,
      "search_source": "unknown"
    },
    {
      "cwe_id": "1256",
      "name": "Improper Restriction of Software Interfaces to Hardware Features",
      "score": 6353.008503687598,
      "search_source": "unknown"
    },
    {
      "cwe_id": "1299",
      "name": "Missing Protection Mechanism for Alternate Hardware Interface",
      "score": 6047.280381605376,
      "search_source": "unknown"
    },
    {
      "cwe_id": "1247",
      "name": "Improper Protection Against Voltage and Clock Glitches",
      "score": 5668.298993742391,
      "search_source": "unknown"
    },
    {
      "cwe_id": "203",
      "name": "Observable Discrepancy",
      "score": 5553.614746937746,
      "search_source": "unknown"
    }
  ]
}