{
  "retriever": "sparse",
  "query": "## Vulnerability Description\ncurl 7.61.0 through 7.76.1 suffers from exposure of data element to wrong session due to a **mistake in the code for CURLOPT_SSL_CIPHER_LIST** when libcurl is built to use the Schannel TLS library. The selected cipher set was stored in a single static variable in the library, which has the surprising side-effect that if an application sets up multiple concurrent transfers, the last one that sets the ciphers will accidentally control the set used by all transfers. In a worst-case scenario, this weakens transport security significantly.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **mistake in the code for CURLOPT_SSL_CIPHER_LIST**\n- **impact:** exposure of data element to wrong session\n- **product:** curl\n- **version:** 7.61.0 through 7.76.1\n\n## CVE Reference Links Content Summary\n```\n{\n  \"guidelines\": [\n    \"1. First verify if the content relates to the CVE specified based on the official description\",\n    \"2. If the content does not relate to this CVE, respond with \\\"UNRELATED\\\"\",\n    \"3. If no useful vulnerability information is found, respond with \\\"NOINFO\\\"\",\n    \"4. For relevant content, extract:\",\n    \"   - Root cause of vulnerability\",\n    \"   - Weaknesses/vulnerabilities present\",\n    \"   - Impact of exploitation\",\n    \"   - Attack vectors\",\n    \"   - Required attacker capabilities/position\",\n     \"Additional instructions:\",\n    \" - Preserve original technical details and descriptions\",\n     \" - Remove unrelated content\",\n    \" - Translate non-English content to English\",\n     \" - Note if the content provides more detail than the official CVE description\"\n  ],\n  \"analyzed_content\": [\n    {\n      \"source\": \"www.oracle.com_0b164f06_20250115_222850.html\",\n      \"is_related\": true,\n      \"vulnerability\": {\n        \"root_cause\": \"A mistake in the code for `CURLOPT_SSL_CIPHER_LIST` when libcurl is built to use the Schannel TLS library. The selected cipher set was stored in a single \\\"static\\\" variable.\",\n        \"weaknesses\": [\n          \"Exposure of Data Element to Wrong Session\"\n        ],\n        \"impact\": \"The last transfer that sets the ciphers will accidentally control the set used by all transfers, potentially weakening transport security significantly.\",\n        \"attack_vectors\": [\n          \"Network\"\n        ],\n        \"required_capabilities\": \"An application that sets up multiple concurrent transfers, and the last one that sets the ciphers accidentally controls the set used by all transfers.\"\n      },\n      \"additional_notes\": \"This content provides details about the root cause, affected products, and mitigation strategies for the vulnerability.\"\n    },\n    {\n      \"source\": \"github.com_161e693c_20250115_222837.html\",\n      \"is_related\": true,\n      \"vulnerability\": {\n        \"root_cause\": \"A mistake in the code for CURLOPT_SSL_CIPHER_LIST when libcurl is built to use the Schannel TLS library. The selected cipher set was stored in a single 'static' variable in the library.\",\n        \"weaknesses\": [\n          \"CWE-668\"\n        ],\n        \"impact\": \"Exposure of data element to wrong session. In a worst-case scenario, this weakens transport security significantly.\",\n        \"attack_vectors\": [\n          \"Network\"\n         ],\n        \"required_capabilities\": \"The last transfer that sets the ciphers will accidentally control the set used by all transfers.\"\n      },\n     \"additional_notes\": \"This content provides additional details, a CVSS score, and links to related resources.\"\n    },\n    {\n      \"source\": \"curl.se_47ffe70b_20250115_222836.html\",\n       \"is_related\": true,\n       \"vulnerability\": {\n         \"root_cause\": \"The cipher selection is stored in a single \\\"static\\\" variable, which causes the last transfer that sets the ciphers to control the set used by all transfers when Schannel is used.\",\n         \"weaknesses\": [\n          \"CWE-416: Use After Free\"\n        ],\n         \"impact\": \"A malicious server can potentially achieve remote code execution by crafting memory content in the correct place. However, clients may also crash or exhibit undefined behavior.\",\n         \"attack_vectors\": [\n          \"Network\"\n        ],\n        \"required_capabilities\": \"An application that has libcurl built to use OpenSSL (or one of its forks).  The server needs to know the heap address details in order to provide the appropriate payload. The application must also use a multi-interface, and HTTP/1.1 over TLS or concurrent HTTP/2 connections.\"\n      },\n      \"additional_notes\": \"This content provides detailed steps for achieving remote code execution, affected and unaffected versions, and credit information.\"\n    },\n    {\n      \"source\": \"github.com_a1b59367_20250115_222848.html\",\n      \"is_related\": false,\n      \"vulnerability\": {\n          \"root_cause\": null,\n          \"weaknesses\": [],\n          \"impact\": null,\n          \"attack_vectors\": [],\n          \"required_capabilities\": null\n        },\n        \"additional_notes\": \"UNRELATED: This content is about GitHub security features, not the specified CVE.\"\n    },\n    {\n      \"source\": \"security.netapp.com_41afbccf_20250115_093144.html\",\n      \"is_related\": true,\n      \"vulnerability\": {\n        \"root_cause\": \"Multiple NetApp products incorporate curl/libcurl. Libcurl versions 7.61.0 through 7.76.1 are susceptible to vulnerabilities. This content refers to the same issue.\",\n        \"weaknesses\": [],\n        \"impact\": \"Successful exploitation of these vulnerabilities could lead to disclosure of sensitive information, addition or modification of data, or Denial of Service (DoS).\",\n        \"attack_vectors\": [],\n        \"required_capabilities\": null\n       },\n       \"additional_notes\": \"This content mentions CVE-2021-22897 and CVE-2021-22901 together, and is an advisory that does not provide specific details on root causes or attack vectors of the CVE-2021-22897.\"\n    },\n       {\n        \"source\": \"github.com_dba769c8_20250115_222850.html\",\n          \"is_related\": false,\n          \"vulnerability\": {\n              \"root_cause\": null,\n              \"weaknesses\": [],\n              \"impact\": null,\n              \"attack_vectors\": [],\n              \"required_capabilities\": null\n            },\n            \"additional_notes\": \"UNRELATED: This content is about GitHub Copilot and its features.\"\n         },\n        {\n            \"source\": \"avatars.githubusercontent.com_5b62c064_20250115_222837.html\",\n               \"is_related\": false,\n               \"vulnerability\": {\n                   \"root_cause\": null,\n                   \"weaknesses\": [],\n                   \"impact\": null,\n                   \"attack_vectors\": [],\n                   \"required_capabilities\": null\n                 },\n                 \"additional_notes\": \"NOINFO: This appears to be an image file, not providing any vulnerability information.\"\n          },\n      {\n        \"source\": \"www.oracle.com_f2d78ea9_20250115_222852.html\",\n        \"is_related\": false,\n        \"vulnerability\": {\n          \"root_cause\": null,\n          \"weaknesses\": [],\n          \"impact\": null,\n          \"attack_vectors\": [],\n          \"required_capabilities\": null\n          },\n          \"additional_notes\": \"UNRELATED: This content is an Oracle Critical Patch Update Advisory - April 2022, and does not contain any information about CVE-2021-22897.\"\n      },\n      {\n        \"source\": \"github.com_016f1600_20250115_222854.html\",\n        \"is_related\": true,\n        \"vulnerability\": {\n          \"root_cause\": \"Schannel cipher selection uses a static variable, causing a mistake in code implementation, that results in incorrect selection of ciphers\",\n          \"weaknesses\": [],\n          \"impact\": \"The selected ciphers can be overwritten by a concurrent transfer.\",\n          \"attack_vectors\": [],\n           \"required_capabilities\": \"An application must set up multiple concurrent transfers.\"\n        },\n        \"additional_notes\": \"This content is a commit detail from curl, demonstrating the code fix for the CVE, and provides a link to the vulnerability description\"\n      },\n        {\n            \"source\": \"cert-portal.siemens.com_3ea5bb4b_20250115_222853.html\",\n             \"is_related\": true,\n             \"vulnerability\": {\n               \"root_cause\": null,\n               \"weaknesses\": [],\n               \"impact\": null,\n               \"attack_vectors\": [],\n               \"required_capabilities\": null\n              },\n             \"additional_notes\": \"This content lists CVE-2021-22897 and other CVEs as affecting SINEC INS, but provides no specific details on the root cause or attack vectors for CVE-2021-22897 itself.\"\n        },\n        {\n            \"source\": \"github.com_ab1fb86b_20250115_222838.html\",\n            \"is_related\": false,\n            \"vulnerability\": {\n              \"root_cause\": null,\n              \"weaknesses\": [],\n              \"impact\": null,\n              \"attack_vectors\": [],\n              \"required_capabilities\": null\n             },\n            \"additional_notes\": \"UNRELATED: This content is about GitHub security features, and not the specified CVE.\"\n         },\n        {\n            \"source\": \"www.oracle.com_cd95aeb5_20250115_222901.html\",\n            \"is_related\": false,\n            \"vulnerability\": {\n                \"root_cause\": null,\n                \"weaknesses\": [],\n                \"impact\": null,\n                \"attack_vectors\": [],\n                \"required_capabilities\": null\n            },\n            \"additional_notes\":\"UNRELATED: This content is an Oracle Critical Patch Update Advisory - January 2022, and does not contain information about CVE-2021-22897\"\n        }\n  ]\n}\n```\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 488 | Exposure of Data Element to Wrong Session | Base | Allowed | sparse | 1.081 |\n| 2 | 1204 | Generation of Weak Initialization Vector (IV) | Base | Allowed | sparse | 0.482 |\n| 3 | 201 | Insertion of Sensitive Information Into Sent Data | Base | Allowed | sparse | 0.479 |\n| 4 | 327 | Use of a Broken or Risky Cryptographic Algorithm | Class | Allowed-with-Review | sparse | 0.476 |\n| 5 | 1240 | Use of a Cryptographic Primitive with a Risky Implementation | Base | Allowed | sparse | 0.468 |\n| 6 | 614 | Sensitive Cookie in HTTPS Session Without 'Secure' Attribute | Variant | Allowed | dense | 0.550 |\n| 7 | 226 | Sensitive Information in Resource Not Removed Before Reuse | Base | Allowed | graph | 0.002 |\n| 8 | 923 | Improper Restriction of Communication Channel to Intended Endpoints | Class | Allowed-with-Review | sparse | 0.464 |\n| 9 | 347 | Improper Verification of Cryptographic Signature | Base | Allowed | sparse | 0.464 |\n| 10 | 407 | Inefficient Algorithmic Complexity | Class | Allowed-with-Review | sparse | 0.464 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-488: Exposure of Data Element to Wrong Session\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.\n\n### Extended Description\n\n\nData can \"bleed\" from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool.\n\n\nIn the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-668\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n\n\n\n## CWE-1204: Generation of Weak Initialization Vector (IV)\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product uses a cryptographic primitive that uses an Initialization\n\t\t\tVector (IV), but the product does not generate IVs that are\n\t\t\tsufficiently unpredictable or unique according to the expected\n\t\t\tcryptographic requirements for that primitive.\n\t\t\t\n\n### Extended Description\nBy design, some cryptographic primitives (such as block ciphers) require that IVs must have certain properties for the uniqueness and/or unpredictability of an IV. Primitives may vary in how important these properties are. If these properties are not maintained, e.g. by a bug in the code, then the cryptography may be weakened or broken by attacking the IVs themselves.\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-330\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, \"randomness\" is used heavily. However, within cryptography, \"entropy\" is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios.\n\n\n\n### Observed Examples\n- **CVE-2020-1472:** ZeroLogon vulnerability - use of a static IV of all zeroes in AES-CFB8 mode\n- **CVE-2011-3389:** BEAST attack in SSL 3.0 / TLS 1.0. In CBC mode, chained initialization vectors are non-random, allowing decryption of HTTPS traffic using a chosen plaintext attack.\n- **CVE-2001-0161:** wireless router does not use 6 of the 24 bits for WEP encryption, making it easier for attackers to decrypt traffic\n\n\n\n\n## CWE-201: Insertion of Sensitive Information Into Sent Data\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\nCanAlsoBe -> CWE-209\nCanAlsoBe -> CWE-202\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).\n\n\n\n### Observed Examples\n- **CVE-2022-0708:** Collaboration platform does not clear team emails in a response, allowing leak of email addresses\n\n\n\n\n## CWE-327: Use of a Broken or Risky Cryptographic Algorithm\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product uses a broken or risky cryptographic algorithm or protocol.\n\n### Extended Description\n\n\nCryptographic algorithms are the methods by which data is scrambled to prevent observation or influence by unauthorized actors. Insecure cryptography can be exploited to expose sensitive information, modify data in unexpected ways, spoof identities of other users or devices, or other impacts.\n\n\nIt is very difficult to produce a secure algorithm, and even high-profile algorithms by accomplished cryptographic experts have been broken. Well-known techniques exist to break or weaken various kinds of cryptography. Accordingly, there are a small number of well-understood and heavily studied algorithms that should be used by most products. Using a non-standard or known-insecure algorithm is dangerous because a determined adversary may be able to break the algorithm and compromise whatever data has been protected.\n\n\nSince the state of cryptography advances so rapidly, it is common for an algorithm to be considered \"unsafe\" even if it was once thought to be strong. This can happen when new attacks are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought.\n\n\nFor a number of reasons, this weakness is even more challenging to manage with hardware deployment of cryptographic algorithms as opposed to software implementation. First, if a flaw is discovered with hardware-implemented cryptography, the flaw cannot be fixed in most cases without a recall of the product, because hardware is not easily replaceable like software. Second, because the hardware product is expected to work for years, the adversary's computing power will only increase over time.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-693\nPeerOf -> CWE-311\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Maintenance]** Since CWE 4.4, various cryptography-related entries, including CWE-327 and CWE-1240, have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.\n\n**[Maintenance]** The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions.\n\n\n\n### Observed Examples\n- **CVE-2022-30273:** SCADA-based protocol supports a legacy encryption mode that uses Tiny Encryption Algorithm (TEA) in ECB mode, which leaks patterns in messages and cannot protect integrity\n- **CVE-2022-30320:** Programmable Logic Controller (PLC) uses a protocol with a cryptographically insecure hashing algorithm for passwords.\n- **CVE-2008-3775:** Product uses \"ROT-25\" to obfuscate the password in the registry.\n\n\n\n\n## CWE-1240: Use of a Cryptographic Primitive with a Risky Implementation\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nTo fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.\n\n### Extended Description\n\n\nCryptographic protocols and systems depend on cryptographic primitives (and associated algorithms) as their basic building blocks. Some common examples of primitives are digital signatures, one-way hash functions, ciphers, and public key cryptography; however, the notion of \"primitive\" can vary depending on point of view. See \"Terminology Notes\" for further explanation of some concepts.\n\n\nCryptographic primitives are defined to accomplish one very specific task in a precisely defined and mathematically reliable fashion. For example, suppose that for a specific cryptographic primitive (such as an encryption routine), the consensus is that the primitive can only be broken after trying out N different inputs (where the larger the value of N, the stronger the cryptography). For an encryption scheme like AES-256, one would expect N to be so large as to be infeasible to execute in a reasonable amount of time.\n\n\nIf a vulnerability is ever found that shows that one can break a cryptographic primitive in significantly less than the expected number of attempts, then that primitive is considered weakened (or sometimes in extreme cases, colloquially it is \"broken\"). As a result, anything using this cryptographic primitive would now be considered insecure or risky. Thus, even breaking or weakening a seemingly small cryptographic primitive has the potential to render the whole system vulnerable, due to its reliance on the primitive. A historical example can be found in TLS when using DES. One would colloquially call DES the cryptographic primitive for transport encryption in this version of TLS. In the past, DES was considered strong, because no weaknesses were found in it; importantly, DES has a key length of 56 bits. Trying N=2^56 keys was considered impractical for most actors. Unfortunately, attacking a system with 56-bit keys is now practical via brute force, which makes defeating DES encryption practical. It is now practical for an adversary to read any information sent under this version of TLS and use this information to attack the system. As a result, it can be claimed that this use of TLS is weak, and that any system depending on TLS with DES could potentially render the entire system vulnerable to attack.\n\n\nCryptographic primitives and associated algorithms are only considered safe after extensive research and review from experienced cryptographers from academia, industry, and government entities looking for any possible flaws. Furthermore, cryptographic primitives and associated algorithms are frequently reevaluated for safety when new mathematical and attack techniques are discovered. As a result and over time, even well-known cryptographic primitives can lose their compliance status with the discovery of novel attacks that might either defeat the algorithm or reduce its robustness significantly.\n\n\nIf ad-hoc cryptographic primitives are implemented, it is almost certain that the implementation will be vulnerable to attacks that are well understood by cryptographers, resulting in the exposure of sensitive information and other consequences.\n\n\nThis weakness is even more difficult to manage for hardware-implemented deployment of cryptographic algorithms. First, because hardware is not patchable as easily as software, any flaw discovered after release and production typically cannot be fixed without a recall of the product. Secondly, the hardware product is often expected to work for years, during which time computation power available to the attacker only increases. Therefore, for hardware implementations of cryptographic primitives, it is absolutely essential that only strong, proven cryptographic primitives are used.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-327\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Terminology]** \n\n Terminology for cryptography varies widely, from informal and colloquial to mathematically-defined, with different precision and formalism depending on whether the stakeholder is a developer, cryptologist, etc. Yet there is a need for CWE to be self-consistent while remaining understandable and acceptable to multiple audiences.\n\n\nAs of CWE 4.6, CWE terminology around \"primitives\" and \"algorithms\" is emerging as shown by the following example, subject to future consultation and agreement within the CWE and cryptography communities. Suppose one wishes to send encrypted data using a CLI tool such as OpenSSL. One might choose to use AES with a 256-bit key and require tamper protection (GCM mode, for instance). For compatibility's sake, one might also choose the ciphertext to be formatted to the PKCS#5 standard. In this case, the \"cryptographic system\" would be AES-256-GCM with PKCS#5 formatting. The \"cryptographic function\" would be AES-256 in the GCM mode of operation, and the \"algorithm\" would be AES. Colloquially, one would say that AES (and sometimes AES-256) is the \"cryptographic primitive,\" because it is the algorithm that realizes the concept of symmetric encryption (without modes of operation or other protocol related modifications). In practice, developers and architects typically refer to base cryptographic algorithms (AES, SHA, etc.) as cryptographic primitives.\n\n\n**[Maintenance]** Since CWE 4.4, various cryptography-related entries, including CWE-327 and CWE-1240, have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing.\n\n\n\n### Observed Examples\n- **CVE-2020-4778:** software uses MD5, which is less safe than the default SHA-256 used by related products\n- **CVE-2005-2946:** Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates.\n- **CVE-2019-3907:** identity card uses MD5 hash of a salt and password\n\n\n\n\n## CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\n**Abstraction:** Variant\n**Status:** Draft\n\n### Description\nThe Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-319\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2004-0462:** A product does not set the Secure attribute for sensitive cookies in HTTPS sessions, which could cause the user agent to send those cookies in plaintext over an HTTP session with the product.\n- **CVE-2008-3663:** A product does not set the secure flag for the session cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.\n- **CVE-2008-3662:** A product does not set the secure flag for the session cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.\n\n\n\n\n## CWE-226: Sensitive Information in Resource Not Removed Before Reuse\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.\n\n### Extended Description\n\n\nWhen resources are released, they can be made available for reuse. For example, after memory is de-allocated, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information.\n\n\nEven when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated.\n\n\nThis weakness can apply in hardware, such as when a device or system switches between power, sleep, or debug states during normal operation, or when execution changes to different users or privilege levels.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-459\nChildOf -> CWE-212\nCanPrecede -> CWE-201\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Relationship]** There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000).\n\n**[Maintenance]** This entry needs modification to clarify the differences with CWE-212. The description also combines two problems that are distinct from the CWE research perspective: the inadvertent transfer of information to another sphere, and improper initialization/shutdown. Some of the associated taxonomy mappings reflect these different uses.\n\n**[Research Gap]** This is frequently found for network packets, but it can also exist in local memory allocation, files, etc.\n\n\n\n### Observed Examples\n- **CVE-2019-3733:** Cryptography library does not clear heap memory before release\n- **CVE-2003-0001:** Ethernet NIC drivers do not pad frames with null bytes, leading to infoleak from malformed packets.\n- **CVE-2003-0291:** router does not clear information from DHCP packets that have been previously used\n\n\n\n\n## CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n### Extended Description\n\n\nAttackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint.\n\n\nWhile this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness.\n\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2022-30319:** S-bus functionality in a home automation product performs access control using an IP allowlist, which can be bypassed by a forged IP address.\n- **CVE-2022-22547:** A troubleshooting tool exposes a web server on a random port between 9000-65535 that could be used for information gathering\n- **CVE-2022-4390:** A WAN interface on a router has firewall restrictions enabled for IPv4, but it does not for IPv6, which is enabled by default\n\n\n\n\n## CWE-347: Improper Verification of Cryptographic Signature\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not verify, or incorrectly verifies, the cryptographic signature for data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-345\nChildOf -> CWE-345\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2002-1796:** Does not properly verify signatures for \"trusted\" entities.\n- **CVE-2005-2181:** Insufficient verification allows spoofing.\n- **CVE-2005-2182:** Insufficient verification allows spoofing.\n\n\n\n\n## CWE-407: Inefficient Algorithmic Complexity\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nAn algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nQuadratic Complexity: Used when the algorithmic complexity is related to the square of the number of inputs (N^2)\n\n### Relationships\nChildOf -> CWE-405\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2021-32617:** C++ library for image metadata has \"quadratic complexity\" issue with unnecessarily repetitive parsing each time an invalid character is encountered\n- **CVE-2020-10735:** Python has \"quadratic complexity\" issue when converting string to int with many digits in unexpected bases\n- **CVE-2020-5243:** server allows ReDOS with crafted User-Agent strings, due to overlapping capture groups that cause excessive backtracking.\n\n",
  "keyphrases": {},
  "timestamp": "2025-04-02 14:43:54",
  "cve_id": "unknown",
  "result_count": 5,
  "results": [
    {
      "cwe_id": "1240",
      "name": "Use of a Cryptographic Primitive with a Risky Implementation",
      "score": 8801.8009538324,
      "search_source": "base_query"
    },
    {
      "cwe_id": "327",
      "name": "Use of a Broken or Risky Cryptographic Algorithm",
      "score": 7771.321955563372,
      "search_source": "base_query"
    },
    {
      "cwe_id": "1204",
      "name": "Generation of Weak Initialization Vector (IV)",
      "score": 7444.97073190349,
      "search_source": "base_query"
    },
    {
      "cwe_id": "347",
      "name": "Improper Verification of Cryptographic Signature",
      "score": 7096.075832222483,
      "search_source": "base_query"
    },
    {
      "cwe_id": "203",
      "name": "Observable Discrepancy",
      "score": 7010.333276257812,
      "search_source": "base_query"
    }
  ]
}