{
  "retriever": "sparse",
  "query": "## Vulnerability Description\nAn **improper authorization** vulnerability in Palo Alto Networks Cortex XSOAR enables a remote unauthenticated attacker with network access to the Cortex XSOAR server to perform unauthorized actions through the REST API. This issue impacts Cortex XSOAR 6.1.0 builds later than 1016923 and earlier than 1271064 Cortex XSOAR 6.2.0 builds earlier than 1271065. This issue does not impact Cortex XSOAR 5.5.0, Cortex XSOAR 6.0.0, Cortex XSOAR 6.0.1, or Cortex XSOAR 6.0.2 versions. All Cortex XSOAR instances hosted by Palo Alto Networks are upgraded to resolve this vulnerability. No additional action is required for these instances.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **improper authorization**\n- **impact:** perform unauthorized actions\n- **vector:** network access to the Cortex XSOAR server\n- **attacker:** remote unauthenticated attacker\n- **product:** Palo Alto Networks Cortex XSOAR\n- **version:** 6.1.0 builds later than 1016923 and earlier than 1271064, 6.2.0 builds earlier than 1271065\n- **component:** REST API\n\n## CVE Reference Links Content Summary\n- **Root cause of vulnerability**: Improper authorization in Palo Alto Networks Cortex XSOAR.\n- **Weaknesses/vulnerabilities present**: Improper authorization leading to unauthorized access to the REST API.\n- **Impact of exploitation**: A remote unauthenticated attacker with network access can perform unauthorized actions through the REST API. This includes running commands and automations in the Cortex XSOAR War Room.\n- **Attack vectors**: Network access to the Cortex XSOAR server.\n- **Required attacker capabilities/position**: The attacker requires network access to the vulnerable Cortex XSOAR server. The attacker does not need to be authenticated. The vulnerability is only applicable to configurations with active API key integrations.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 284 | Improper Access Control | Pillar | Discouraged | alternate_terms | 0.800 |\n| 2 | 347 | Improper Verification of Cryptographic Signature | Base | Allowed | sparse | 1.005 |\n| 3 | 285 | Improper Authorization | Class | Discouraged | sparse | 0.982 |\n| 4 | 538 | Insertion of Sensitive Information into Externally-Accessible File or Directory | Base | Allowed | sparse | 0.765 |\n| 5 | 755 | Improper Handling of Exceptional Conditions | Class | Discouraged | sparse | 0.616 |\n| 6 | 269 | Improper Privilege Management | Class | Discouraged | dense | 0.565 |\n| 7 | 613 | Insufficient Session Expiration | Base | Allowed | graph | 0.002 |\n| 8 | 703 | Improper Check or Handling of Exceptional Conditions | Pillar | Discouraged | sparse | 0.575 |\n| 9 | 532 | Insertion of Sensitive Information into Log File | Base | Allowed | sparse | 0.497 |\n| 10 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.467 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-284: Improper Access Control\n**Abstraction:** Pillar\n**Status:** Incomplete\n\n### Description\nThe product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n### Extended Description\n\n\nAccess control involves the use of several protection mechanisms such as:\n\n\n  - Authentication (proving the identity of an actor)\n\n  - Authorization (ensuring that a given actor can access a resource), and\n\n  - Accountability (tracking of activities that were performed)\n\nWhen any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc.\n\nThere are two distinct behaviors that can introduce access control weaknesses:\n\n\n  - Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.\n\n  - Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.\n\n\n\n### Alternative Terms\nAuthorization: The terms \"access control\" and \"authorization\" are often used interchangeably, although many people have distinct definitions. The CWE usage of \"access control\" is intended as a general term for the various mechanisms that restrict which users can access which resources, and \"authorization\" is more narrowly defined. It is unlikely that there will be community consensus on the use of these terms.\n\n### Relationships\nNone\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-284 is extremely high-level, a Pillar. Its name, \"Improper Access Control,\" is often misused in low-information vulnerability reports [REF-1287] or by active use of the OWASP Top Ten, such as \"A01:2021-Broken Access Control\". It is not useful for trend analysis.\n**Comments:** Consider using descendants of CWE-284 that are more specific to the kind of access control involved, such as those involving authorization (Missing Authorization (CWE-862), Incorrect Authorization (CWE-863), Incorrect Permission Assignment for Critical Resource (CWE-732), etc.); authentication (Missing Authentication (CWE-306) or Weak Authentication (CWE-1390)); Incorrect User Management (CWE-286); Improper Restriction of Communication Channel to Intended Endpoints (CWE-923); etc.\n**Reasons:**\n- Frequent Misuse\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n- CWE-306: Missing Authentication\n- CWE-1390: Weak Authentication\n- CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n\n\n### Additional Notes\n**[Maintenance]** \n\nThis entry needs more work. Possible sub-categories include:\n\n\n  - Trusted group includes undesired entities (partially covered by CWE-286)\n\n  - Group can perform undesired actions\n\n  - ACL parse error does not fail closed\n\n\n\n\n\n### Observed Examples\n- **CVE-2022-24985:** A form hosting website only checks the session authentication status for a single form, making it possible to bypass authentication when there are multiple forms\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect\n\n\n\n\n## CWE-347: Improper Verification of Cryptographic Signature\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not verify, or incorrectly verifies, the cryptographic signature for data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-345\nChildOf -> CWE-345\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2002-1796:** Does not properly verify signatures for \"trusted\" entities.\n- **CVE-2005-2181:** Insufficient verification allows spoofing.\n- **CVE-2005-2182:** Insufficient verification allows spoofing.\n\n\n\n\n## CWE-285: Improper Authorization\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\n\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.\n**Reasons:**\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-2960:** Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.\n\n\n\n\n## CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** Depending on usage, this could be a weakness or a category. Further study of all its children is needed, and the entire sub-tree may need to be clarified. The current organization is based primarily on the exposure of sensitive information as a consequence, instead of as a primary weakness.\n\n**[Maintenance]** There is a close relationship with CWE-552, which is more focused on weaknesses. As a result, it may be more appropriate to convert CWE-538 to a category.\n\n\n\n### Observed Examples\n- **CVE-2018-1999036:** SSH password for private key stored in build log\n\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not handle or incorrectly handles an exceptional condition.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-703\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2023-41151:** SDK for OPC Unified Architecture (OPC UA) server has uncaught exception when a socket is blocked for writing but the server tries to send an error\n- **[REF-1374]:** Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)\n- **CVE-2021-3011:** virtual interrupt controller in a virtualization product allows crash of host by writing a certain invalid value to a register, which triggers a fatal error instead of returning an error code\n\n\n\n\n## CWE-269: Improper Privilege Management\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-269 is commonly misused. It can be conflated with \"privilege escalation,\" which is a technical impact that is listed in many low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.\n**Comments:** If an error or mistake allows privilege escalation, then use the CWE ID for that mistake. Avoid using CWE-269 when only phrases such as \"privilege escalation\" or \"gain privileges\" are available, as these indicate technical impact of the vulnerability - not the root cause weakness. If the root cause seems to be directly related to privileges, then examine the children of CWE-269 for additional hints, such as Execution with Unnecessary Privileges (CWE-250) or Incorrect Privilege Assignment (CWE-266).\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n\n\n### Observed Examples\n- **CVE-2001-1555:** Terminal privileges are not reset when a user logs out.\n- **CVE-2001-1514:** Does not properly pass security context to child processes in certain cases, allows privilege escalation.\n- **CVE-2001-0128:** Does not properly compute roles.\n\n\n\n\n## CWE-613: Insufficient Session Expiration\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nAccording to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-672\nChildOf -> CWE-672\nCanPrecede -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** The lack of proper session expiration may improve the likely success of certain attacks. For example, an attacker may intercept a session ID, possibly via a network sniffer or Cross-site Scripting attack. Although short session expiration times do not help if a stolen token is immediately used, they will protect against ongoing replaying of the session ID. In another scenario, a user might access a web site from a shared computer (such as at a library, Internet cafe, or open work environment). Insufficient Session Expiration could allow an attacker to use the browser's back button to access web pages previously accessed by the victim.\n\n\n\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction:** Pillar\n**Status:** Incomplete\n\n### Description\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nNone\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is extremely high-level, a Pillar.\n**Comments:** Consider children or descendants of this entry instead.\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** This is a high-level class that might have some overlap with other classes. It could be argued that even \"normal\" weaknesses such as buffer overflows involve unusual or exceptional conditions. In that sense, this might be an inherent aspect of most other weaknesses within CWE, similar to API Abuse (CWE-227) and Indicator of Poor Code Quality (CWE-398). However, this entry is currently intended to unify disparate concepts that do not have other places within the Research Concepts view (CWE-1000).\n\n\n\n### Observed Examples\n- **[REF-1374]:** Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)\n- **CVE-2022-22224:** Chain: an operating system does not properly process malformed Open Shortest Path First (OSPF) Type/Length/Value Identifiers (TLV) (CWE-703), which can cause the process to enter an infinite loop (CWE-835)\n\n\n\n\n## CWE-532: Insertion of Sensitive Information into Log File\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product writes sensitive information to a log file.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-538\nChildOf -> CWE-200\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2017-9615:** verbose logging stores admin credentials in a world-readable log file\n- **CVE-2018-1999036:** SSH password for private key stored in build log\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n",
  "keyphrases": {
    "base_query": "## Vulnerability Description\nAn **improper authorization** vulnerability in Palo Alto Networks Cortex XSOAR enables a remote unauthenticated attacker with network access to the Cortex XSOAR server to perform unauthorized actions through the REST API. This issue impacts Cortex XSOAR 6.1.0 builds later than 1016923 and earlier than 1271064 Cortex XSOAR 6.2.0 builds earlier than 1271065. This issue does not impact Cortex XSOAR 5.5.0, Cortex XSOAR 6.0.0, Cortex XSOAR 6.0.1, or Cortex XSOAR 6.0.2 versions. All Cortex XSOAR instances hosted by Palo Alto Networks are upgraded to resolve this vulnerability. No additional action is required for these instances.\n\n### Vulnerability Description Key Phrases\n- **rootcause:** **improper authorization**\n- **impact:** perform unauthorized actions\n- **vector:** network access to the Cortex XSOAR server\n- **attacker:** remote unauthenticated attacker\n- **product:** Palo Alto Networks Cortex XSOAR\n- **version:** 6.1.0 builds later than 1016923 and earlier than 1271064, 6.2.0 builds earlier than 1271065\n- **component:** REST API\n\n## CVE Reference Links Content Summary\n- **Root cause of vulnerability**: Improper authorization in Palo Alto Networks Cortex XSOAR.\n- **Weaknesses/vulnerabilities present**: Improper authorization leading to unauthorized access to the REST API.\n- **Impact of exploitation**: A remote unauthenticated attacker with network access can perform unauthorized actions through the REST API. This includes running commands and automations in the Cortex XSOAR War Room.\n- **Attack vectors**: Network access to the Cortex XSOAR server.\n- **Required attacker capabilities/position**: The attacker requires network access to the vulnerable Cortex XSOAR server. The attacker does not need to be authenticated. The vulnerability is only applicable to configurations with active API key integrations.\n\n## Retriever Results\n\n### Top Combined Results\n\n| Rank | CWE ID | Name | Abstraction | Usage  | Retrievers | Individual Scores |\n|------|--------|------|-------------|-------|------------|-------------------|\n| 1 | 284 | Improper Access Control | Pillar | Discouraged | alternate_terms | 0.800 |\n| 2 | 347 | Improper Verification of Cryptographic Signature | Base | Allowed | sparse | 1.005 |\n| 3 | 285 | Improper Authorization | Class | Discouraged | sparse | 0.982 |\n| 4 | 538 | Insertion of Sensitive Information into Externally-Accessible File or Directory | Base | Allowed | sparse | 0.765 |\n| 5 | 755 | Improper Handling of Exceptional Conditions | Class | Discouraged | sparse | 0.616 |\n| 6 | 269 | Improper Privilege Management | Class | Discouraged | dense | 0.565 |\n| 7 | 613 | Insufficient Session Expiration | Base | Allowed | graph | 0.002 |\n| 8 | 703 | Improper Check or Handling of Exceptional Conditions | Pillar | Discouraged | sparse | 0.575 |\n| 9 | 532 | Insertion of Sensitive Information into Log File | Base | Allowed | sparse | 0.497 |\n| 10 | 863 | Incorrect Authorization | Class | Allowed-with-Review | sparse | 0.467 |\n\n\n\n# Complete CWE Specifications\n\n\n## CWE-284: Improper Access Control\n**Abstraction:** Pillar\n**Status:** Incomplete\n\n### Description\nThe product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n### Extended Description\n\n\nAccess control involves the use of several protection mechanisms such as:\n\n\n  - Authentication (proving the identity of an actor)\n\n  - Authorization (ensuring that a given actor can access a resource), and\n\n  - Accountability (tracking of activities that were performed)\n\nWhen any mechanism is not applied or otherwise fails, attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc.\n\nThere are two distinct behaviors that can introduce access control weaknesses:\n\n\n  - Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.\n\n  - Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.\n\n\n\n### Alternative Terms\nAuthorization: The terms \"access control\" and \"authorization\" are often used interchangeably, although many people have distinct definitions. The CWE usage of \"access control\" is intended as a general term for the various mechanisms that restrict which users can access which resources, and \"authorization\" is more narrowly defined. It is unlikely that there will be community consensus on the use of these terms.\n\n### Relationships\nNone\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-284 is extremely high-level, a Pillar. Its name, \"Improper Access Control,\" is often misused in low-information vulnerability reports [REF-1287] or by active use of the OWASP Top Ten, such as \"A01:2021-Broken Access Control\". It is not useful for trend analysis.\n**Comments:** Consider using descendants of CWE-284 that are more specific to the kind of access control involved, such as those involving authorization (Missing Authorization (CWE-862), Incorrect Authorization (CWE-863), Incorrect Permission Assignment for Critical Resource (CWE-732), etc.); authentication (Missing Authentication (CWE-306) or Weak Authentication (CWE-1390)); Incorrect User Management (CWE-286); Improper Restriction of Communication Channel to Intended Endpoints (CWE-923); etc.\n**Reasons:**\n- Frequent Misuse\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n- CWE-306: Missing Authentication\n- CWE-1390: Weak Authentication\n- CWE-923: Improper Restriction of Communication Channel to Intended Endpoints\n\n\n### Additional Notes\n**[Maintenance]** \n\nThis entry needs more work. Possible sub-categories include:\n\n\n  - Trusted group includes undesired entities (partially covered by CWE-286)\n\n  - Group can perform undesired actions\n\n  - ACL parse error does not fail closed\n\n\n\n\n\n### Observed Examples\n- **CVE-2022-24985:** A form hosting website only checks the session authentication status for a single form, making it possible to bypass authentication when there are multiple forms\n- **CVE-2022-29238:** Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.\n- **CVE-2022-23607:** Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect\n\n\n\n\n## CWE-347: Improper Verification of Cryptographic Signature\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product does not verify, or incorrectly verifies, the cryptographic signature for data.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-345\nChildOf -> CWE-345\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2002-1796:** Does not properly verify signatures for \"trusted\" entities.\n- **CVE-2005-2181:** Insufficient verification allows spoofing.\n- **CVE-2005-2182:** Insufficient verification allows spoofing.\n\n\n\n\n## CWE-285: Improper Authorization\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n### Extended Description\n\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-284\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-285 is high-level and lower-level CWEs can frequently be used instead. It is a level-1 Class (i.e., a child of a Pillar).\n**Comments:** Look at CWE-285's children and consider mapping to CWEs such as CWE-862: Missing Authorization, CWE-863: Incorrect Authorization, CWE-732: Incorrect Permission Assignment for Critical Resource, or others.\n**Reasons:**\n- Abstraction\n**Suggested Alternatives:**\n- CWE-862: Missing Authorization\n- CWE-863: Incorrect Authorization\n- CWE-732: Incorrect Permission Assignment for Critical Resource\n\n\n\n### Observed Examples\n- **CVE-2022-24730:** Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information\n- **CVE-2009-3168:** Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.\n- **CVE-2009-2960:** Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.\n\n\n\n\n## CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory\n**Abstraction:** Base\n**Status:** Draft\n\n### Description\nThe product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-200\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Maintenance]** Depending on usage, this could be a weakness or a category. Further study of all its children is needed, and the entire sub-tree may need to be clarified. The current organization is based primarily on the exposure of sensitive information as a consequence, instead of as a primary weakness.\n\n**[Maintenance]** There is a close relationship with CWE-552, which is more focused on weaknesses. As a result, it may be more appropriate to convert CWE-538 to a category.\n\n\n\n### Observed Examples\n- **CVE-2018-1999036:** SSH password for private key stored in build log\n\n\n\n\n## CWE-755: Improper Handling of Exceptional Conditions\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product does not handle or incorrectly handles an exceptional condition.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-703\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n\n### Observed Examples\n- **CVE-2023-41151:** SDK for OPC Unified Architecture (OPC UA) server has uncaught exception when a socket is blocked for writing but the server tries to send an error\n- **[REF-1374]:** Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)\n- **CVE-2021-3011:** virtual interrupt controller in a virtualization product allows crash of host by writing a certain invalid value to a register, which triggers a fatal error instead of returning an error code\n\n\n\n\n## CWE-269: Improper Privilege Management\n**Abstraction:** Class\n**Status:** Draft\n\n### Description\nThe product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** CWE-269 is commonly misused. It can be conflated with \"privilege escalation,\" which is a technical impact that is listed in many low-information vulnerability reports [REF-1287]. It is not useful for trend analysis.\n**Comments:** If an error or mistake allows privilege escalation, then use the CWE ID for that mistake. Avoid using CWE-269 when only phrases such as \"privilege escalation\" or \"gain privileges\" are available, as these indicate technical impact of the vulnerability - not the root cause weakness. If the root cause seems to be directly related to privileges, then examine the children of CWE-269 for additional hints, such as Execution with Unnecessary Privileges (CWE-250) or Incorrect Privilege Assignment (CWE-266).\n**Reasons:**\n- Frequent Misuse\n\n\n### Additional Notes\n**[Maintenance]** The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).\n\n\n\n### Observed Examples\n- **CVE-2001-1555:** Terminal privileges are not reset when a user logs out.\n- **CVE-2001-1514:** Does not properly pass security context to child processes in certain cases, allows privilege escalation.\n- **CVE-2001-0128:** Does not properly compute roles.\n\n\n\n\n## CWE-613: Insufficient Session Expiration\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nAccording to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-672\nChildOf -> CWE-672\nCanPrecede -> CWE-287\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n### Additional Notes\n**[Other]** The lack of proper session expiration may improve the likely success of certain attacks. For example, an attacker may intercept a session ID, possibly via a network sniffer or Cross-site Scripting attack. Although short session expiration times do not help if a stolen token is immediately used, they will protect against ongoing replaying of the session ID. In another scenario, a user might access a web site from a shared computer (such as at a library, Internet cafe, or open work environment). Insufficient Session Expiration could allow an attacker to use the browser's back button to access web pages previously accessed by the victim.\n\n\n\n\n\n\n## CWE-703: Improper Check or Handling of Exceptional Conditions\n**Abstraction:** Pillar\n**Status:** Incomplete\n\n### Description\nThe product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nNone\n\n### Mapping Guidance\n**Usage:** Discouraged\n**Rationale:** This CWE entry is extremely high-level, a Pillar.\n**Comments:** Consider children or descendants of this entry instead.\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Relationship]** This is a high-level class that might have some overlap with other classes. It could be argued that even \"normal\" weaknesses such as buffer overflows involve unusual or exceptional conditions. In that sense, this might be an inherent aspect of most other weaknesses within CWE, similar to API Abuse (CWE-227) and Indicator of Poor Code Quality (CWE-398). However, this entry is currently intended to unify disparate concepts that do not have other places within the Research Concepts view (CWE-1000).\n\n\n\n### Observed Examples\n- **[REF-1374]:** Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)\n- **CVE-2022-22224:** Chain: an operating system does not properly process malformed Open Shortest Path First (OSPF) Type/Length/Value Identifiers (TLV) (CWE-703), which can cause the process to enter an infinite loop (CWE-835)\n\n\n\n\n## CWE-532: Insertion of Sensitive Information into Log File\n**Abstraction:** Base\n**Status:** Incomplete\n\n### Description\nThe product writes sensitive information to a log file.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nNone\n\n### Relationships\nChildOf -> CWE-538\nChildOf -> CWE-200\n\n### Mapping Guidance\n**Usage:** Allowed\n**Rationale:** This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.\n**Comments:** Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.\n**Reasons:**\n- Acceptable-Use\n\n\n\n### Observed Examples\n- **CVE-2017-9615:** verbose logging stores admin credentials in a world-readable log file\n- **CVE-2018-1999036:** SSH password for private key stored in build log\n\n\n\n\n## CWE-863: Incorrect Authorization\n**Abstraction:** Class\n**Status:** Incomplete\n\n### Description\nThe product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check.\n\n### Extended Description\nNot provided\n\n### Alternative Terms\nAuthZ: \"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization.\n\n### Relationships\nChildOf -> CWE-285\nChildOf -> CWE-284\n\n### Mapping Guidance\n**Usage:** Allowed-with-Review\n**Rationale:** This CWE entry is a Class and might have Base-level children that would be more appropriate\n**Comments:** Examine children of this entry to see if there is a better fit\n**Reasons:**\n- Abstraction\n\n\n### Additional Notes\n**[Terminology]** \n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\n\n\n### Observed Examples\n- **CVE-2021-39155:** Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.\n- **CVE-2019-15900:** Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).\n- **CVE-2009-2213:** Gateway uses default \"Allow\" configuration for its authorization settings.\n\n"
  },
  "timestamp": "2025-04-01 21:54:37",
  "cve_id": "unknown",
  "result_count": 5,
  "results": [
    {
      "cwe_id": "285",
      "name": "Improper Authorization",
      "score": 4885.632059055296,
      "search_source": "unknown"
    },
    {
      "cwe_id": "347",
      "name": "Improper Verification of Cryptographic Signature",
      "score": 4647.762591050541,
      "search_source": "unknown"
    },
    {
      "cwe_id": "863",
      "name": "Incorrect Authorization",
      "score": 4647.584862109215,
      "search_source": "unknown"
    },
    {
      "cwe_id": "639",
      "name": "Authorization Bypass Through User-Controlled Key",
      "score": 4517.992687166223,
      "search_source": "unknown"
    },
    {
      "cwe_id": "287",
      "name": "Improper Authentication",
      "score": 4353.701768740319,
      "search_source": "unknown"
    }
  ]
}